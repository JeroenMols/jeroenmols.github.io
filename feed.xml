<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://jeroenmols.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jeroenmols.com/" rel="alternate" type="text/html" /><updated>2023-03-27T21:00:47+02:00</updated><id>https://jeroenmols.com/feed.xml</id><title type="html">Jeroen Mols</title><subtitle>Blog and portfolio of Jeroen Mols, Software developer at Plaid and Google Developer Expert.</subtitle><author><name>Jeroen Mols</name></author><entry><title type="html">Using multiple SSH keys for Github and Github enterprise</title><link href="https://jeroenmols.com/blog/2023/02/06/multiple-ssh-keys/" rel="alternate" type="text/html" title="Using multiple SSH keys for Github and Github enterprise" /><published>2023-02-06T00:00:00+01:00</published><updated>2023-02-06T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2023/02/06/multiple-ssh-keys</id><content type="html" xml:base="https://jeroenmols.com/blog/2023/02/06/multiple-ssh-keys/"><![CDATA[<p>Looking to configure multiple SSH keys on the same computer? For instance to use a different SSH key for your public and enterprise Github contributions.</p>

<p>This quick little post will show you how to do that.</p>

<h2 id="steps">Steps</h2>
<p>In this I’m assuming you already have an SSH key setup for your enterprise Github account.</p>

<ol>
  <li><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Create a new SSH key and add it to the ssh-agent</a></li>
  <li>Update your <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> file and add a new host:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host <span class="k">*</span>
  AddKeysToAgent <span class="nb">yes
  </span>UseKeychain <span class="nb">yes

</span>Host github.com
  IdentityFile ~/.ssh/id_github_rsa
  UseKeychain <span class="nb">yes

</span>Host github.mycompany.com
  IdentityFile ~/.ssh/id_rsa
  UseKeychain <span class="nb">yes</span>
</code></pre></div></div>

<p>I’m explicitly defining each host, but you could also assign a SSH key to all remaining hosts using <code class="language-plaintext highlighter-rouge">Host *</code>.</p>

<p>That’s it!</p>

<p style="color: #646769; background: #f2f3f3; padding: 20px;">This site is 100% tracker free, :heart: for liking my post on <a href="https://androiddev.social/@Jeroenmols/109819480309091738">Mastodon</a> or <a href="https://www.linkedin.com/feed/update/urn:li:share:7028447120189726720/">Linkedin</a> to let me know you've read this.</p>

<p>If this was helpful to you, consider <a href="https://www.buymeacoffee.com/jeroen">buying me a coffee</a>.</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="ssh" /><category term="terminal" /><category term="tips" /><summary type="html"><![CDATA[Looking to configure multiple SSH keys on the same computer? For instance to use a different SSH key for your public and enterprise Github contributions.]]></summary></entry><entry><title type="html">Removing all trackers from my website</title><link href="https://jeroenmols.com/blog/2023/01/29/remove-trackers/" rel="alternate" type="text/html" title="Removing all trackers from my website" /><published>2023-01-29T00:00:00+01:00</published><updated>2023-01-29T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2023/01/29/remove-trackers</id><content type="html" xml:base="https://jeroenmols.com/blog/2023/01/29/remove-trackers/"><![CDATA[<p>These past years I’ve grown to be more privacy-aware. And while this post isn’t about how I’m increasing my personal privacy, I’d like to talk about how I’m increasing yours.</p>

<p>My website had three services integrated:</p>

<ul>
  <li><a href="https://analytics.google.com/analytics/web/provision/#/provision">Google Analytics</a> gave me insights into how much people read my content and what topics were popular to write about.</li>
  <li><a href="https://www.google.com/adsense/start/">Google Adsense</a> showed ads underneath every blog post and enabled me to monetize my content. With this I received two payments (70.84 euro in 2019 and 74.20 euro in 2020), covering the expenses for my domain name for about 14 years.</li>
  <li><a href="https://disqus.com/">Disqus comments</a> allowed people to comment on my content, but since I didn’t pay for the service Disqus was also serving advertisements.</li>
</ul>

<p>And while these services were adding some value to my website, they were doing so at the cost of your privacy. By default (!!!), they not only track your interaction with my website, but also detailed information about you (gender, age, approximate location,…) and they even track you across different websites.</p>

<p>But should I really be collecting all that data about you?</p>

<p>Should I really hand off all that data to those services?</p>

<p>Have I ever asked your consent about any of this?</p>

<p>Well, I no longer believe it is “normal” for websites or products to engage in these practices. That every experience needs to be personalized. Or that we should give away our privacy so easily.</p>

<p>Therefore I’ve decided to strip all such services. Now my website is a safe space where you can enjoy (hopefully) my content without worrying about advertisements or tracker blockers.</p>

<p>However, I do still care about your opinion!</p>

<p>So moving forward you can:</p>

<ul>
  <li>Let me know you’ve read this by liking one of my social posts</li>
  <li>Talk about my content on <a href="https://www.reddit.com/">Reddit</a> or <a href="https://news.ycombinator.com/">Hacker News</a></li>
  <li>Send me feedback/questions on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a></li>
</ul>

<p>You’re in full control whether you decide to reach out or not!</p>

<p>I’ll keep doing my best to provide you with interesting content (which is a ton of work) and hence appreciate every single like or shoutout.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p style="color: #646769; background: #f2f3f3; padding: 20px;">This site is 100% tracker free, :heart: for liking my post on <a href="https://androiddev.social/@Jeroenmols/109773847044031984">Mastodon</a> or <a href="https://www.linkedin.com/posts/jeroenmols_removing-all-trackers-from-my-website-activity-7025526545435754496-JCWo">Linkedin</a> to let me know you've read this.</p>

<p>My website is now fully tracker and advertisement free, I’ll do my best to guarantee your privacy moving forward.</p>

<p>If this was helpful to you, please let me know on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="website" /><category term="privacy" /><category term="trackers" /><summary type="html"><![CDATA[These past years I’ve grown to be more privacy-aware. And while this post isn’t about how I’m increasing my personal privacy, I’d like to talk about how I’m increasing yours.]]></summary></entry><entry><title type="html">Android emulator access to local server</title><link href="https://jeroenmols.com/blog/2023/01/25/development-server-emulator/" rel="alternate" type="text/html" title="Android emulator access to local server" /><published>2023-01-25T00:00:00+01:00</published><updated>2023-01-25T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2023/01/25/development-server-emulator</id><content type="html" xml:base="https://jeroenmols.com/blog/2023/01/25/development-server-emulator/"><![CDATA[<p>How can you connect your app on an Android emulator to a development server running on the localhost of your computer?</p>

<h2 id="the-problem">The problem</h2>
<p>Since Android emulators create their own virtual network, they cannot access devices on your local network.</p>

<p>This means:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">localhost</code> refers to the emulator, not your laptop</li>
  <li>local MDNS addresses <code class="language-plaintext highlighter-rouge">jmols.local</code> are not accessible</li>
</ul>

<p>So accessing our development server at <code class="language-plaintext highlighter-rouge">https://jmols.local:3000</code> results in the following error:</p>

<p><a href="https://jeroenmols.com/img/blog/developmentserveremulator/error.png" class="align-center"><img src="https://jeroenmols.com/img/blog/developmentserveremulator/error.png" alt="Error trying to connect to the connect to a local network IP/MDNS address" /></a></p>

<h2 id="method-1-use-your-computers-ip-address">Method 1: use your computers IP address</h2>
<blockquote>
  <p>Huge thanks to <a href="https://androiddev.social/@EdyBolos">Eduard-Cristian Boloș</a> for suggesting this solution.</p>
</blockquote>

<p>Since Android emulators can <a href="https://developer.android.com/studio/run/emulator-networking#networkinglimitations">access IP addresses on your network</a>, you can directly point to the IP address of your computer.</p>

<p>Instead of loading <code class="language-plaintext highlighter-rouge">https://jmols.local:3000</code>, you can load <code class="language-plaintext highlighter-rouge">https://&lt;YOUR_COMPUTER_IP&gt;:3000</code> (e.g. <code class="language-plaintext highlighter-rouge">https://192.168.1.123</code>).</p>

<p>This works on both emulators and Android phones!</p>

<p>However you may have to update the IP after connecting to a different network or when your IP lease expires.</p>

<h2 id="method-2-the-loopback-address">Method 2: the loopback address</h2>
<p>Another approach is to change the server URL in your app and point it to <code class="language-plaintext highlighter-rouge">10.0.2.2</code>. This is a <a href="https://developer.android.com/studio/run/emulator-networking#networkaddresses">special alias to your host loopback interface</a> (127.0.0.1 on your development machine).</p>

<p>So instead of loading <code class="language-plaintext highlighter-rouge">https://jmols.local:3000</code>, our app will load <code class="language-plaintext highlighter-rouge">https://10.0.2.2:3000</code> instead.</p>

<p>That fixes the emulator, but now our app no longer works on real devices. (since the loopback IP doesn’t exist there).</p>

<p>Can we find a single solution that works on both emulators and devices?</p>

<h2 id="method-3-redirect-the-emulator">Method 3: redirect the emulator</h2>
<p>In this solution, we’ll instruct the emulator to redirect the IP address from the host machine to the loopback IP address automatically. We’ll do this by editing the <code class="language-plaintext highlighter-rouge">etc/hosts</code> file on the Android emulator.</p>

<p>First, we need to ensure the <code class="language-plaintext highlighter-rouge">etc/hosts</code> file is writable:</p>

<ol>
  <li>Create a new emulator (non Google Play services, so we have access to root)</li>
  <li>Find the emulator AVD name of the emulator
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emulator -list-avds
</code></pre></div>    </div>
  </li>
  <li>Start your emulator from the command line with the option to enable a writable system
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emulator -avd "&lt;AVD_NAME_HERE&gt;" -writable-system
</code></pre></div>    </div>
  </li>
  <li>Run ADB as root
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb root
</code></pre></div>    </div>
  </li>
  <li>Disable verified boot
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb disable-verity
</code></pre></div>    </div>
  </li>
  <li>Reboot the device
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb reboot
</code></pre></div>    </div>
  </li>
  <li>Wait for the device to be rebooted (ready when <code class="language-plaintext highlighter-rouge">adb shell</code> works)</li>
  <li>Run ADB as root (again)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb root
</code></pre></div>    </div>
  </li>
  <li>Remount partitions as read-write
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb remount
</code></pre></div>    </div>
  </li>
</ol>

<p>Now we can overwrite the <code class="language-plaintext highlighter-rouge">etc/hosts</code> file!</p>

<ol>
  <li>First get the existing hosts file
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb pull etc/hosts
</code></pre></div>    </div>
  </li>
  <li>Add an entry to direct your local server domain to the loopback address: <code class="language-plaintext highlighter-rouge">10.0.2.2   &lt;YOUR_LOCAL_HOSTNAME&gt;</code>. Your hostfile should look like this:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1       localhost
::1             ip6-localhost
10.0.2.2        jmols.local
</code></pre></div></div>

<ol>
  <li>Save and push the file back to the emulator:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb push hosts etc/hosts
</code></pre></div>    </div>
  </li>
</ol>

<p>Now our emulator can access our development server at <code class="language-plaintext highlighter-rouge">https://jmols.local:3000</code>!</p>

<blockquote>
  <p>Notice how this solution can easily be generalized to any IP address on your local network.</p>
</blockquote>

<h2 id="bonus-adb-reverse">Bonus: ADB reverse</h2>
<blockquote>
  <p>Huge thanks to <a href="https://androiddev.social/@jefflewis@hachyderm.io">Jeff Lewis</a> for suggesting this solution.</p>
</blockquote>

<p><a href="https://reactnative.dev/docs/running-on-device#method-1-using-adb-reverse-recommended">React native uses ADB reverse</a> to bind an emulator port to a port on your computer.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb reverse tcp:3000 tcp:3000
</code></pre></div></div>

<p>Similarly to the loopback address, this solution isn’t suitable for a physical device.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p style="color: #646769; background: #f2f3f3; padding: 20px;">This site is 100% tracker free, :heart: for liking my post on <a href="https://androiddev.social/@Jeroenmols/109749532076281170">Mastodon</a> or <a href="https://www.linkedin.com/posts/jeroenmols_androiddev-server-react-activity-7023970812340641792-jtiW">Linkedin</a> to let me know you've read this.</p>

<p>Depending on your situation, there are several ways to connect an emulator to a local server. A universal - though complicated way - is to make <code class="language-plaintext highlighter-rouge">etc/hosts</code> writable so you can access your development server using your local MDNS name.</p>

<p>If this was helpful to you, please let me know on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="adb" /><category term="emulator" /><category term="localhost" /><category term="server" /><summary type="html"><![CDATA[How can you connect your app on an Android emulator to a development server running on the localhost of your computer?]]></summary></entry><entry><title type="html">Transfer many large files from Android</title><link href="https://jeroenmols.com/blog/2022/12/17/pull-files-android/" rel="alternate" type="text/html" title="Transfer many large files from Android" /><published>2022-12-17T00:00:00+01:00</published><updated>2022-12-17T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/12/17/pull-files-android</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/12/17/pull-files-android/"><![CDATA[<p>Trying to get a large number of files from your Android phone, but Android File Transfer freezing up?</p>

<p>Here’s what I learned trying to pull ~170 Gb from my Pixel phone.</p>

<h2 id="pulling-files-from-your-phone">Pulling files from your phone</h2>
<p>For this to work you need to <a href="https://www.xda-developers.com/install-adb-windows-macos-linux/">have ADB installed</a> on your computer and <a href="https://developer.android.com/studio/debug/dev-options#enable">developer options enabled</a> on your Android phone.</p>

<p>First, check how large the directory you’re trying to pull is. Let’s assume we want to pull the Camera folder:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell
du -sh sdcard/DCIM

# Output:
171.8G	sdcard/DCIM
</code></pre></div></div>

<blockquote>
  <p>Don’t forget to run <code class="language-plaintext highlighter-rouge">exit</code> to leave the ADB shell.</p>
</blockquote>

<p>If you have enough disk space, you can pull the entire folder to your computer using <code class="language-plaintext highlighter-rouge">adb pull</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb pull -p sdcard/DCIM/ .   
</code></pre></div></div>

<blockquote>
  <p>Notice the <code class="language-plaintext highlighter-rouge">-p</code> option to show transfer progress</p>
</blockquote>

<p>Unfortunately, I didn’t have enough disk space… So instead, let’s pull the files in batches, by using <code class="language-plaintext highlighter-rouge">find</code> to search for files.</p>

<p>For instance to find all video files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell find `sdcard/DCIM/Camera/*.mp4`
</code></pre></div></div>

<p>The result of <code class="language-plaintext highlighter-rouge">find</code> can then be piped into <code class="language-plaintext highlighter-rouge">adb pull</code> to transfer the files one by one to your computer.</p>

<p>Some possibly handy variants are:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Pull all video files
adb shell find 'sdcard/DCIM/Camera/*.mp4' | xargs -n1 adb pull

# Pull all image files
adb shell find 'sdcard/DCIM/Camera/*.jpg' | xargs -n1 adb pull

# Pull al files from the past year
adb shell find 'sdcard/DCIM/Camera/PXL_2022*'

# Pull all files from the past month
adb shell find 'sdcard/DCIM/Camera/PXL_202212*'
</code></pre></div></div>

<h2 id="deleting-pulled-files">Deleting pulled files</h2>
<p>Now that the files are pulled from your phone, you probably also want to delete them to free up phone storage.</p>

<p>The easiest way to do so is to delete the entire folder from your phone:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Caution: this permanently deletes all your files!
adb shell rm &lt;folder-name-here&gt;
</code></pre></div></div>

<p>However, if you hadn’t pulled all files from that folder yet, you will include data loss.</p>

<p>So instead of deleting the folder, we’ll only delete the files that we just synced to our computer.</p>

<p>First list all of the files in the synced folder on your computer using <code class="language-plaintext highlighter-rouge">find</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find . -name '*'
</code></pre></div></div>

<blockquote>
  <p>However, you can also be more granular here if you want:</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># List all images
find . -name '*.jpg'
</code></pre></div>  </div>
</blockquote>

<p>Next, for each listed file, reconstruct the original file path on your phone using <code class="language-plaintext highlighter-rouge">sed</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find . -name '*' | sed 's:.:sdcard/DCIM/Camera:'
</code></pre></div></div>

<p>And finally, delete those files from your phone by piping the result into <code class="language-plaintext highlighter-rouge">adb shell rm</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find . -name '*' | sed 's:.:sdcard/DCIM/Camera:' | xargs -n1 adb shell rm $1
</code></pre></div></div>

<blockquote>
  <p>Note I highly recommend doing a dry run first to check what files will be deleted by using <code class="language-plaintext highlighter-rouge">adb shell ls -l</code>:</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find . -name '*' | sed 's:.:sdcard/DCIM/Camera:' | xargs -n1 adb shell ls -l $1
</code></pre></div>  </div>
</blockquote>

<p>Finally, some possibly handy variants are:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Delete all video files from the current folder from your phone
find . -name '*.mp4' | sed 's:.:sdcard/DCIM/Camera:' | xargs -n1 adb shell rm $1

# Delete all image files from the current folder from your phone
find . -name '*.jpg' | sed 's:.:sdcard/DCIM/Camera:' | xargs -n1 adb shell rm $1
</code></pre></div></div>

<h2 id="wrap-up">Wrap-up</h2>
<p>Android file transfer unfortunately isn’t the most reliable solution to transfer files from your phone to your computer. However, thanks to <code class="language-plaintext highlighter-rouge">adb</code> there is a fast and reliable way to get (a subset of) files from your Android device.</p>

<p>If this was helpful to you, consider <a href="https://www.buymeacoffee.com/jeroen">buying me a coffee</a> or thanking me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a> or <a href="https://twitter.com/molsjeroen">Twitter</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="adb" /><category term="backup" /><category term="files" /><summary type="html"><![CDATA[Trying to get a large number of files from your Android phone, but Android File Transfer freezing up?]]></summary></entry><entry><title type="html">Verify Github profile link on Mastodon</title><link href="https://jeroenmols.com/blog/2022/11/26/mastodon-verify-github/" rel="alternate" type="text/html" title="Verify Github profile link on Mastodon" /><published>2022-11-26T00:00:00+01:00</published><updated>2022-11-26T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/11/26/mastodon-verify-github</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/11/26/mastodon-verify-github/"><![CDATA[<p>Looking to get a fancy verified checkmark on Mastodon for your Github account?</p>

<p>This post details how I made this work.</p>

<h2 id="steps">Steps</h2>
<blockquote>
  <p>Before I get started, huge thanks to <a href="https://fedi.simonwillison.net/@simon">Simon Wilson</a> for inspiring me with the original idea.</p>
</blockquote>

<p>In his <a href="https://til.simonwillison.net/mastodon/verifying-github-on-mastodon">excellent post</a> Simon details how to leverage the <code class="language-plaintext highlighter-rouge">your-username.github.io</code> static webpage to prove Github domain ownership.</p>

<p>The idea is that proving I own <code class="language-plaintext highlighter-rouge">jeroenmols.github.io</code> is equivalent to proving ownership of <code class="language-plaintext highlighter-rouge">github.com/jeroenmols</code>.</p>

<p>However, I can’t simply redirect <a href="https://jeroenmols.github.io">jeroenmols.github.io</a> to my Github profile as I already host my <a href="https://jeroenmols.com">my personal website</a> on that domain. (I use a <a href="https://github.com/JeroenMols/jeroenmols.github.io/blob/master/CNAME">CNAME record</a> to make both domains equivalent).</p>

<p>Consequently, Simon’s approach didn’t work for me. Now what?</p>

<p>Well instead of redirecting the entire domain, I decided to redirect a sub-page. To do this, I:</p>

<ol>
  <li>Added a new page <code class="language-plaintext highlighter-rouge">https://jeroenmols.com/github</code></li>
  <li>Included the Mastodon verification tag: <code class="language-plaintext highlighter-rouge">&lt;link href="https://androiddev.social/@jeroenmols" rel="me"&gt;</code></li>
  <li>Have the page redirect to my Github profile</li>
  <li>Use the domain <code class="language-plaintext highlighter-rouge">jeroenmols.github.io/github</code> on my Mastodon profile</li>
</ol>

<p>The webpage content looks like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Redirecting to github.com/jeroenmols /<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"refresh"</span> <span class="na">content=</span><span class="s">"0; URL=https://github.com/jeroenmols"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://github.com/jeroenmols"</span> <span class="na">rel=</span><span class="s">"me"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://jeroenmols.com"</span> <span class="na">rel=</span><span class="s">"me"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://androiddev.social/@jeroenmols"</span> <span class="na">rel=</span><span class="s">"me"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>And my <a href="https://androiddev.social/@Jeroenmols">Mastodon profile</a>, now looks like this:</p>

<p><img src="https://jeroenmols.com/img/blog/mastodonverifygithub/mastodon-profile.png" alt="Mastondon profile" class="align-center" /></p>

<p>That’s it!</p>

<p>If this was helpful to you, consider <a href="https://www.buymeacoffee.com/jeroen">buying me a coffee</a> or thanking me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a> or <a href="https://twitter.com/molsjeroen">Twitter</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="mastodon" /><category term="github" /><category term="tips" /><summary type="html"><![CDATA[Looking to get a fancy verified checkmark on Mastodon for your Github account?]]></summary></entry><entry><title type="html">Test React app on mobile without Wi-Fi</title><link href="https://jeroenmols.com/blog/2022/11/19/react-local-development/" rel="alternate" type="text/html" title="Test React app on mobile without Wi-Fi" /><published>2022-11-19T00:00:00+01:00</published><updated>2022-11-19T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/11/19/react-local-development</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/11/19/react-local-development/"><![CDATA[<p>Traveling by train or plane and want to test your react app on your mobile phone? This quick post explains how to access your react development server from your phone without a Wi-Fi connection.</p>

<h2 id="steps">Steps</h2>

<ol>
  <li>Connect your phone to your laptop using a USB cable</li>
  <li>Enable <code class="language-plaintext highlighter-rouge">USB tethering</code>
    <ul>
      <li>Android: System settings &gt; Network &amp; internet &gt; Hotspot &amp; tethering &gt; USB tethering</li>
    </ul>
  </li>
  <li>Start your react server on your laptop <code class="language-plaintext highlighter-rouge">npm start</code></li>
  <li>Open your servers <code class="language-plaintext highlighter-rouge">ip:port</code> on your phone</li>
</ol>

<p>That’s it!</p>

<p>If this was helpful to you, consider <a href="https://www.buymeacoffee.com/jeroen">buying me a coffee</a> or thanking me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a> or <a href="https://twitter.com/molsjeroen">Twitter</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="react" /><category term="offline" /><category term="tips" /><summary type="html"><![CDATA[Traveling by train or plane and want to test your react app on your mobile phone? This quick post explains how to access your react development server from your phone without a Wi-Fi connection.]]></summary></entry><entry><title type="html">The curious case of crashing Workers</title><link href="https://jeroenmols.com/blog/2022/04/27/workmanager-crash/" rel="alternate" type="text/html" title="The curious case of crashing Workers" /><published>2022-04-27T00:00:00+02:00</published><updated>2022-04-27T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2022/04/27/workmanager-crash</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/04/27/workmanager-crash/"><![CDATA[<p>WorkManager is great to schedule background work on Android. However, since scheduled work lives outside of the app lifecycle, you might run into unexpected crashes.</p>

<p>Read on to learn why and how to prevent this.</p>

<h2 id="how-to-crash-workmanager">How to crash WorkManager</h2>
<p>Reading <a href="https://developer.android.com/topic/libraries/architecture/workmanager">the documentation</a>, it is clear that <code class="language-plaintext highlighter-rouge">WorkManager</code> is a worry-free solution to background work:</p>

<blockquote>
  <p>WorkManager is the recommended solution for persistent work. Work is persistent when it remains scheduled through app restarts and system reboots.</p>
</blockquote>

<p>That’s very neat!</p>

<p>So if we schedule some work, for instance upload a crash:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">workerClass</span> <span class="p">=</span> <span class="nc">CrashUploadWorker</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span>
<span class="nc">WorkManager</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="nc">OneTimeWorkRequest</span><span class="p">.</span><span class="nc">Builder</span><span class="p">(</span><span class="n">workerClass</span><span class="p">).</span><span class="nf">build</span><span class="p">())</span>
</code></pre></div></div>

<p>We can be sure that WorkManager will handle it for us, even when the app closes it self immediately after the crash.</p>

<p>However, <code class="language-plaintext highlighter-rouge">WorkManager</code> assumes that the <code class="language-plaintext highlighter-rouge">Worker</code> class will always exist in our application. So if we ship a new version of our application that either:</p>

<ul>
  <li>removes the <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code></li>
  <li>renames the <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code> to <code class="language-plaintext highlighter-rouge">CrashReportWorker</code></li>
  <li>moves the <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code> to a new package</li>
</ul>

<p>We might get a <code class="language-plaintext highlighter-rouge">ClassNotFoundException</code> crash after installing the update!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java.lang.Error: java.lang.ClassNotFoundException: com.example.CrashUploadWorker
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1119)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
        at java.lang.Thread.run(Thread.java:818)
</code></pre></div></div>

<p>This happens, because <code class="language-plaintext highlighter-rouge">WorkManager</code> lives in a separate process (Google Play Services) and will always try to complete its work. It will try to instantiate <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code>, but that no longer exists in our application.</p>

<p>Unfortunately <a href="https://github.com/plaid/plaid-link-android/issues/201">I had to learn this the hard way</a>.</p>

<blockquote>
  <p>Notice the usage of “might”: a crash isn’t guaranteed and will only happen if there was unfinished work pending while the app got updated.</p>
</blockquote>

<h2 id="how-not-to-crash-workmanager">How not to crash WorkManager</h2>
<p>The first thing you can try is to cancel all pending work for the <code class="language-plaintext highlighter-rouge">Worker</code> you removed/renamed:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">workManager</span><span class="p">.</span><span class="nf">cancelAllWorkByTag</span><span class="p">(</span><span class="s">"crash_upload"</span><span class="p">)</span>
</code></pre></div></div>

<p>This approach can be subject to race conditions as <code class="language-plaintext highlighter-rouge">Workmanager</code> might still retry to execute the scheduled work before you had the chance to cancel. (depending on where you call this)</p>

<p>Another downside of this approach is that this will drop scheduled work, causing data loss. Depending on your unique use case that may or may not be acceptable.</p>

<p>An alternative approach is to keep the original <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code> class and modify that to handle the changing requirements:</p>

<ul>
  <li>drop the work (empty implementation)</li>
  <li>migrate and schedule the new worker class</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="kd">class</span> <span class="nc">CrashUploadWorker</span><span class="p">(</span>
  <span class="n">appContext</span><span class="p">:</span> <span class="nc">Context</span><span class="p">,</span>
  <span class="n">workerParams</span><span class="p">:</span> <span class="nc">WorkerParameters</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">CoroutineWorker</span><span class="p">(</span><span class="n">appContext</span><span class="p">,</span> <span class="n">workerParams</span><span class="p">)</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">doWork</span><span class="p">():</span> <span class="nc">Result</span> <span class="p">{</span>
    <span class="c1">// Schedule new worker class</span>
    <span class="kd">val</span> <span class="py">workerClass</span> <span class="p">=</span> <span class="nc">CrashReportWorker</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span>
    <span class="nc">WorkManager</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="n">appContext</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="nc">OneTimeWorkRequest</span><span class="p">.</span><span class="nc">Builder</span><span class="p">(</span><span class="n">workerClass</span><span class="p">).</span><span class="nf">build</span><span class="p">())</span>
    <span class="k">return</span> <span class="nc">Result</span><span class="p">.</span><span class="nf">success</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Once you stop scheduling work using the old <code class="language-plaintext highlighter-rouge">Worker</code>, you can mark it to be removed after all your customers have updated and migrated.</p>

<p>Finally, here’s what a migration plan could look like:</p>

<ul>
  <li>Release 1: Add new worker and migrate all work</li>
  <li>Release 5: Cancel all remaining work using old <code class="language-plaintext highlighter-rouge">Worker</code> (causes data loss!)</li>
  <li>Release 10: Remove old <code class="language-plaintext highlighter-rouge">Worker</code> (causes crashes!)</li>
</ul>

<h2 id="using-workerfactory">Using WorkerFactory</h2>
<p>An alternative approach is to provide a custom <code class="language-plaintext highlighter-rouge">WorkerFactory</code> to handle the migration to the new class.</p>

<blockquote>
  <p>Thanks to <a href="https://twitter.com/pfmaggi">Pietro Maggi</a> and Steffan Davies for suggesting this approach</p>
</blockquote>

<p>To do so, first <a href="https://developer.android.com/topic/libraries/architecture/workmanager/advanced/custom-configuration#on-demand">disable automatic <code class="language-plaintext highlighter-rouge">WorkManager</code> initialization</a>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;provider</span>
   <span class="na">android:name=</span><span class="s">"androidx.startup.InitializationProvider"</span>
   <span class="na">android:authorities=</span><span class="s">"${applicationId}.androidx-startup"</span>
   <span class="na">android:exported=</span><span class="s">"false"</span>
   <span class="na">tools:node=</span><span class="s">"merge"</span><span class="nt">&gt;</span>
   <span class="c">&lt;!-- If you are using androidx.startup to initialize other components --&gt;</span>
   <span class="nt">&lt;meta-data</span>
       <span class="na">android:name=</span><span class="s">"androidx.work.WorkManagerInitializer"</span>
       <span class="na">android:value=</span><span class="s">"androidx.startup"</span>
       <span class="na">tools:node=</span><span class="s">"remove"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/provider&gt;</span>
</code></pre></div></div>

<p>Then initialize the <code class="language-plaintext highlighter-rouge">WorkManager</code> in your <code class="language-plaintext highlighter-rouge">Application#onCreate</code> or <code class="language-plaintext highlighter-rouge">ContentProvider</code>:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">configuration</span> <span class="p">=</span> <span class="nc">Configuration</span><span class="p">.</span><span class="nc">Builder</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">setWorkerFactory</span><span class="p">(</span><span class="nc">MigrateWorkerFactory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">build</span><span class="p">()</span>
<span class="nc">WorkManager</span><span class="p">.</span><span class="nf">initialize</span><span class="p">(</span><span class="n">appContext</span><span class="p">,</span> <span class="n">configuration</span><span class="p">)</span>
</code></pre></div></div>

<p>And create your own <a href="https://developer.android.com/reference/androidx/work/WorkerFactory"><code class="language-plaintext highlighter-rouge">WorkerFactory</code></a> that schedules the new worker:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MigrateWorkerFactory</span><span class="p">()</span> <span class="p">:</span> <span class="nc">WorkerFactory</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">createWorker</span><span class="p">(</span>
    <span class="n">appContext</span><span class="p">:</span> <span class="nc">Context</span><span class="p">,</span>
    <span class="n">workerClassName</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">workerParameters</span><span class="p">:</span> <span class="nc">WorkerParameters</span>
  <span class="p">):</span> <span class="nc">ListenableWorker</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">workerClassName</span> <span class="p">=</span> <span class="s">"com.example.CrashUploadWorker"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nc">CrashReportWorker</span><span class="p">(</span><span class="n">appContext</span><span class="p">,</span> <span class="n">workerParameters</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="o">..</span><span class="p">.</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This has the upside of not needing to keep the old <code class="language-plaintext highlighter-rouge">Worker</code> class around, but comes with some extra complexity of manual <code class="language-plaintext highlighter-rouge">WorkManager</code> initialization.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p><code class="language-plaintext highlighter-rouge">WorkManager</code> is a very handy tool to handle background work, but be careful with removing or renaming <code class="language-plaintext highlighter-rouge">Workers</code>.</p>

<p>If you’ve made it this far you should probably follow me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a>. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="workmanager" /><category term="crash" /><summary type="html"><![CDATA[WorkManager is great to schedule background work on Android. However, since scheduled work lives outside of the app lifecycle, you might run into unexpected crashes.]]></summary></entry><entry><title type="html">No, your pull request does not need a review</title><link href="https://jeroenmols.com/blog/2022/02/23/pull-request-reviews/" rel="alternate" type="text/html" title="No, your pull request does not need a review" /><published>2022-02-23T00:00:00+01:00</published><updated>2022-02-23T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/02/23/pull-request-reviews</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/02/23/pull-request-reviews/"><![CDATA[<p>In the past years, my thoughts on pull request reviews have evolved considerably. Given that creating and reviewing pull requests are a core part of our work, let’s talk about those.</p>

<p>This post will detail when to craft a pull request and what pull requests require a code review.</p>

<h2 id="when-to-craft-a-pull-request">When to craft a pull request</h2>
<blockquote>
  <p>Always.</p>
</blockquote>

<p>Starting with the easiest part: every code change requires a pull request. This is mainly for two reasons:</p>

<ol>
  <li>Code quality</li>
  <li>Provide additional context</li>
</ol>

<h3 id="1-code-quality">1. Code quality</h3>
<p>Your team likely wants to establish a common baseline of quality.</p>

<p>For this most teams use a set of automated checks that are executed on every pull request. These can verify that the code builds, tests pass, test coverage does not decrease, app size is within certain limits, …</p>

<p>However, some checks can also be manual, such as a checklist on the pull request template. These nudge developers to avoid unrelated changes, do a self-review, add clear descriptions, steps to test the changes, …</p>

<h3 id="2-provide-additional-context">2. Provide additional context</h3>
<p>Writing a pull request is a useful form of documentation. It allows additional context to code changes such as why the changes are required and what alternatives were considered.</p>

<p>For bugs, you can elaborate on the steps to reproduce, a stack trace of the issue, and what steps others can follow to verify the proposed solution. Adding before/after screenshots can be incredibly helpful in reviewing UI changes.</p>

<p>Finally, draft pull requests can be a tool to compare alternatives or an effective way to convey your design ideas to others.</p>

<h2 id="when-your-pull-request-requires-a-review">When your pull request requires a review</h2>
<blockquote>
  <p>For all significant, non-critical code changes.</p>
</blockquote>

<p>While you might have expected an <code class="language-plaintext highlighter-rouge">always</code> here, I can at least think of two scenarios where pull request reviews might be skipped:</p>

<ol>
  <li>Trivial code</li>
  <li>High urgency changes</li>
</ol>

<h3 id="1-trivial-code">1. Trivial code</h3>
<p>Some code changes are straightforward, such as bumping the app version. Would you want to hold off your release until a team member finds the time to review the following?</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> defaultConfig {
<span class="gd">-    versionName "1.3.0"
</span><span class="gi">+    versionName "1.3.1"
</span>     ...
 }
</code></pre></div></div>

<p>But why stop there?</p>

<p>How about committing the output of automatic scripts? Examples are adding new translations, updating the <a href="https://developers.google.com/protocol-buffers/">Protobuf</a> definitions, or tweaking assets.</p>

<p>Far too often have I had to disrupt a colleague’s “flow” for a “quick stamp” on a particular pull request. Whereas in reality, our default automated checks would have been sufficient.</p>

<h3 id="2-high-urgency-changes">2. High urgency changes</h3>
<p>What if, despite all processes, main is suddenly broken?</p>

<p>A common scenario for me is that end-to-end tests suddenly start failing. Either due to a backend change or due to a change on <a href="https://firebase.google.com/docs/test-lab/">Firebase tests lab</a>. In this case, main will still compile, but the builds for all open pull requests would fail.</p>

<p><a href="https://jeroenmols.com/img/blog/pullrequestreview/failed_builds.png"><img src="https://jeroenmols.com/img/blog/pullrequestreview/failed_builds.png" alt="All pull request builds are failing due to an issue with the end-to-end tests" /></a></p>

<p>An even worse situation is when two incompatible changes are merged, breaking main compilation as a result. That is even more impactful as it also breaks compilation for all developers starting from or rebasing onto the latest main.</p>

<p>Given such an impact, should you wait for approval before merging the fix?</p>

<p>Let’s think about the worst-case scenario:</p>

<ol>
  <li>main breaks</li>
  <li>someone on the team implements a very hacky fix</li>
  <li>person opens pull request (mandatory!)</li>
  <li>all automated checks pass</li>
  <li>merge the fix into main and builds turn green</li>
</ol>

<p>Now there’s a very hacky fix in main, but builds are green. Did that fix improve the situation? Yes. Should that fix stay in main forever? Of course not.</p>

<p>We need to accept that software is never finished, and it will always continue to evolve. So after the quick patch, other team members can chime in, offer suggestions and follow up with another pull request containing a more sustainable solution.</p>

<h3 id="compounding-factors">Compounding factors</h3>
<p>In some situations, requiring reviews can be especially frustrating:</p>

<ul>
  <li>remote work: unable to tap a colleague on her shoulder for a quick review</li>
  <li>asynchronous work: my colleagues are 9 (!) time zones apart from me</li>
  <li>foundational tasks: e.g. update protobufs, so you can build your new feature on top</li>
</ul>

<h2 id="interesting-idea-but-it-wont-work-at-our-scale">Interesting idea, but it won’t work at our scale</h2>
<p>That might be true, I haven’t tested this out on a 100+ people project. And given that my proposal relies more on developer trust, I could see some scaling challenges.</p>

<p>However, I would question whether your scale challenges are unique.</p>

<p>Don’t all processes run into scaling issues as teams grow? Can’t we just apply our usual solutions?</p>

<p>Few ideas:</p>

<ul>
  <li>Tools can determine whether a PR needs a review based on predefined requirements</li>
  <li>Tools can enforce providing a rationale when a PR is merged without review. This can even be broadcasted (Slack) to all team members</li>
  <li>Some trivial changes could be fully automated: e.g. continuously integrating new translations or assets</li>
  <li>Code ownership can restrict who can skip reviews for certain parts of the code base,…</li>
  <li>…</li>
</ul>

<p>Regardless of my suggestions, removing frustrations from your development process is one of the most impactful things you can do.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p>All code changes require a pull request before they are merged. Code reviews are encouraged, but they can be skipped for trivial or highly urgent changes.</p>

<p>If you’ve made it this far you should probably follow me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a>. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="pull request" /><category term="code review" /><category term="process" /><category term="team" /><summary type="html"><![CDATA[In the past years, my thoughts on pull request reviews have evolved considerably. Given that creating and reviewing pull requests are a core part of our work, let’s talk about those.]]></summary></entry><entry><title type="html">Migrate existing library artifacts from JCenter to Maven Central</title><link href="https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral/" rel="alternate" type="text/html" title="Migrate existing library artifacts from JCenter to Maven Central" /><published>2021-03-24T00:00:00+01:00</published><updated>2021-03-24T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral</id><content type="html" xml:base="https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral/"><![CDATA[<p>With JCenter shutting down, many are migrating to Maven Central. And while there are many posts on how to publish new artifacts, also all existing artifacts should be migrated away from JCenter.</p>

<p>This post will cover all steps required to migrate artifacts from JCenter to Maven Central. It will present a script to automatically perform such a migration so that it can be run on a CI and have the secrets injected.</p>

<h2 id="required-before-you-start">Required before you start</h2>
<p>To migrate an existing project to Maven Central involves two steps:</p>

<ol>
  <li>Update (Gradle) scripts to publish to Maven Central</li>
  <li>Migrate all existing artifacts from JCenter to Maven Central</li>
</ol>

<p>This post will only cover the second step and hence assumes that the reader has a <a href="https://issues.sonatype.org/secure/Dashboard.jspa">Sonatype account</a> and GPG key available.</p>

<p>If you don’t have these yet, have a look at <a href="https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/">this great post</a> by <a href="https://twitter.com/zsmb13">Márton Braun</a>. It will also explain the required steps to make artifacts available after uploading on the Sonatype backend.</p>

<h2 id="migration-steps">Migration steps</h2>
<p>These are the steps to migrate from JCenter to Maven Central:</p>

<ol>
  <li><a href="#1-enumerate-all-versions-to-migrate">Enumerate all versions to migrate</a></li>
  <li><a href="#2-configure-gnu-pg-with-a-signing-key">Configure GNU PG with a signing key</a></li>
  <li><a href="#3-setup-credentials-for-maven-central-upload">Setup credentials to upload to Maven Central</a></li>
  <li>For each existing version:
    <ul>
      <li><a href="#4a-download-artifacts">Download the artifact from JCenter</a></li>
      <li><a href="#4b-add-all-missing-info-to-pomxml">Add all missing info to <code class="language-plaintext highlighter-rouge">pom.xml</code></a></li>
      <li><a href="#4c-sign-and-upload-to-maven-central">Sign and upload the artifact to Maven Central</a></li>
    </ul>
  </li>
</ol>

<p>If you’re impatient, feel free to <a href="#bringing-it-all-together">jump ahead to the full script</a> below.</p>

<p>Though I encourage you to have a look at specific sections as your signing key may be in a different format, sections may be missing from your <code class="language-plaintext highlighter-rouge">pom.xml</code>,…</p>

<h2 id="1-enumerate-all-versions-to-migrate">1. Enumerate all versions to migrate</h2>
<p>To get all previously published versions from JCenter, navigate to the following url:</p>

<p><code class="language-plaintext highlighter-rouge">https://dl.bintray.com/&lt;bintray-org&gt;/&lt;bintray-repo&gt;/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;</code></p>

<p>For the <a href="https://bintray.com/plaid/link-android/com.plaid.link">Plaid Link Android SDK located</a>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;bintray-org&gt;</code>: <code class="language-plaintext highlighter-rouge">plaid</code> - first part of url</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;bintray-repo&gt;</code>: <code class="language-plaintext highlighter-rouge">link-android</code> - second part of url</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;group-id-slash-separated&gt;</code>: <code class="language-plaintext highlighter-rouge">com.plaid.link</code> - group id with <code class="language-plaintext highlighter-rouge">.</code> replaced by <code class="language-plaintext highlighter-rouge">/</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;artifact-id&gt;</code>: <code class="language-plaintext highlighter-rouge">sdk-core</code> - artifact id</li>
</ul>

<p><a href="/img/blog/migrateartifactsmaven/jcenter_info.png"><img src="/img/blog/migrateartifactsmaven/jcenter_info.png" alt="Bintray and Maven credentials to construct versions url" class="align-center" /></a></p>

<p>Resulting in the <a href="https://dl.bintray.com/plaid/link-android/com/plaid/link/sdk-core">following url</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">BINTRAYURL</span><span class="o">=</span>https://dl.bintray.com/plaid/link-android/com/plaid/link/sdk-core
</code></pre></div></div>

<p>From this, all versions can be copy-pasted in plain text and converted into a space-separated array. Either using a text editor or command line (OSX only):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pbpaste | <span class="nb">tr</span> <span class="s1">'/'</span> <span class="s1">' '</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span>
</code></pre></div></div>

<p>Now the versions can be used as an input variable for the script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">VERSIONS</span><span class="o">=(</span>0.1.0 0.1.1 0.1.2 0.1.3 0.1.4 0.1.5 0.2.0 0.2.1 0.2.2 <span class="se">\</span>
            0.3.0 0.3.1 0.3.2 0.3.3 0.3.4 0.3.5 0.3.6 1.0.0 1.0.1 <span class="se">\</span>
            1.0.2 1.0.3 1.1.0 1.2.0 1.2.1 1.3.0 1.3.1 1.4.0 1.4.1 <span class="se">\</span>
            2.0.0 2.0.0-rc1 2.0.0-rc2 2.0.0-rc3 2.1.0 2.1.1 2.1.2 <span class="se">\</span>
            2.2.0 3.0.0 3.0.1 3.1.0 3.1.1 3.2.0 3.2.0-rc1 3.2.0-rc2 <span class="se">\</span>
            3.2.1 3.2.2 3.2.3 3.2.4<span class="o">)</span>
</code></pre></div></div>

<p>Finally, keep this URL somewhere as we’ll need it later on to download all artifacts.</p>

<h2 id="2-configure-gnu-pg-with-a-signing-key">2. Configure GNU PG with a signing key</h2>
<p>To sign the artifacts, we’ll use <a href="https://gnupg.org/">GNU PG</a>.</p>

<p>First, ensure GNU GPG is installed:</p>

<ul>
  <li>OSX: <code class="language-plaintext highlighter-rouge">$ brew install gnupg</code></li>
  <li>Docker: <code class="language-plaintext highlighter-rouge">$ RUN apk add gnupg</code></li>
</ul>

<p>Now your private key can be imported by:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--import</span> private.key
</code></pre></div></div>

<p>Or if you’ll be running the script on your CI environment, you may want to inject a base64 encoded version of the private key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Export base64 key</span>
gpg <span class="nt">--export-secret-key</span> <span class="nt">--armor</span> | <span class="nb">base64</span>

<span class="c"># Import base64 key</span>
<span class="nb">echo</span> <span class="nv">$BASE64_SIGNING_KEY</span> | <span class="nb">base64</span> <span class="nt">-d</span> | gpg <span class="nt">--import</span>
</code></pre></div></div>

<h2 id="3-setup-credentials-for-maven-central-upload">3. Setup credentials for Maven Central upload</h2>
<p>To make sure Maven can access your Sonatype credentials, a <code class="language-plaintext highlighter-rouge">settings.xml</code> needs to be created in the <code class="language-plaintext highlighter-rouge">~/.m2</code> folder with the <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">password</code>.</p>

<p>First define a variable for <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">password</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SONATYPE_USERNAME</span><span class="o">=</span><span class="s2">"&lt;username_here&gt;"</span>
<span class="nv">SONATYPE_PASSWORD</span><span class="o">=</span><span class="s2">"&lt;password_here&gt;"</span>
</code></pre></div></div>

<p>Note that these shouldn’t contain any characters that aren’t compatible with xml. Hence we better xml encode them before using:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>xml_encode<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="nv">$1</span> | <span class="nb">sed</span> <span class="s1">'s/&amp;/\&amp;amp;/g; s/&lt;/\&amp;lt;/g; s/&gt;/\&amp;gt;/g; s/"/\&amp;quot;/g; s/'</span><span class="s2">"'"</span><span class="s1">'/\&amp;#39;/g'</span>
<span class="o">}</span>

<span class="nv">SONATYPE_USERNAME</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="s2">"&lt;username_here&gt;"</span><span class="si">)</span>
<span class="nv">SONATYPE_PASSWORD</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="s2">"&lt;password_here&gt;"</span><span class="si">)</span>
</code></pre></div></div>

<p>Next, make sure the <code class="language-plaintext highlighter-rouge">~/.m2</code> directory is created:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p ~/.m2
</code></pre></div></div>

<p>And finally create the <code class="language-plaintext highlighter-rouge">settings.xml</code> file with the credentials:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"&lt;settings xmlns=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0</span><span class="se">\"</span><span class="s2"> xmlns:xsi=</span><span class="se">\"</span><span class="s2">http://www.w3.org/2001/XMLSchema-instance</span><span class="se">\"</span><span class="s2">
  xsi:schemaLocation=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd</span><span class="se">\"</span><span class="s2">&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;</span><span class="nv">$MAVEN_CENTRAL_REPOID</span><span class="s2">&lt;/id&gt;
      &lt;username&gt;</span><span class="nv">$SONATYPE_USERNAME</span><span class="s2">&lt;/username&gt;
      &lt;password&gt;</span><span class="nv">$SONATYPE_PASSWORD</span><span class="s2">&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;"</span> <span class="o">&gt;</span> ~/.m2/settings.xml
</code></pre></div></div>

<h2 id="4a-download-artifacts">4.a Download artifacts</h2>
<p>First, define the output directory where the downloaded files will be placed.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">OUTPUT_DIR</span><span class="o">=</span><span class="s2">"output"</span>
</code></pre></div></div>

<p>Then for each version, create a new directory that will host the downloaded artifacts:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>
<span class="k">done</span>
</code></pre></div></div>

<p>And finally, download all the artifacts using the base URL that we created in step 1:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
  ...
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.aar <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.aar
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom
<span class="k">done</span>
</code></pre></div></div>

<p>This will represent a similar folder structure in the output directory as what is present in Maven.</p>

<blockquote>
  <p>Note: if you deploy more artifacts (e.g. <code class="language-plaintext highlighter-rouge">javadoc.jar</code>), make sure to download them here. And when your artifact is a <code class="language-plaintext highlighter-rouge">.jar</code>, update the extension.</p>
</blockquote>

<h2 id="4b-add-all-missing-info-to-pomxml">4.b Add all missing info to <code class="language-plaintext highlighter-rouge">pom.xml</code></h2>
<p>Maven Central has <a href="https://central.sonatype.org/publish/requirements/#sufficient-metadata">more mandatory fields</a> for the <code class="language-plaintext highlighter-rouge">pom.xml</code> and hence the <code class="language-plaintext highlighter-rouge">pom.xml</code> files may need to be amended before uploading.</p>

<p>I had to add the following info:</p>

<ul>
  <li>name</li>
  <li>description</li>
  <li>URL</li>
  <li>license</li>
  <li>developer</li>
  <li>organization</li>
  <li>SCM (link to source control)</li>
</ul>

<p>To add the information above, let’s replace an existing attribute in the <code class="language-plaintext highlighter-rouge">pom.xml</code> with a new XML snippet that contains all information. A good candidate to replace is the <code class="language-plaintext highlighter-rouge">&lt;packaging&gt;</code> attribute:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_PLACEHOLDER</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;.*&gt;"</span>
</code></pre></div></div>

<p>This will be replaced with a new XML snippet that starts with the same attribute, but adds the other attributes to the <code class="language-plaintext highlighter-rouge">pom.xml</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_REPLACEMENT</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;aar&lt;/packaging&gt;

  &lt;name&gt;name here&lt;/name&gt;
  &lt;description&gt;description here&lt;/description&gt;
  &lt;url&gt;url here&lt;/url&gt;


  &lt;licenses&gt;
    &lt;license&gt;
      &lt;name&gt;license here&lt;/name&gt;
      &lt;url&gt;url to license&lt;/url&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;

  &lt;organization&gt;
    &lt;name&gt;name here&lt;/name&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/organization&gt;

   &lt;developers&gt;
    &lt;developer&gt;
      &lt;organization&gt;name here&lt;/organization&gt;
      &lt;organizationUrl&gt;url here&lt;/organizationUrl&gt;
    &lt;/developer&gt;
  &lt;/developers&gt;

  &lt;scm&gt;
    &lt;connection&gt;url here&lt;/connection&gt;
    &lt;developerConnection&gt;url here&lt;/developerConnection&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/scm&gt;
  "</span>
</code></pre></div></div>

<blockquote>
  <p>To learn what data to provide for each attribute, have a look a the <a href="https://central.sonatype.org/publish/requirements/#sufficient-metadata">sonatype documentation</a></p>
</blockquote>

<blockquote>
  <p>Note that your <code class="language-plaintext highlighter-rouge">pom.xml</code> might already have been defining some of these attributes, so you may not need to add all of these replacement attributes when migrating your project</p>
</blockquote>

<p>Using <code class="language-plaintext highlighter-rouge">sed</code> we can replace the placeholder with the replacement text:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/</span><span class="nv">$POM_PLACEHOLDER</span><span class="s2">/</span><span class="nv">$POM_REPLACEMENT_ESCAPED</span><span class="s2">/g"</span> <span class="se">\</span>
  <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom
</code></pre></div></div>

<p>Unfortunately, that doesn’t work as all <code class="language-plaintext highlighter-rouge">/</code> in the replacement snippet need to be escaped or <code class="language-plaintext highlighter-rouge">sed</code> will consider them part of its command.</p>

<p>To fix this, preprocess the replacement snippet:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_REPLACEMENT_ESCAPED</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">POM_REPLACEMENT</span><span class="k">}</span><span class="s2">"</span> |<span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s#/#\\/#g'</span><span class="si">)</span>
</code></pre></div></div>

<p>Almost there, but <code class="language-plaintext highlighter-rouge">sed</code> cannot handle multi-line replacements.</p>

<p>This can be solved by using <code class="language-plaintext highlighter-rouge">tr</code> to temporarily swap the <code class="language-plaintext highlighter-rouge">/n</code> characters with a unique character <code class="language-plaintext highlighter-rouge">@</code> and swapping it back after the replacement:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_REPLACEMENT_ESCAPED</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">POM_REPLACEMENT</span><span class="k">}</span><span class="s2">"</span> |<span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s#/#\\/#g'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">'@'</span><span class="si">)</span>
<span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/</span><span class="nv">$POM_PLACEHOLDER</span><span class="s2">/</span><span class="nv">$POM_REPLACEMENT_ESCAPED</span><span class="s2">/g"</span> <span class="se">\</span>
    <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom |<span class="se">\</span>
     <span class="nb">tr</span> <span class="s1">'@'</span> <span class="s1">'\n'</span> <span class="o">&gt;</span> temp.txt
<span class="nb">mv </span>temp.txt <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom
</code></pre></div></div>

<p>Notice how an intermediate file <code class="language-plaintext highlighter-rouge">temp.txt</code> is used to avoid reading and modifying the original file at the same time.</p>

<h2 id="4c-sign-and-upload-to-maven-central">4.c Sign and upload to Maven Central</h2>
<p>To sign and upload the artifacts to Maven Central, what better tool to use than Maven itself?</p>

<p>First, make sure Maven is installed:</p>

<ul>
  <li>OSX: <code class="language-plaintext highlighter-rouge">$ brew install maven</code></li>
  <li>Docker: <code class="language-plaintext highlighter-rouge">$ RUN apk add maven</code></li>
</ul>

<p>Then define the repository id and staging URL constants:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Constants, no need to change these</span>
<span class="nv">MAVEN_CENTRAL_STAGINGURL</span><span class="o">=</span><span class="s2">"https://oss.sonatype.org/service/local/staging/deploy/maven2"</span>
<span class="nv">MAVEN_CENTRAL_REPOID</span><span class="o">=</span><span class="s2">"ossrh"</span>
</code></pre></div></div>

<p>Finally, invoke Maven with the GPG sign and deploy plugin:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
  ...
mvn gpg:sign-and-deploy-file <span class="se">\</span>
   <span class="nt">-Durl</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_STAGINGURL</span> <span class="se">\</span>
   <span class="nt">-DrepositoryId</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_REPOID</span> <span class="se">\</span>
   <span class="nt">-DpomFile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
   <span class="nt">-Dfile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.aar
<span class="k">done</span>
</code></pre></div></div>

<p>This will upload all your files to the staging environment on Maven Central.</p>

<blockquote>
  <p>Note: If you want to upload additional artifacts (e.g. javadoc.jar), have a look at the <a href="https://central.sonatype.org/pages/manual-staging-bundle-creation-and-deployment.html">Sonatype documentation</a>.</p>
</blockquote>

<p>After, login to Sonatype to close the repository from future uploads and promote all artifacts to release. This process is well described in the <a href="https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/#your-first-release">your first release</a> section by <a href="https://twitter.com/zsmb13">Márton Braun</a></p>

<h2 id="bringing-it-all-together">Bringing it all together</h2>
<p>Combined this results in the following script, that takes all required secrets as input parameters so it can easily be run on a CI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./migrate_to_mavencentral.sh <span class="nv">$BASE64_SIGNING_KEY</span> <span class="nv">$SONATYPE_USERNAME</span> <span class="nv">$SONATYPE_PASSWORD</span>
</code></pre></div></div>

<p>And the full script (including <code class="language-plaintext highlighter-rouge">TODOs</code>!) <a href="https://github.com/JeroenMols/MigrateArtifactsMavenCentral">can be found on Github</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail

<span class="c"># TODO: add versions e.g. (1.0.0 1.0.1 1.0.2)</span>
<span class="nv">VERSIONS</span><span class="o">=()</span>
<span class="c"># TODO : add artifact Id</span>
<span class="nv">ARTIFACT_ID</span><span class="o">=</span><span class="s2">""</span>
<span class="c"># TODO: https://dl.bintray.com/&lt;bintray-org&gt;/&lt;bintray-repo&gt;/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;</span>
<span class="nv">BINTRAYURL</span><span class="o">=</span><span class="s2">""</span>

<span class="c"># TODO: define placeholder and provide additional pom information (starting with placeholder!)</span>
<span class="nv">ARTIFACT_EXTENSTION</span><span class="o">=</span><span class="s2">"aar"</span>
<span class="nv">POM_PLACEHOLDER</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;.*&gt;"</span>
<span class="nv">POM_REPLACEMENT</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;aar&lt;/packaging&gt;

  &lt;name&gt;name here&lt;/name&gt;
  &lt;description&gt;description here&lt;/description&gt;
  &lt;url&gt;url here&lt;/url&gt;


  &lt;licenses&gt;
    &lt;license&gt;
      &lt;name&gt;license here&lt;/name&gt;
      &lt;url&gt;url to license&lt;/url&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;

  &lt;organization&gt;
    &lt;name&gt;name here&lt;/name&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/organization&gt;

   &lt;developers&gt;
    &lt;developer&gt;
      &lt;organization&gt;name here&lt;/organization&gt;
      &lt;organizationUrl&gt;url here&lt;/organizationUrl&gt;
    &lt;/developer&gt;
  &lt;/developers&gt;

  &lt;scm&gt;
    &lt;connection&gt;url here&lt;/connection&gt;
    &lt;developerConnection&gt;url here&lt;/developerConnection&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/scm&gt;
  "</span>

<span class="c"># Constants</span>
<span class="nv">MAVEN_CENTRAL_STAGINGURL</span><span class="o">=</span><span class="s2">"https://oss.sonatype.org/service/local/staging/deploy/maven2"</span>
<span class="nv">MAVEN_CENTRAL_REPOID</span><span class="o">=</span><span class="s2">"ossrh"</span>
<span class="nv">OUTPUT_DIR</span><span class="o">=</span><span class="s2">"output"</span>

<span class="c"># Utilities</span>
<span class="k">function </span>escape_pom<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s1">'s#/#\\/#g'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">'@'</span>
<span class="o">}</span>

<span class="k">function </span>xml_encode<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="nv">$1</span> | <span class="nb">sed</span> <span class="s1">'s/&amp;/\&amp;amp;/g; s/&lt;/\&amp;lt;/g; s/&gt;/\&amp;gt;/g; s/"/\&amp;quot;/g; s/'</span><span class="s2">"'"</span><span class="s1">'/\&amp;#39;/g'</span>
<span class="o">}</span>



<span class="nb">echo</span> <span class="s2">"Loading script input"</span>
<span class="nv">BASE64_SIGNING_KEY</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">SONATYPE_USERNAME</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="nv">$2</span><span class="si">)</span>
<span class="nv">SONATYPE_PASSWORD</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="nv">$3</span><span class="si">)</span>
<span class="nb">echo</span> <span class="nv">$SONATYPE_PASSWORD</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASE64_SIGNING_KEY</span><span class="k">}</span><span class="s2">"</span>  <span class="nt">-o</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SONATYPE_USERNAME</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-o</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SONATYPE_PASSWORD</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"USAGE: migrate BASE64_SIGNING_KEY SONATYPE_USERNAME SONATYPE_PASSWORD"</span>
  <span class="nb">exit </span>1
<span class="k">fi



</span><span class="nb">echo</span> <span class="s2">"Setup signing key"</span>
<span class="nb">echo</span> <span class="nv">$BASE64_SIGNING_KEY</span> | <span class="nb">base64</span> <span class="nt">-d</span> | gpg <span class="nt">--import</span>



<span class="nb">echo</span> <span class="s2">"Setup Maven credentials"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/.m2
<span class="nb">echo</span> <span class="s2">"&lt;settings xmlns=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0</span><span class="se">\"</span><span class="s2"> xmlns:xsi=</span><span class="se">\"</span><span class="s2">http://www.w3.org/2001/XMLSchema-instance</span><span class="se">\"</span><span class="s2">
  xsi:schemaLocation=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd</span><span class="se">\"</span><span class="s2">&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;</span><span class="nv">$MAVEN_CENTRAL_REPOID</span><span class="s2">&lt;/id&gt;
      &lt;username&gt;</span><span class="nv">$SONATYPE_USERNAME</span><span class="s2">&lt;/username&gt;
      &lt;password&gt;</span><span class="nv">$SONATYPE_PASSWORD</span><span class="s2">&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;"</span> <span class="o">&gt;</span> ~/.m2/settings.xml



<span class="nb">echo</span> <span class="s2">"Migrate artifacts"</span>
<span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"Migrating version </span><span class="nv">$v</span><span class="s2">"</span>
  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.<span class="nv">$ARTIFACT_EXTENSTION</span> <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.<span class="nv">$ARTIFACT_EXTENSTION</span>
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom

  <span class="c"># Add required metadata to pom.xml</span>
  <span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/</span><span class="nv">$POM_PLACEHOLDER</span><span class="s2">/</span><span class="si">$(</span>escape_pom <span class="s2">"</span><span class="nv">$POM_REPLACEMENT</span><span class="s2">"</span><span class="si">)</span><span class="s2">/g"</span> <span class="se">\</span>
      <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom |<span class="se">\</span>
      <span class="nb">tr</span> <span class="s1">'@'</span> <span class="s1">'\n'</span> <span class="o">&gt;</span> temp.txt
  <span class="nb">mv </span>temp.txt <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom

  mvn gpg:sign-and-deploy-file <span class="se">\</span>
     <span class="nt">-Durl</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_STAGINGURL</span> <span class="se">\</span>
     <span class="nt">-DrepositoryId</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_REPOID</span> <span class="se">\</span>
     <span class="nt">-DpomFile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
     <span class="nt">-Dfile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.<span class="nv">$ARTIFACT_EXTENSTION</span>
<span class="k">done</span>
</code></pre></div></div>

<h2 id="wrap-up">Wrap-up</h2>
<p>Migrating existing artifacts to Maven Central involves quite a few steps. Fortunately, the <a href="https://github.com/JeroenMols/MigrateArtifactsMavenCentral">open source script</a> presented in this blogpost can help with downloading all artifacts, updating their <code class="language-plaintext highlighter-rouge">pom.xml</code>, signing them, and uploading them to Maven Central.</p>

<p>If you’ve made it this far you should probably follow me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a>. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="script" /><category term="migrate" /><category term="jcenter" /><category term="mavenCentral" /><category term="maven" /><summary type="html"><![CDATA[With JCenter shutting down, many are migrating to Maven Central. And while there are many posts on how to publish new artifacts, also all existing artifacts should be migrated away from JCenter.]]></summary></entry><entry><title type="html">Share code between Android and Jvm in Kotlin multiplatform</title><link href="https://jeroenmols.com/blog/2021/03/17/share-code-kotlin-multiplatform/" rel="alternate" type="text/html" title="Share code between Android and Jvm in Kotlin multiplatform" /><published>2021-03-17T00:00:00+01:00</published><updated>2021-03-17T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2021/03/17/share-code-kotlin-multiplatform</id><content type="html" xml:base="https://jeroenmols.com/blog/2021/03/17/share-code-kotlin-multiplatform/"><![CDATA[<p>While Android supports most Java language features, it doesn’t support every API that Java provides. On the other hand, Kotlin multiplatform only allows sharing code across all targets (commonMain), not a subset of targets (commonJvm).</p>

<p>Read on to learn how to share part of your code between Android and Java (Jvm), while still providing platform-specific implementations of some classes.</p>

<h2 id="problem-description">Problem description</h2>
<p>In a typical Kotlin multiplatform project, there is a <code class="language-plaintext highlighter-rouge">commonMain</code> <code class="language-plaintext highlighter-rouge">SourceSet</code> (blue) which defines both common code and <code class="language-plaintext highlighter-rouge">expected</code> code for specific <code class="language-plaintext highlighter-rouge">SourceSets</code> (orange):</p>

<p><a href="/img/blog/sharecodemultiplatform/multiplatform_project.png"><img src="/img/blog/sharecodemultiplatform/multiplatform_project.png" alt="Kotlin multiplatform project overview" class="align-center" /></a></p>

<p>Besides making use of the common code, the specific <code class="language-plaintext highlighter-rouge">SourceSets</code> also must provide <code class="language-plaintext highlighter-rouge">actual</code> implementations for the expected code.</p>

<p>While this mechanism works great, it doesn’t allow to share code between specific <code class="language-plaintext highlighter-rouge">SourceSets</code>. Take for instance <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code>, they have a lot of common API’s but some (e.g. <code class="language-plaintext highlighter-rouge">Base64</code>) are different.</p>

<p>As such <code class="language-plaintext highlighter-rouge">Android</code> has defined its own <code class="language-plaintext highlighter-rouge">android.util.Base64</code> class which is different from the <code class="language-plaintext highlighter-rouge">Jvm</code> <code class="language-plaintext highlighter-rouge">java.util.Base64</code> class. (Though API level 26 and higher also support <code class="language-plaintext highlighter-rouge">java.util.Base64</code>)</p>

<p>So the challenge at hand is to share most <code class="language-plaintext highlighter-rouge">actual</code> implementations across <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code>, but provide platform-specific implementations for some functions.</p>

<p>Visually speaking we would like to accomplish the following:</p>

<p><a href="/img/blog/sharecodemultiplatform/codeshare_androidjvm.png"><img src="/img/blog/sharecodemultiplatform/codeshare_androidjvm.png" alt="Desired code sharing between Android and Jvm" class="align-center" /></a></p>

<h2 id="approach-1-new-sourceset">Approach 1: New sourceset</h2>
<p>Inspired by <a href="https://github.com/h0tk3y/k-new-mpp-samples/blob/master/split-actuals/build.gradle">an example</a> from <a href="https://twitter.com/h07k3y?lang=en">Sergey Igushkin</a>, let’s add a new sourceSet <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> that will have the shared <code class="language-plaintext highlighter-rouge">actual</code> implementations across <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code>.</p>

<p>This requires the following:</p>

<ol>
  <li>create a new folder <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> under <code class="language-plaintext highlighter-rouge">src</code></li>
  <li>create a new <code class="language-plaintext highlighter-rouge">SourceSet</code> called <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code></li>
  <li>make <code class="language-plaintext highlighter-rouge">androidMain</code> and <code class="language-plaintext highlighter-rouge">jvmMain</code> depend on this new <code class="language-plaintext highlighter-rouge">SourceSet</code></li>
</ol>

<p>And the resulting <code class="language-plaintext highlighter-rouge">build.gradle.kts</code> file will be:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kotlin</span> <span class="p">{</span>
  <span class="o">..</span><span class="p">.</span>

  <span class="nf">sourceSets</span> <span class="p">{</span>
    <span class="o">..</span><span class="p">.</span>

    <span class="c1">// Must be defined before androidMain and jvmMain</span>
    <span class="kd">val</span> <span class="py">commonJvmAndroid</span> <span class="p">=</span> <span class="nf">create</span><span class="p">(</span><span class="s">"commonJvmAndroid"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">dependsOn</span><span class="p">(</span><span class="n">commonMain</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">androidMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
      <span class="nf">dependsOn</span><span class="p">(</span><span class="n">commonJvmAndroid</span><span class="p">)</span>
      <span class="nf">dependencies</span> <span class="p">{</span>
        <span class="o">..</span><span class="p">.</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">jvmMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
      <span class="nf">dependsOn</span><span class="p">(</span><span class="n">commonJvmAndroid</span><span class="p">)</span>
      <span class="nf">dependencies</span> <span class="p">{</span>
        <span class="o">..</span><span class="p">.</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>While this solution works great from the command line, Intellij autocomplete unfortunately doesn’t work and all <code class="language-plaintext highlighter-rouge">Java</code> imports show up red.</p>

<p>I suspect this is because Intellij doesn’t know what kind of <code class="language-plaintext highlighter-rouge">SourceSet</code> <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> is, whereas it can recognize the default multiplatform <code class="language-plaintext highlighter-rouge">SourceSets</code>.</p>

<h2 id="approach-2-new-srcdir">Approach 2: New srcDir</h2>
<p>To ensure Intellij autocomplete works, a <code class="language-plaintext highlighter-rouge">srcDir</code> can be added to the existing <code class="language-plaintext highlighter-rouge">SourceSets</code>.</p>

<ol>
  <li>create a new folder <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> under <code class="language-plaintext highlighter-rouge">src</code></li>
  <li>add this new sourceSet to <code class="language-plaintext highlighter-rouge">androidMain</code> and <code class="language-plaintext highlighter-rouge">jvmMain</code></li>
</ol>

<p>And the resulting <code class="language-plaintext highlighter-rouge">build.gradle.kts</code> file will be:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kotlin</span> <span class="p">{</span>
  <span class="o">..</span><span class="p">.</span>

  <span class="nf">sourceSets</span> <span class="p">{</span>
    <span class="o">..</span><span class="p">.</span>

    <span class="kd">val</span> <span class="py">androidMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
        <span class="n">kotlin</span><span class="p">.</span><span class="nf">srcDir</span><span class="p">(</span><span class="s">"src/commonJvmAndroid/kotlin"</span><span class="p">)</span>
        <span class="nf">dependencies</span> <span class="p">{</span>
            <span class="o">..</span><span class="p">.</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">jvmMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
        <span class="n">kotlin</span><span class="p">.</span><span class="nf">srcDir</span><span class="p">(</span><span class="s">"src/commonJvmAndroid/kotlin"</span><span class="p">)</span>
        <span class="nf">dependencies</span> <span class="p">{</span>
            <span class="o">..</span><span class="p">.</span>
        <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Because there is no new sourceSet, Intellij will implicitly use the <code class="language-plaintext highlighter-rouge">Android</code> or <code class="language-plaintext highlighter-rouge">Jvm</code> one while browsing code in <code class="language-plaintext highlighter-rouge">commonAndroidJvm</code>, and hence autocomplete will work!</p>

<h2 id="real-life-example">Real-life example</h2>
<p>Want a bigger example of this principle in action? Have a look at the awesome <a href="https://github.com/streem/pbandk">PbandK</a> project, that provides a Kotlin code generator and runtime for Protocol Buffers. It is built to work across multiple Kotlin platforms.</p>

<p>In the <a href="https://github.com/streem/pbandk/tree/master/runtime">runtime module</a>, the <a href="https://github.com/streem/pbandk/blob/master/runtime/build.gradle.kts">build.gradle.kts</a> adds the extra <code class="language-plaintext highlighter-rouge">srcDir</code> to <code class="language-plaintext highlighter-rouge">androidMain</code>/<code class="language-plaintext highlighter-rouge">jvmMain</code> and the <a href="https://github.com/streem/pbandk/tree/master/runtime/src">src directory</a> has the shared code in a <code class="language-plaintext highlighter-rouge">commonAndroidJvm</code> folder.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p>While <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code> projects share most APIs, not every <code class="language-plaintext highlighter-rouge">Java</code> API is available on Android. To share a subset of code across both platforms, it’s best to use a shared <code class="language-plaintext highlighter-rouge">srcDir</code> so Intellij autocomplete works as expected.</p>

<p>If you’ve made it this far you should probably follow me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a>. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="kotlin" /><category term="multiplatform" /><category term="code sharing" /><category term="gradle" /><summary type="html"><![CDATA[While Android supports most Java language features, it doesn’t support every API that Java provides. On the other hand, Kotlin multiplatform only allows sharing code across all targets (commonMain), not a subset of targets (commonJvm).]]></summary></entry></feed>