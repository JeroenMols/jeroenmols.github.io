<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="https://jeroenmols.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jeroenmols.com/" rel="alternate" type="text/html" /><updated>2018-12-06T11:24:45+01:00</updated><id>https://jeroenmols.com/</id><title type="html">Jeroen Mols</title><subtitle>Blog and portfolio of Jeroen Mols, the Android developer you should hire.</subtitle><author><name>Jeroen Mols</name></author><entry><title type="html">Can you fix the test?</title><link href="https://jeroenmols.com/blog/2018/12/06/fixthetest/" rel="alternate" type="text/html" title="Can you fix the test?" /><published>2018-12-06T00:00:00+01:00</published><updated>2018-12-06T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2018/12/06/fixthetest</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/12/06/fixthetest/">&lt;p&gt;Learning from analyzing code is one of the greatest ways to improve your skills. Can you spot the mistakes in the tests below?&lt;/p&gt;

&lt;p&gt;This post brings a fun little quiz for both testing gurus as novices, with a deep dive into the how and why of awesome tests.&lt;/p&gt;

&lt;h2 id=&quot;case-1-sugary&quot;&gt;Case 1: sugary&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Instrumented test, run on Android device.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidJUnit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculatorTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_sumShouldAddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take a good look at the test above and think what you would do differently.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Don’t worry, I’ll wait.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;p&gt;Well there are actually quite some things wrong with this test, but the main problem is the syntax:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorTest&lt;/code&gt; inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;TestCase&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_sumShouldAddNumbers()&lt;/code&gt; is prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is actually the old &lt;a href=&quot;http://junit.sourceforge.net/junit3.8.1/&quot;&gt;JUnit3&lt;/a&gt; syntax, whereas Android currently supports &lt;a href=&quot;https://junit.org/junit4/&quot;&gt;JUnit4&lt;/a&gt; (and even &lt;a href=&quot;https://junit.org/junit5/&quot;&gt;JUnit5&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In these newer frameworks, the inheritance and prefixing are not required. All you have to do is annotate each test method with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Test&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Instrumented test, run on Android device.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidJUnit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculatorTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumShouldAddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interestingly enough the JUnit4 conversion enables two additional optimizations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;since &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; prefix is not required for test methods, we can use the backtick notation in Kotlin to make more descriptive test names (e.g. `sum of 1 and 2 should equal 3`)&lt;/li&gt;
  &lt;li&gt;since we are only using JUnit4 now, there is no need to declare &lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith(AndroidJUnit4::class)&lt;/code&gt; as this is only required to run both JUnit3 and 4 tests in the same file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This dramatically clarifies our test:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CalculatorTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the test above also doesn’t need to be run on an Android device as it doesn’t use the Instrumentation framework.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith()&lt;/code&gt; annotation was only added to be able to explain what &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidJunit4&lt;/code&gt; does.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR All you need is @Test annotations on test methods&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;case-2-exceptional&quot;&gt;Case 2: exceptional&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No exception thrown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, now that you’re warmed up, have a good look at the next test.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Going for a quick coffee brb…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Trying to catch the exception yourself and making the test fail subsequently is quite verbose, no?&lt;/p&gt;

&lt;p&gt;There is actually a better way of doing this, by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;expected&lt;/code&gt; annotation.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This doesn’t just amount to less code to write (and maintain) but you’ll also get a proper error message out of the box.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.AssertionError: Expected exception: java.lang.RuntimeException
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR Use @Test (expected = …) for expected exceptions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;case-3-assertive&quot;&gt;Case 3: assertive&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An example with mocks this time! Can you spot the improvement?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;I’m not mocking you, I promise! ;)&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Imagine for a second that the test above fails… What could be the cause of that?&lt;/p&gt;

&lt;p&gt;There are actually a few different possibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;either &lt;code class=&quot;highlighter-rouge&quot;&gt;login()&lt;/code&gt; was not called&lt;/li&gt;
  &lt;li&gt;or &lt;code class=&quot;highlighter-rouge&quot;&gt;logout()&lt;/code&gt; was called&lt;/li&gt;
  &lt;li&gt;or both of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because the test can fail for multiple reasons, you can never conclude from the failure output what the problem is. Instead you have to dive deeper into each failing test, which can be quite time consuming and frustrating.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be nice if every tests would just fail for one single reason?&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldn&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If one of those fail, the test message will immediate tell you what’s going wrong!&lt;/p&gt;

&lt;p&gt;This actually isn’t the only reason why you should only use one single assert/verify per test:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JUnit4 stops test execution after the first failure: so if the first assert fails, the following ones aren’t executed! Consequently you don’t know how many problems there are on test failure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Too many assertions can make code nearly impossible to refactor: To fully test a login functionality, you probably need over 10 tests (username null, wrong password,…), right? Imagine that every single test also explicitly checks that logout isn’t called on login… What happens now if your requirement changes and you need to support immediate logout after login? (e.g. For Android Wear) Then you would have to refactor all those tests!!!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR Use only one assert/verify per test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;case-4-divided&quot;&gt;Case 4: divided&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculations&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;calculator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;division&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;division&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;You know the drill…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Let’s step through the test: first it calculates the sum of 1 and 2, followed by a division of the result by 3.&lt;/p&gt;

&lt;p&gt;Why are we testing that sequence? Mathematical operations (add/divide) aren’t supposed to have side effects (and influence each other), right?&lt;/p&gt;

&lt;p&gt;Even more, the interface of &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; makes that clear: both &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;divide()&lt;/code&gt; take all parameters they need as an input to produce an output.&lt;/p&gt;

&lt;p&gt;So if &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;divide()&lt;/code&gt; are already tested, there really isn’t an added benefit of testing the sequence, right?&lt;/p&gt;

&lt;p&gt;Instead, there are quite some disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the combined test is harder to understand (more steps)&lt;/li&gt;
  &lt;li&gt;the combined test can fail due to multiple reasons (causing more failure analysis effort).&lt;/li&gt;
  &lt;li&gt;it’s unclear what combinations of steps should be tested and which ones not (where do you stop?)&lt;/li&gt;
  &lt;li&gt;not really a unit test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence this test should be split it two:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;division&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1f&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;division&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;division&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR Only unit test one method per test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;case-5-readable&quot;&gt;Case 5: readable&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;webService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebServiceTestHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createWebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrong&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;checkLoginFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s make things slightly more interesting…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Any ideas?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;In order to understand what’s bad about this test, you need to imagine a lot more tests in the same file.&lt;/p&gt;

&lt;p&gt;If you where to encounter the test above somewhere in a file with a lot more tests, it would take you quite some time to figure out what’s going on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Need to look at &lt;code class=&quot;highlighter-rouge&quot;&gt;setUp()&lt;/code&gt; method to understand where the WebService under test is coming from&lt;/li&gt;
  &lt;li&gt;Need to open &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceTestHelper&lt;/code&gt;to understand the WebService initialization&lt;/li&gt;
  &lt;li&gt;Need to open &lt;code class=&quot;highlighter-rouge&quot;&gt;checkLoginFailed()&lt;/code&gt; method to see how a failed login is identified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s a lot of work!&lt;/p&gt;

&lt;p&gt;The problem here is that the reader constantly has to exit the test method to figure out what’s going on.&lt;/p&gt;

&lt;p&gt;Removing the &lt;code class=&quot;highlighter-rouge&quot;&gt;setUp&lt;/code&gt; method, inlining the &lt;code class=&quot;highlighter-rouge&quot;&gt;WebServiceTestHelper&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;checkLoginFailed()&lt;/code&gt; method yields the following.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebServiceTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;`loginHasFailed`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;webService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setUserCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email@google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrong_pwd&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFalse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how easy it has now become to understand what’s going on in the test!&lt;/p&gt;

&lt;p&gt;But wouldn’t that lead to quite some code duplication you say? Well, I’m glad you ask. YES! But even though testing code is also production code, the &lt;a href=&quot;https://mtlynch.io/good-developers-bad-tests/&quot;&gt;same rules don’t&lt;/a&gt; completely apply.&lt;/p&gt;

&lt;p&gt;It is fine for test code to have duplication, magic numbers/strings, long method names,…  Readability and ease of fixing failures are what matter most.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR Always keep the reader within the test function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;case-6-trustworthy&quot;&gt;Case 6: trustworthy&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expectedTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;formattedTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentFormattedTime&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formattedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;FORMAT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HH:mm:ss:SSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the final contender of the day is…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Any ideas?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Simply put, this test is flaky. It will only fail very rarely, but still it will.&lt;/p&gt;

&lt;p&gt;Reason for this is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectedTime&lt;/code&gt; isn’t the time used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeFormatter&lt;/code&gt; and hence there will be a slight difference (~ ns) between both. When rounding works against us, this could actually end up in a real formatted ms difference.&lt;/p&gt;

&lt;p&gt;And flakiness in tests, well… no matter how infrequent, we should have a &lt;a href=&quot;/blog/2017/02/16/unittests/&quot;&gt;zero tolerance policy&lt;/a&gt; towards them. This is because flakiness can completely destroy the confidence of the team in the test suite.&lt;/p&gt;

&lt;p&gt;Fortunately this can easily be fixed by passing the current time into the &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeFormatter&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expectedTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;formattedTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentFormattedTime&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formattedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;FORMAT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HH:mm:ss:SSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;TL;DR Tests should never randomly fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Putting it all together, great tests follow the following principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All you need is @Test annotations on test methods&lt;/li&gt;
  &lt;li&gt;Use @Test (expected = …) for expected exceptions&lt;/li&gt;
  &lt;li&gt;Only one assert/verify per test&lt;/li&gt;
  &lt;li&gt;Only unit test one method per test&lt;/li&gt;
  &lt;li&gt;Always keep the reader within the test function&lt;/li&gt;
  &lt;li&gt;Tests should never randomly fail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out my slides/video to learn more about &lt;a href=&quot;https://speakerdeck.com/jeroenmols/write-awesome-unit-tests&quot;&gt;awesome unit tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=canyoufixthetest?2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="testing" /><category term="kotlin" /><category term="cleancode" /><summary type="html">Learning from analyzing code is one of the greatest ways to improve your skills. Can you spot the mistakes in the tests below?</summary></entry><entry><title type="html">Kotlin Stackoverflow error</title><link href="https://jeroenmols.com/blog/2018/11/01/kotlinstackoverflow/" rel="alternate" type="text/html" title="Kotlin Stackoverflow error" /><published>2018-11-01T00:00:00+01:00</published><updated>2018-11-01T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2018/11/01/kotlinstackoverflow</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/11/01/kotlinstackoverflow/">&lt;p&gt;Java interop is one of the best features of the Kotlin language, yet sometimes this also can cause unforeseen issues…&lt;/p&gt;

&lt;h2 id=&quot;puzzle&quot;&gt;Puzzle&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Disclaimer, the example below is a consequence of legacy code and only serves to demonstrate a Kotlin puzzler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have a look at the simple test class below. It subclasses the subject under test (&lt;code class=&quot;highlighter-rouge&quot;&gt;BaseFragment&lt;/code&gt;) to inject a mocked &lt;code class=&quot;highlighter-rouge&quot;&gt;Repository&lt;/code&gt; that is used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;getDataOperation()&lt;/code&gt; method in the test.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseFragmentTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rule&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mockitoRule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockitoJUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDataOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do you think will happen we run the test?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Well…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.StackOverflowError
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
    at com.jeroenmols.BaseFragmentTest$TestFragment.getRepository(BaseFragmentTest.kt:26)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait, what???&lt;/p&gt;

&lt;p&gt;This trace indicates that the line &lt;code class=&quot;highlighter-rouge&quot;&gt;return repository&lt;/code&gt; (line 26) is called recursively… How is that even possible? That line just return a value, right?&lt;/p&gt;

&lt;p&gt;Well…&lt;/p&gt;

&lt;h1 id=&quot;explanation&quot;&gt;Explanation&lt;/h1&gt;
&lt;p&gt;This is actually a very interesting case of Java/Kotlin interop. Because a Kotlin property is compiled down to the following Java elements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a getter method with &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; prefix&lt;/li&gt;
  &lt;li&gt;a setter method with &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; prefix&lt;/li&gt;
  &lt;li&gt;a private field backing the property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;return repository&lt;/code&gt; statement actually ends up executing &lt;code class=&quot;highlighter-rouge&quot;&gt;return getRepository()&lt;/code&gt; and hence recursively calling itself!&lt;/p&gt;

&lt;p&gt;Now the really interesting detail here is that this only happens when &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseFragment&lt;/code&gt; is a Java class! When converting the class to Kotlin this doesn’t happen.&lt;/p&gt;

&lt;p&gt;So let’s have a look at the decompiled bytecode:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Decompiled when BaseFragment in Java&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestFragment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;@NotNull&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Decompiled when BaseFragment in Kotlin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestFragment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;@NotNull&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseFragmentTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sure enough, the decompiled Java code recursively links to the &lt;code class=&quot;highlighter-rouge&quot;&gt;TestFragment&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseFragment&lt;/code&gt; is in java and properly links to the right method when &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseFragment&lt;/code&gt; is in Kotlin.&lt;/p&gt;

&lt;p&gt;A simple way to fix this is to strongly refer the overridden method to point at the &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseFragmentTest&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@BaseFragmentTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately Android Studio also warns you about recursion with an indicator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/kotlinstackoverflow/androidstudio_warning.png&quot; alt=&quot;Android Studio recursive function indicator&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;This post indicates an interesting case where methods/properties get linked incorrectly when inheriting from a Java class in Kotlin. Fortunately, Android Studio and the decompiled bytecode clearly indicate what is going wrong.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=kotlinstackoverflowerror2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="kotlin" /><category term="stackoverflow" /><category term="puzzle" /><summary type="html">Java interop is one of the best features of the Kotlin language, yet sometimes this also can cause unforeseen issues…</summary></entry><entry><title type="html">Kotlinconf 2018 slides</title><link href="https://jeroenmols.com/blog/2018/10/05/kotlinconf18/" rel="alternate" type="text/html" title="Kotlinconf 2018 slides" /><published>2018-10-05T00:00:00+02:00</published><updated>2018-10-05T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/10/05/kotlinconf18</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/10/05/kotlinconf18/">&lt;p&gt;Was really great visiting Kotlinconf this year and I wanted to do a quick post to link to all of it’s wonderful content.&lt;/p&gt;

&lt;h2 id=&quot;conference-slides&quot;&gt;Conference slides&lt;/h2&gt;
&lt;p&gt;While you will be able to find all recordings &lt;a href=&quot;https://www.youtube.com/playlist?list=PLQ176FUIyIUbVvFMqDc2jhxS-t562uytr&quot;&gt;here&lt;/a&gt;, I often find it useful to be able to quickly scan through the slides. Hence I bundled everything I could already find from socials.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chris.banes.me/talks/2018/android-suspenders/&quot;&gt;Android suspenders&lt;/a&gt; by Chris Banes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://adavis.info/2018/06/talk-getting-a-grip-on-graphql.html&quot;&gt;GraphQL powered by Kotlin&lt;/a&gt; by Annyce Davis&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/eskat0s/status/1047871129916985344&quot;&gt;Type safe build logic with the Gradle Kotlin DSL&lt;/a&gt; by Hans Dockter &amp;amp; Paul Merlin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/hzsweers/annotation-processing-in-a-kotlin-world&quot;&gt;Annotation processing in a Kotlin world&lt;/a&gt; by Zac Sweers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/dwursteisen/beat-the-high-score-build-a-game-using-libgdx-and-kotlin&quot;&gt;Beat the high-score: build a game using libGDX and Kotlin&lt;/a&gt; by David Wursteisen&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/npryce/the-kotlin-type-hierarchy-from-top-to-bottom&quot;&gt;The Kotlin Type Hierarchy From Top to Bottom&lt;/a&gt; by Nat Pryce&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rakhman.info/slides/Writing_Browser_Extensions_in_Kotlin.pdf&quot;&gt;Writing Browser Extensions in Kotlin&lt;/a&gt; by Kirill Rakhman&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/nfrankel/kotlinconf-kotlin-and-spring-boot-a-match-made-in-heaven&quot;&gt;Kotlin and Spring Boot, a match made in heaven&lt;/a&gt; by Nicolas Frankel&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.icloud.com/keynote/0tDiYquR2JrHV_85mDgZtJv6g#Presentation_KotlinConf_-_wide&quot;&gt;Effective multiplatform Kotlin development&lt;/a&gt; by Marcin Moskala&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thomasnield/kotlinconf-2018-mathematical-modeling/blob/master/kotlinconf_slides_2018.pdf&quot;&gt;Mathematical Modeling with Kotlin&lt;/a&gt; by Thomas Nield&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dkandalov/kotlin-native-snake&quot;&gt;Live Coding Kotlin/Native Snake&lt;/a&gt; by Dmitry Kandalov&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jakewharton/a-multiplatform-delight-kotlinconf-2018&quot;&gt;A Multiplatform Delight&lt;/a&gt; by Jake Wharton and Alec Strong&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/romainguy/graphics-programming-with-kotlin&quot;&gt;Graphics Programming with Kotlin&lt;/a&gt; by Romain Guy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://agiledeveloper.com/presentations/creating_internal_dsls_in_kotlin.zip&quot;&gt;Creating Internal DSLs in Kotlin&lt;/a&gt; by Venkat Subramaniam&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://agiledeveloper.com/presentations/exploring_coroutines_in_kotlin.zip&quot;&gt;Exploring Coroutines in Kotlin&lt;/a&gt; by Venkat Subramaniam&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/angryziber/kotlin-puzzlers/tree/master/kotlinconf2018&quot;&gt;Kotlin puzzlers&lt;/a&gt; by Anton Keks&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/dankim/android-ktx-a-dash-of-kotlin-makes-all-the-difference-kotlinconf-2018&quot;&gt;Android KTX: A dash of Kotlin makes all the difference!&lt;/a&gt; by Dan Kim&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/k4kya/kotlinconf-18-learn-together-not-the-same&quot;&gt;Learn together. Not the same.&lt;/a&gt; by Amal Kakaiya and Maria Neumayer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mutexkid/native&quot;&gt;Speaker Deck Making Noise With Kotlin/Native&lt;/a&gt; by Josh Skeen&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/rharter/servers-kotlin&quot;&gt;Servers ❤️ Kotlin&lt;/a&gt; by Ryan Harter&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/s4nchez/server-as-a-function-in-kotlin-kotlinconf-2018&quot;&gt;Server as a Function in Kotlin&lt;/a&gt; by Ivan Sanchez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://holgerbrandl.github.io/data_science_with_kotlin/data_science_with_kotlin.html&quot;&gt;Building Data Science Workflows with Kotlin&lt;/a&gt; by Holger Brandl&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/queencodemonkey/dissecting-the-stdlib&quot;&gt;Dissecting the stdlib&lt;/a&gt; by Huyen Tue Dao&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gateway.ipfs.io/ipfs/QmRsk7YWYB9YkQwDcFFaZmhWHPgBXnAMHc1maZchwp6oBP&quot;&gt;Kotlin - a great fit for the Ethereum ecosystem&lt;/a&gt; by Marcus Ligi&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1-a5v5PbnsCcVHqlA7kvzffYhOttuJ51bkHk4_6-aPj0&quot;&gt;Painless Microservices in Kotlin&lt;/a&gt; by Fedor Korotkov&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/nightlynexus/performant-multiplatform-kotlin-serialization/&quot;&gt;Performant Multiplatform Kotlin Serialization&lt;/a&gt; by Eric Cochran&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/kpgalligan/ios-architecture-with-multiplatform&quot;&gt;iOS Architecture with Multiplatform&lt;/a&gt; by Kevin Galligan&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/xenji/stream-processors-in-kotlin-kotlinconf-2018-edition&quot;&gt;Writing Stream Processors in Kotlin&lt;/a&gt; by Mario Mueller&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/alecstrong/whats-the-big-idea-writing-intellij-plugins-for-kotlin&quot;&gt;What’s the big IDEA? Writing IntelliJ plugins for Kotlin&lt;/a&gt; by Alec Strong and Egor Andreevici&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/asarazan/next-level-dsls&quot;&gt;Next Level DSLs&lt;/a&gt; by Aaron Sarazan&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/kevinmost/writing-your-first-kotlin-compiler-plugin&quot;&gt;Writing Your First Kotlin Compiler Plugin&lt;/a&gt; by Kevin Most&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/alostpacket/sealed-classes-opened-my-mind&quot;&gt;Sealed classes opened my mind&lt;/a&gt; by Patrick Cousins&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amanda_hinchman/kotlin-the-next-frontier-for-modern-meta-programming&quot;&gt;Kotlin: The Next Frontier for Modern (Meta)Programming&lt;/a&gt; by Amanda Hinchman-Dominguez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/raulraja/architecting-typed-fp-applications-and-libraries-in-kotlin-with-lrrow&quot;&gt;Functional Programming in Kotlin with Λrrow&lt;/a&gt; by Raúl Raja Martínez&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Many thanks to the JetBrains team for organizing such a delightful conference! To all sponsors for making this event possible. And to the entire Android community for being so awesome!&lt;/p&gt;

&lt;p&gt;Hope to see you all next year!&lt;/p&gt;

&lt;p&gt;Helpful? Got extra slides? Hit me up on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=kotlinconf2018slides2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="conference" /><category term="kotlinconf" /><summary type="html">Was really great visiting Kotlinconf this year and I wanted to do a quick post to link to all of it’s wonderful content.</summary></entry><entry><title type="html">A little Kotlin puzzler</title><link href="https://jeroenmols.com/blog/2018/09/25/kotlinpuzzler/" rel="alternate" type="text/html" title="A little Kotlin puzzler" /><published>2018-09-25T00:00:00+02:00</published><updated>2018-09-25T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/09/25/kotlinpuzzler</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/09/25/kotlinpuzzler/">&lt;p&gt;Kotlin is an incredibly enjoyable, concise and powerful programming language. Yet sometimes also a bit confusing…&lt;/p&gt;

&lt;h2 id=&quot;puzzle&quot;&gt;Puzzle&lt;/h2&gt;
&lt;p&gt;Have a look at the simple class below. It simulates an ongoing operation by smoothly moving a progress bar from 0 to 100 over the course of 30 seconds:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProgressbarAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;progressBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProgressBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnimatorUpdateListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueAnimator&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;configureAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configureAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;endValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FPS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DURATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;progressBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endValue&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DURATION&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interpolator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearInterpolator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAnimationUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;progressBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animatedValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;FPS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.06&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;DURATION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000L&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do you think will happen if we instantiate one of these with a given progress bar?&lt;/p&gt;

&lt;p&gt;Well… nothing! The progress bar doesn’t move at all.&lt;/p&gt;

&lt;p&gt;Can you spot what’s wrong? The error is in the following lines:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configureAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Any luck?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Well this is the actual culprit:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is syntactically a very subtle, yet incredibly important difference between that line and this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we change our init to the latter, then the progress bar works as expected!&lt;/p&gt;

&lt;h1 id=&quot;explanation&quot;&gt;Explanation&lt;/h1&gt;
&lt;p&gt;One of the Kotlin features is that if the last argument of a method call is a lambda, you can move the lambda outside of the method invocation. (which is great for building &lt;a href=&quot;https://proandroiddev.com/writing-dsls-in-kotlin-part-1-7f5d2193f277&quot;&gt;DSLs&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Consequently,&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is equivalent to&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and even&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and by expanding the lambda, this&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUpdateListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the reason why the progress bar wasn’t working is simple. Instead of registering itself as an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationUpdateListener&lt;/code&gt;, it actually registered a lambda, a new function to handle the animation updates.&lt;/p&gt;

&lt;p&gt;So every animation update the lambda &lt;code class=&quot;highlighter-rouge&quot;&gt;{ _ -&amp;gt; this }&lt;/code&gt; was invoked instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;onAnimationUpdate&lt;/code&gt; method. Thereby not doing anything, it just has the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; object without any invocation on it.&lt;/p&gt;

&lt;p&gt;Equivalent to writing the following function:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perfectly valid syntax, but otherwise completely useless.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;A very subtle difference in syntax (&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;) can make a huge difference in what the code actually does. Kotlin is a very powerful programming language, but with great power comes great…&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=alittlekotlinpuzzler2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="kotlin" /><category term="lambda" /><category term="puzzle" /><summary type="html">Kotlin is an incredibly enjoyable, concise and powerful programming language. Yet sometimes also a bit confusing…</summary></entry><entry><title type="html">How dangerous permissions sneak into apps</title><link href="https://jeroenmols.com/blog/2018/08/02/phonestatepermission/" rel="alternate" type="text/html" title="How dangerous permissions sneak into apps" /><published>2018-08-02T00:00:00+02:00</published><updated>2018-08-02T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/08/02/phonestatepermission</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/08/02/phonestatepermission/">&lt;p&gt;This is a post-mortem where the very dangerous permission, &lt;code class=&quot;highlighter-rouge&quot;&gt;READ_PHONE_STATE&lt;/code&gt;, unintentionally sneaked into our app. Here’s how this could happen, how we debugged and finally how we solved it.&lt;/p&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;
&lt;p&gt;Sprint comes to an end and we’re happy to deliver a new release of our app. After rolling it out to our beta community without issues, we move ahead to production.&lt;/p&gt;

&lt;p&gt;While everything looks fine at first, after a while we see users complaining:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/phonestatepermission/userreview.png&quot; alt=&quot;Users complaining: Why does this app want to know if I'm in a phone call and who I'm calling?&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Honestly we were completely taken aback by this… But sure enough looking at the play store:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/phonestatepermission/permissionsoverview.png&quot; alt=&quot;Google play store permissions&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;root-cause&quot;&gt;Root cause&lt;/h2&gt;
&lt;p&gt;If you ever run into a similar issue, the Android Studio merged manifest view is the way to go. Just open your manifest and click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Merged manifest&lt;/code&gt; tab at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/phonestatepermission/mergedmanifest.png&quot; alt=&quot;Google play store permissions&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, the &lt;code class=&quot;highlighter-rouge&quot;&gt;READ_PHONE_STATE&lt;/code&gt; permission is there.&lt;/p&gt;

&lt;p&gt;Unfortunately, this view couldn’t help us find where the permission was merged from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double-clicking the permission led us back to normal manifest view&lt;/li&gt;
  &lt;li&gt;Color coding palette is so subtle that we couldn’t see what color the permission was highlighted in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;&lt;img style=&quot;width: 85%&quot; src=&quot;https://jeroenmols.com/img/blog/phonestatepermission/mergedmanifestcolors.png&quot; alt=&quot;Color highlighting of manifest merger needs an extremely trained eye to map it on the legend&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, the manifest merger also prints a log file to &lt;code class=&quot;highlighter-rouge&quot;&gt;build/outputs/logs&lt;/code&gt; that describes where everything is merged from.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img style=&quot;width: 85%&quot; src=&quot;https://jeroenmols.com/img/blog/phonestatepermission/manifestmerger.png&quot; alt=&quot;Output logs of the manifest merger are located at build/outputs/logs&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This file gave a clear answer:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uses-permission#android.permission.READ_PHONE_STATE
IMPLIED from /app/src/debug/AndroidManifest.xml:8:1-15:12
reason: hue.libraries.translations has a targetSdkVersion &amp;lt; 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow… That’s nasty!&lt;/p&gt;

&lt;p&gt;A while ago we decided to move all our translations to a new module, with an empty manifest and a bare-bones &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.library'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileSdk&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And because we didn’t explicitly set the targetSdk, a targetSdk of 1 is assumed and hence we end up with a &lt;a href=&quot;https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE&quot;&gt;dangerous permission&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To be fair, the documentation does warn you about this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/phonestatepermission/permissiondisclaimer.png&quot; alt=&quot;Google play store permissions&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But still… wow!&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;While a solution could be to simply set the targetSdk in our translations module. This wouldn’t prevent something similar from happening in the future.&lt;/p&gt;

&lt;p&gt;Therefore we decided to set the targetSdk (and others) for all our modules in the top level &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file. This also keeps submodule &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; files lean.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;subprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;afterEvaluate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'android'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'android-library'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildTools&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileSdk&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minSdk&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileSdk&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;javaVersion&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;targetCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;javaVersion&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, we also wanted to protect ourselves against 3rd party library developers that could make this mistake. To do so, you can inform the manifest merger to remove the permission while merging by adding the following to your manifest:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.READ_PHONE_STATE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tools:node=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is overkill you say?&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;https://github.com/firebase/quickstart-unity/issues/68&quot;&gt;Firebase&lt;/a&gt; AND &lt;a href=&quot;https://developers.google.com/android/guides/releases#november_2016_version_100&quot;&gt;Google play services&lt;/a&gt; already made this booboo in the past.&lt;/p&gt;

&lt;p&gt;… wow!&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Not explicitly setting your target SDK version will cause a dangerous permission to sneak into your app. Make sure you set the target SDK in every module and protect yourself from 3rd party libraries.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=howdangerouspermissionssneakintoapps2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="permissions" /><category term="modules" /><category term="manifest" /><category term="post-mortem" /><summary type="html">This is a post-mortem where the very dangerous permission, READ_PHONE_STATE, unintentionally sneaked into our app. Here’s how this could happen, how we debugged and finally how we solved it.</summary></entry><entry><title type="html">Pro Android Studio - Taming the interface</title><link href="https://jeroenmols.com/blog/2018/07/16/androidstudioshortcuts3/" rel="alternate" type="text/html" title="Pro Android Studio - Taming the interface" /><published>2018-07-16T00:00:00+02:00</published><updated>2018-07-16T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/07/16/androidstudioshortcuts3</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/07/16/androidstudioshortcuts3/">&lt;p&gt;Not only can anything in Android Studio be controlled with a keyboard shortcut, it offers many more simple tricks to make you more productive.&lt;/p&gt;

&lt;p&gt;To conclude this series, we will look at how you can control the interface, invoke every (!) action and point you to even more advanced features.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;This post is part of a series with practical examples on how you to get the most out of Android Studio:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/02/22/androidstudioshortcuts/&quot;&gt;Part 1: Code navigation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;Part 2: Refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/07/16/androidstudioshortcuts3/&quot;&gt;Part 3: Taming the interface&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I strongly suggest you look at the examples below, but a quick reference is always useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + number&lt;/code&gt;: open/close views&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt;: enlarge view&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt;: shrink view&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + →&lt;/code&gt;: enlarge side view&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ←&lt;/code&gt;: shrink side view&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + F12&lt;/code&gt;: close all views&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ]&lt;/code&gt;: next tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + [&lt;/code&gt;: previous tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + →&lt;/code&gt;: text view (xml layout editing)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + ←&lt;/code&gt;: design view (visual layout editing)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + letter&lt;/code&gt;: invoke button&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + A&lt;/code&gt;: action lookup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;taming-the-interface&quot;&gt;Taming the interface&lt;/h2&gt;
&lt;p&gt;Using your keyboard is always more efficient than using a mouse. This is because you can make use of all your fingers at the same time + you don’t have to switch between mouse and keyboard.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be cool if we never have to use our mouse again?&lt;/p&gt;

&lt;p&gt;First of all you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + number&lt;/code&gt; to open/close different Android Studio views (e.g. Logcat, Project view,…)&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/openviews.gif&quot; alt=&quot;Use `⌥ + number` to open/close different Android Studio views&quot; /&gt;
  &lt;figcaption&gt;Use `⌥ + number` to open/close different Android Studio views&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can shrink/enlarge the views above using &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt; respectively,&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/expandshrinkviews.gif&quot; alt=&quot;Use `⇧ + ⌘ + ↑` and `⇧ + ⌘ + ↓` to shrink or enlarge views&quot; /&gt;
  &lt;figcaption&gt;Use `⇧ + ⌘ + ↑` and `⇧ + ⌘ + ↓` to shrink or enlarge views&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that this will also work with &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + →&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ←&lt;/code&gt; for side views.&lt;/p&gt;

&lt;p&gt;Or close all views with &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + F12&lt;/code&gt; to have a clutter free interface,&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/closeallviews.gif&quot; alt=&quot;Use `⇧ + ⌘ + F12` to close all views&quot; /&gt;
  &lt;figcaption&gt;Use `⇧ + ⌘ + F12` to close all views&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When you have multiple tabs open, &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + [&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ]&lt;/code&gt; come in handy to cycle between tabs.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/changetabs.gif&quot; alt=&quot;Use `⇧ + ⌘ + [` and `⇧ + ⌘ + ]` to cycle between tabs&quot; /&gt;
  &lt;figcaption&gt;Use `⇧ + ⌘ + [` and `⇧ + ⌘ + ]` to cycle between tabs&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you’re designing layouts, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + →&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + ←&lt;/code&gt; to switch between design and text view.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/switchdesignxml.gif&quot; alt=&quot;Use `^ + ⇧ + →` and `^ + ⇧ + ←` to switch between design and text view&quot; /&gt;
  &lt;figcaption&gt;Use `^ + ⇧ + →` and `^ + ⇧ + ←` to switch between design and text view&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And whenever you have a dialog open you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥&lt;/code&gt; to highlight what letters you can press to invoke the respective buttons. E.g. in the example below &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + R&lt;/code&gt; is used to press the replace button.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/controlinterface.gif&quot; alt=&quot;Use `⌥` to highlight what letters you can press to invoke the respective buttons&quot; /&gt;
  &lt;figcaption&gt;Use `⌥` to highlight what letters you can press to invoke the respective buttons&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥&lt;/code&gt; helps in a lot more situations such as in the find and replace window. (notice the subtle underline)&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/althighlighting.gif&quot; alt=&quot;Pressing `⌥` reveals you can use `⌥ + p` to replace the next occurrence&quot; /&gt;
  &lt;figcaption&gt;Pressing `⌥` reveals you can use `⌥ + p` to replace the next occurrence&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;shortcut-lookup&quot;&gt;Shortcut lookup&lt;/h2&gt;
&lt;p&gt;If there is one shortcut you should really remember, then that is &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + A&lt;/code&gt;. That one allows you to invoke any Android Studio action using your keyboard.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/searchactions.gif&quot; alt=&quot;Use `⌘ + ⇧ + A` to search for any action.&quot; /&gt;
  &lt;figcaption&gt;Use `⌘ + ⇧ + A` to search for any action.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that this also serves as a useful shortcut lookup tool. Next to every action the corresponding shortcut will be displayed (if there is one).&lt;/p&gt;

&lt;h2 id=&quot;additional-reads&quot;&gt;Additional reads&lt;/h2&gt;
&lt;p&gt;Android Studio is incredibly powerful and hence this blog post series couldn’t cover everything. However, if I piqued your interest, have a look at these references:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kevinpelgrims.com/blog/2017/12/29/using-multicursor-in-android-studio/&quot;&gt;Using multicursor in Android studio&lt;/a&gt; by Kevin Pelgrims&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@geapi/permanent-function-keys-intellij-macbook-pro-w-touchbar-d6fc78781b90&quot;&gt;Permantent function keys in Android Studio with Macbook pro Touchbar&lt;/a&gt; By Georg Apitz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://afterecho.uk/blog/structural-search-and-replace-in-android-studio.html&quot;&gt;Structural search and replace&lt;/a&gt; by Darren&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/writing-more-code-by-writing-less-code-with-android-studio-live-templates-244f648d17c7&quot;&gt;Android studio live templates&lt;/a&gt; by Retro Meier&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vojtechruzicka.com/intellij-idea-tips-tricks-postfix-code-completion/&quot;&gt;Postfix code completion&lt;/a&gt; by Vojtech Ruzicka’s&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Investing time to really learn Android Studio can mean a big productivity boost. Start with &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + A&lt;/code&gt;, learn the corresponding shortcuts and challenge yourself to use your mouse less.&lt;/p&gt;

&lt;p&gt;This was the last part in my series to get the most out of Android Studio.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-tamingtheinterface2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="androidstudio" /><category term="tools" /><category term="shortcuts" /><category term="navigation" /><summary type="html">Not only can anything in Android Studio be controlled with a keyboard shortcut, it offers many more simple tricks to make you more productive.</summary></entry><entry><title type="html">Pro Android Studio - Refactoring</title><link href="https://jeroenmols.com/blog/2018/04/26/androidstudioshortcuts2/" rel="alternate" type="text/html" title="Pro Android Studio - Refactoring" /><published>2018-04-26T00:00:00+02:00</published><updated>2018-04-26T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/04/26/androidstudioshortcuts2</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/04/26/androidstudioshortcuts2/">&lt;p&gt;Refactoring can be tedious and easily introduce bugs. The main reason for this is the number of manual steps involved: rename, move, copy-paste,… So wouldn’t it make sense to automate this and have Android Studio do all the work for you?&lt;/p&gt;

&lt;p&gt;This post will zoom in on the most useful refactoring options of Android Studio. Enabling you to refactor more confidently, introduce fewer bugs and increase overall quality as also variables, documentation, etc. will be updated.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;This post is part of a series with practical examples on how you to get the most out of Android Studio:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/02/22/androidstudioshortcuts/&quot;&gt;Part 1: Code navigation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;Part 2: Refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/07/16/androidstudioshortcuts3/&quot;&gt;Part 3: Taming the interface&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I strongly suggest you look at the examples below, but a quick reference is always useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + D&lt;/code&gt;: duplicate line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + backspace&lt;/code&gt;: delete line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↑&lt;/code&gt;: move line up&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↓&lt;/code&gt;: move line down&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt;: move method up&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt;: move method down&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F6&lt;/code&gt;: rename&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F6&lt;/code&gt;: change method signature&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F6&lt;/code&gt;: move&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + V&lt;/code&gt;: extract variable&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + M&lt;/code&gt;: extract method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + P&lt;/code&gt;: extract method parameter&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + F&lt;/code&gt;: extract property (or field)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + C&lt;/code&gt;: extract constant (java only)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + N&lt;/code&gt;: inline&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + T&lt;/code&gt;: open refactoring menu&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + enter&lt;/code&gt;: quick fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows equivalents can be found &lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;code-manipulation&quot;&gt;Code manipulation&lt;/h2&gt;
&lt;p&gt;In order to speed up development, you want to reduce the amount of typing to a minimum. While autocomplete definitely helps, sometimes it’s faster to directly manipulate lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + D&lt;/code&gt;: duplicate line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + backspace&lt;/code&gt;: delete line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These shortcuts will work regardless of the cursor position in the line.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/duplicatedelete.gif&quot; alt=&quot;Duplicate and delete lines&quot; /&gt;
  &lt;figcaption&gt;Duplicate and delete lines&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After duplicating you can simply move code up/down by using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↓&lt;/code&gt; for lines, or &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt; for methods.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/movelineblock.gif&quot; alt=&quot;Move lines and methods up/down&quot; /&gt;
  &lt;figcaption&gt;Move lines and methods up/down&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Both combined provide a powerful way of extending code: you duplicate a line, edit it and move it to its location.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/editlines.gif&quot; alt=&quot;Quick edit lines via duplicate and move&quot; /&gt;
  &lt;figcaption&gt;Quick edit lines via duplicate and move&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;rename-update-and-move&quot;&gt;Rename, update and move&lt;/h2&gt;
&lt;p&gt;Renaming classes is very involved: rename class definition, rename the file and update all references and documentation. Fortunately &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F6&lt;/code&gt; does all of that for you.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/renameclass.gif&quot; alt=&quot;Rename anything with ⇧ + F6&quot; /&gt;
  &lt;figcaption&gt;Rename anything with ⇧ + F6&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This doesn’t just work for classes, but also for methods, variables, fields,…&lt;/p&gt;

&lt;p&gt;Similarly &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F6&lt;/code&gt; allows you to update the signature of a method. This is especially useful to add, remove or reorder new parameters to the method definition.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/changesignature.gif&quot; alt=&quot;Change method signature with ⌘ + F6&quot; /&gt;
  &lt;figcaption&gt;Change method signature with ⌘ + F6&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note how you can specify a default value so all existing method consumers will be updated by Android Studio! Use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↓&lt;/code&gt; to quickly reorder parameters.&lt;/p&gt;

&lt;p&gt;Finally, you can move classes to their own file or to another package using &lt;code class=&quot;highlighter-rouge&quot;&gt;F6&lt;/code&gt;. This works for all top-level declarations and Java static methods/constants.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/moveclass.gif&quot; alt=&quot;Move classes with F6&quot; /&gt;
  &lt;figcaption&gt;Move classes with F6&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;To clean up code it is often handy to convert values into variables with a meaningful name. This is easy using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + V&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractvariable.gif&quot; alt=&quot;Extract variable with ⌥ + ⌘ + V&quot; /&gt;
  &lt;figcaption&gt;Extract variable with ⌥ + ⌘ + V&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that you can either replace one or all occurrences.&lt;/p&gt;

&lt;p&gt;Similarly, you can extract code into a method with &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + M&lt;/code&gt; and give it an easy to understand name.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractmethod.gif&quot; alt=&quot;Extract method with ⌥ + ⌘ + M&quot; /&gt;
  &lt;figcaption&gt;Extract method with ⌥ + ⌘ + M&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can even convert a variable to a parameter that is injected into the method using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + P&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractparameter.gif&quot; alt=&quot;Extract parameter with ⌥ + ⌘ + P&quot; /&gt;
  &lt;figcaption&gt;Extract parameter with ⌥ + ⌘ + P&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If this makes another parameter obsolete, then it will be automatically removed from the method signature.&lt;/p&gt;

&lt;p&gt;Same holds true to create properties, by using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + F&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractproperty.gif&quot; alt=&quot;Extract property with ⌥ + ⌘ + F&quot; /&gt;
  &lt;figcaption&gt;Extract property with ⌥ + ⌘ + F&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that for Java you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + C&lt;/code&gt; to extract a static final field. This isn’t available for Kotlin however.&lt;/p&gt;

&lt;p&gt;Besides extracting, you can also do the inverse operation: inlining &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + N&lt;/code&gt;. This is available for almost everything you can extract: methods, variables, properties,…&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/inlinevariablesmethods.gif&quot; alt=&quot;Inline method or variable with ⌥ + ⌘ + N&quot; /&gt;
  &lt;figcaption&gt;Inline method or variable with ⌥ + ⌘ + N&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Inlining gives you the option to inline it only in one place or everywhere. Plus you can optionally still keep the inlined variable or method.&lt;/p&gt;

&lt;p&gt;While the above refactorings are the most commonly used ones, Android Studio actually offers quite a lot more if you press &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + T&lt;/code&gt;:&lt;/p&gt;

&lt;figure style=&quot;width: 50%&quot; class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/refactoroptions.png&quot; alt=&quot;All refactoring options&quot; /&gt;
  &lt;figcaption&gt;All refactoring options&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I strongly encourage you to experiment with these and learn how they work. Good knowledge of these can dramatically speed up your development and reduce mistakes.&lt;/p&gt;

&lt;h2 id=&quot;android-studio-quick-fixes&quot;&gt;Android studio quick fixes&lt;/h2&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + enter&lt;/code&gt; Android Studio is able to quickly fix a number of common issues: add imports, remove unused method, remove unused parameter, restrict access modifiers,…&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/quickfixes.gif&quot; alt=&quot;Quick fix problems with ⌥ + enter&quot; /&gt;
  &lt;figcaption&gt;Quick fix problems with ⌥ + enter&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This quick fix option is significantly more powerful than you might think. Have a look at the function below:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldFollowAuthorOnTwitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBadBlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasReadArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isBlogJeroen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBlogJeroen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBadBlogPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasReadArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not easy to understand, is it?&lt;/p&gt;

&lt;p&gt;Let’s now use Android Studio to simplify this complex code for us.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/simplifyifs.gif&quot; alt=&quot;Simplify if statements&quot; /&gt;
  &lt;figcaption&gt;Simplify if statements&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Pretty cool, no?&lt;/p&gt;

&lt;p&gt;Even better: this procedure is 100% safe!!! This is because we’ve offloaded all correctness checks and code changes to our IDE.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in the next posts it’s probably best to follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-refactoring2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Refactoring can be tedious and easily introduce bugs. Therefore we should automate as much as we can using Android Studio.&lt;/p&gt;

&lt;p&gt;This was part two of my series to get the most out of Android Studio.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-refactoring2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="androidstudio" /><category term="tools" /><category term="shortcuts" /><summary type="html">Refactoring can be tedious and easily introduce bugs. The main reason for this is the number of manual steps involved: rename, move, copy-paste,… So wouldn’t it make sense to automate this and have Android Studio do all the work for you?</summary></entry><entry><title type="html">Pro Android Studio - Code navigation</title><link href="https://jeroenmols.com/blog/2018/02/22/androidstudioshortcuts/" rel="alternate" type="text/html" title="Pro Android Studio - Code navigation" /><published>2018-02-22T00:00:00+01:00</published><updated>2018-02-22T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2018/02/22/androidstudioshortcuts</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/02/22/androidstudioshortcuts/">&lt;p&gt;Struggling to navigate your code? Getting lost in deep inheritance hierarchies? Hard time figuring out relations between classes? Let’s learn how to navigate code in Android Studio like a pro.&lt;/p&gt;

&lt;p&gt;Being a skilled Android developer means getting the most out of the tools at your disposal. While there are plenty resources listing shortcuts, it’s often hard to make sense and master those.&lt;/p&gt;

&lt;p&gt;Therefore this series aims to be a practical guide with clear examples on how to better navigate and refactor code. It will effectively cover how I personally use Android Studio.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;This post is part of a series with practical examples on how you to get the most out of Android Studio:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/02/22/androidstudioshortcuts/&quot;&gt;Part 1: Code navigation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;Part 2: Refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/07/16/androidstudioshortcuts3/&quot;&gt;Part 3: Taming the interface&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I strongly suggest you look at the examples below, but a quick reference is always useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + O&lt;/code&gt;: find class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + O&lt;/code&gt;: find symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + O&lt;/code&gt;: find file&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + T&lt;/code&gt;: go to/from test&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + F7&lt;/code&gt;: show usages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + U&lt;/code&gt;: jump to superclass/defining method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + B&lt;/code&gt;: jump to subclass/overridden method&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + H&lt;/code&gt;: show class hierarchy&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F12&lt;/code&gt;: show methods&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + B&lt;/code&gt;: go to declaration&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F2&lt;/code&gt;: next error/warning&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F2&lt;/code&gt;: previous error/warning&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + L&lt;/code&gt;: go to line&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + E&lt;/code&gt;: show recent files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + [&lt;/code&gt;: to previous code position&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ]&lt;/code&gt;: to next code position&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + backspace&lt;/code&gt;: to last code edit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows equivalents can be found &lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;opening-classes-and-files&quot;&gt;Opening classes and files&lt;/h2&gt;
&lt;p&gt;Better than search everywhere is telling Android Studio what you are looking for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + O&lt;/code&gt;: a class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + O&lt;/code&gt;: a symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + O&lt;/code&gt;: a file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes search a lot faster and returns fewer, more relevant results!&lt;/p&gt;

&lt;p&gt;Searched for classes but needed a file? Just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + O&lt;/code&gt; while open to dynamically swap between modes. You can even use &lt;a href=&quot;https://en.wikipedia.org/wiki/Camel_case&quot;&gt;Camel Casing&lt;/a&gt; to quickly find &lt;code class=&quot;highlighter-rouge&quot;&gt;AlbumActivityTest&lt;/code&gt; by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;AlAT&lt;/code&gt; or directly jump to a line number by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/openclassandfiles.gif&quot; alt=&quot;Open classes, symbols or files&quot; /&gt;
  &lt;figcaption&gt;Open classes, symbols or files&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Already found the class you were looking for, but quickly want to go to the test? Go to the class declaration and use &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + T&lt;/code&gt;. It even suggests to create a new test and also works from the test.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/navigatetest.gif&quot; alt=&quot;Navigate between test and class with ⌘ + T&quot; /&gt;
  &lt;figcaption&gt;Navigate between test and class with ⌘ + T&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;relationships-between-classes&quot;&gt;Relationships between classes&lt;/h2&gt;
&lt;p&gt;If you want to figure out where a class is being used? &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + F7&lt;/code&gt; shows it in a handy pop over. Note that you can show the same info in the find tab using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F7&lt;/code&gt; for a more static view.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/classusages.gif&quot; alt=&quot;Show class usages with ⌘ + ⌥ + F7&quot; /&gt;
  &lt;figcaption&gt;Show class usages with ⌘ + ⌥ + F7&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Inheritance hierarchies are typically easy to get lost in.&lt;/p&gt;

&lt;p&gt;Did you know you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + U&lt;/code&gt; to jump to the super class or &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + B&lt;/code&gt; to go to a sub class? It even works for method overrides!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/supersubclass.gif&quot; alt=&quot;Navigate between super- and subclasses&quot; /&gt;
  &lt;figcaption&gt;Navigate between super- and subclasses&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + H&lt;/code&gt; dumps out the entire class hierarchy in a handy overview.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/classhierarchy.png&quot; alt=&quot;Show class hierarchy with ^ + H&quot; /&gt;
  &lt;figcaption&gt;Show class hierarchy with ^ + H&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;structure-of-classes&quot;&gt;Structure of classes&lt;/h2&gt;
&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F12&lt;/code&gt; to show all methods and properties of a class. Like any other view in Android Studio, even this one is searchable.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/showmethods.gif&quot; alt=&quot;Show class methods and properties with ⌘ + F12&quot; /&gt;
  &lt;figcaption&gt;Show class methods and properties with ⌘ + F12&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Come across a member in code? With &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + B&lt;/code&gt; you can immediately jump to where it is defined. Tapping &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + B&lt;/code&gt; a second time shows you where it is used.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/gotodeclaration.gif&quot; alt=&quot;Analyze class usages with ⌘ + ⌥ + F7&quot; /&gt;
  &lt;figcaption&gt;Go to declaration and show usages with ⌘ + B&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Be it a failing build due to multiple errors, or you scroll away from broken code under development. Compilation errors are common and can be hard to navigate to.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;F2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F2&lt;/code&gt;, however, will let you jump back and forth between all errors in a file. If there are none, those keys will do the same for all warnings.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/nexterror.gif&quot; alt=&quot;Navigate between errors/warnings in a file&quot; /&gt;
  &lt;figcaption&gt;Navigate between errors/warnings in a file&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Know the exact line number? Then &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + L&lt;/code&gt; is the shortcut for you.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/gotoline.gif&quot; alt=&quot;Go to a specific line in a file with ⌘ + L&quot; /&gt;
  &lt;figcaption&gt;Go to a specific line in a file with ⌘ + L&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;With all these new code navigation superpowers, there is one critical element missing: how do you find your way back to where you started?&lt;/p&gt;

&lt;p&gt;One of the well-known options is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + E&lt;/code&gt; to list your recently opened files.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/recentnavigation.gif&quot; alt=&quot;List recently opened files with ⌘ + E&quot; /&gt;
  &lt;figcaption&gt;List recently opened files with ⌘ + E&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;However, when clicking through code you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + [&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ]&lt;/code&gt; to take a step back or forth respectively.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/previousnextnavigation.gif&quot; alt=&quot;Navigate between previous visited code&quot; /&gt;
  &lt;figcaption&gt;Navigate between previous visited code&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And finally, if you just want to continue coding where you left off, use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + backspace&lt;/code&gt; to jump to where you made the last code edit.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/previousedit.gif&quot; alt=&quot;Navigate to the last edited code with ⌘ + ⇧ + backspace&quot; /&gt;
  &lt;figcaption&gt;Navigate to the last edited code with ⌘ + ⇧ + backspace&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-codenavigation2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;This was part one of my series to get the most out of Android Studio, feel free to continue reading &lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;the second part&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-codenavigation2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;

&lt;p&gt;Special thanks to Antonio Leiva, all gifs are made with code from his open source project &lt;a href=&quot;https://github.com/antoniolg/Bandhook-Kotlin&quot;&gt;Bandhook&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="androidstudio" /><category term="tools" /><category term="shortcuts" /><summary type="html">Struggling to navigate your code? Getting lost in deep inheritance hierarchies? Hard time figuring out relations between classes? Let’s learn how to navigate code in Android Studio like a pro.</summary></entry><entry><title type="html">Year in review 2017</title><link href="https://jeroenmols.com/blog/2018/01/01/yearinreview/" rel="alternate" type="text/html" title="Year in review 2017" /><published>2018-01-01T00:00:00+01:00</published><updated>2018-01-01T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2018/01/01/yearinreview</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/01/01/yearinreview/">&lt;p&gt;For the first time ever I have my &lt;code class=&quot;highlighter-rouge&quot;&gt;year in review&lt;/code&gt; ready in time.&lt;/p&gt;

&lt;p&gt;I’m sure I’ll never forget 2017. Not only did we start building our dream house, but more importantly, our family grew to 4 people! Our baby girl Lene - ahum Toddler - became the big sister of our newborn son Wout. While having two kids is definitely very, very intense, it’s extraordinary to see them grow and a privilege to experience how fond they already are of each other.&lt;/p&gt;

&lt;p&gt;For my career this was the most remarkable year so far as I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Became a &lt;a href=&quot;https://developers.google.com/experts/people/jeroen-mols&quot;&gt;Google Developer Expert for Android&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Built up an internal app team and became the &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6264882628466475008&quot;&gt;Lead Android developer&lt;/a&gt; at Philips Hue&lt;/li&gt;
  &lt;li&gt;Started my own company &lt;a href=&quot;https://jeroenmols.com/hireme/&quot;&gt;Build IT bvba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further, I’m super proud of all my community efforts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spoke at &lt;a href=&quot;https://jeroenmols.com/speaking/&quot;&gt;4 big conferences + 5 local meetups&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wrote &lt;a href=&quot;http://jeroenmols.com/blog/&quot;&gt;13 blog posts&lt;/a&gt;, exceeding my goal of 1 per month&lt;/li&gt;
  &lt;li&gt;Grew my &lt;a href=&quot;https://twitter.com/molsjeroen&quot;&gt;Twitter&lt;/a&gt; followers to more than 1850&lt;/li&gt;
  &lt;li&gt;Had the &lt;a href=&quot;https://medium.com/@jordanjoz/12-android-blogs-you-should-be-following-1220c7e5398d&quot;&gt;12th most influential Android blog&lt;/a&gt; in the world&lt;/li&gt;
  &lt;li&gt;Got 5 times featured in &lt;a href=&quot;http://androidweekly.net/search?keyword=jeroen+mols&amp;amp;commit=Search&quot;&gt;Android weekly&lt;/a&gt; and once in &lt;a href=&quot;http://mailchi.mp/kotlinweekly/kotlin-weekly-59&quot;&gt;Kotlin weekly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gave the &lt;a href=&quot;https://devoxx.be/2017/11/the-top-100-rated-devoxx-belgium-2017-talks/&quot;&gt;8th highest rated talk&lt;/a&gt; at Devoxx&lt;/li&gt;
  &lt;li&gt;Revamped &lt;a href=&quot;https://jeroenmols.com/&quot;&gt;my website&lt;/a&gt; with https, faster loading, and search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But leave no mistake, my family is and will always be the most important thing in the world!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/yearinreview17/house.jpg&quot; alt=&quot;Status of our house&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking forward to next year, stuff is going to be intense for sure! We’ll complete the construction of our house, our daughter will start going to school, our son will likely learn how to walk,… and I don’t want to miss a second of all that. Which means #latenightblogging. :)&lt;/p&gt;

&lt;p&gt;So I’m not going to increase my community efforts, but instead, I’d like to experiment with data analytics to increase the impact of all my typical efforts.&lt;/p&gt;

&lt;p&gt;As always you can reach me &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=yearinreview20172018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;@molsjeroen&lt;/a&gt;&lt;/span&gt;
 on twitter, or leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="review" /><summary type="html">For the first time ever I have my year in review ready in time.</summary></entry><entry><title type="html">MacOS update could not be installed</title><link href="https://jeroenmols.com/blog/2017/12/26/macosupdate/" rel="alternate" type="text/html" title="MacOS update could not be installed" /><published>2017-12-26T00:00:00+01:00</published><updated>2017-12-26T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/12/26/macosupdate</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/12/26/macosupdate/">&lt;p&gt;Tonight after a routine MacOS update (10.13.2) disaster struck and my Mac got stuck in an update boot loop. After a few hours of panic, reading online and trial &amp;amp; error I managed to resolve it. Here’s what I did in the hope it also helps someone else.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;p&gt;From the “MacOS could not be installed on your computer” screen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Press and hold “option” key and click restart&lt;/li&gt;
  &lt;li&gt;In the “Startup disk selection” screen, use the arrow keys to select your main hard drive (not the MacOS update)&lt;/li&gt;
  &lt;li&gt;Wait for your Mac to boot normally&lt;/li&gt;
  &lt;li&gt;Download the latest &lt;a href=&quot;https://support.apple.com/downloads/macos&quot;&gt;combo update&lt;/a&gt; directly from Apple. (this is a full system image, not an incremental update)&lt;/li&gt;
  &lt;li&gt;Open and install the update&lt;/li&gt;
  &lt;li&gt;Grab a snickers, this will take a while&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My environment: 2017 Macbook pro 15” Touch Bar with MacOS 10.13.1 (High Sierra) installed and tried to update to 10.13.2 using the App Store.&lt;/p&gt;

&lt;p&gt;Feel free leave a comment below or follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=macosupdatecouldnotbeinstalled2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="macos" /><category term="update" /><category term="troubleshooting" /><summary type="html">Tonight after a routine MacOS update (10.13.2) disaster struck and my Mac got stuck in an update boot loop. After a few hours of panic, reading online and trial &amp;amp; error I managed to resolve it. Here’s what I did in the hope it also helps someone else.</summary></entry></feed>