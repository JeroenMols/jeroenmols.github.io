<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="https://jeroenmols.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jeroenmols.com/" rel="alternate" type="text/html" /><updated>2018-07-16T23:48:56+02:00</updated><id>https://jeroenmols.com/</id><title type="html">Jeroen Mols</title><subtitle>Blog and portfolio of Jeroen Mols, the Android developer you should hire.</subtitle><author><name>Jeroen Mols</name></author><entry><title type="html">Pro Android Studio - Taming the interface</title><link href="https://jeroenmols.com/blog/2018/07/16/androidstudioshortcuts3/" rel="alternate" type="text/html" title="Pro Android Studio - Taming the interface" /><published>2018-07-16T00:00:00+02:00</published><updated>2018-07-16T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/07/16/androidstudioshortcuts3</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/07/16/androidstudioshortcuts3/">&lt;p&gt;Not only can anything in Android Studio be controlled with a keyboard shortcut, it offers many more simple tricks to make you more productive.&lt;/p&gt;

&lt;p&gt;To conclude this series, we will look at how you can control the interface, invoke every (!) action and point you to even more advanced features.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;This post is part of a series with practical examples on how you to get the most out of Android Studio:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/02/22/androidstudioshortcuts/&quot;&gt;Part 1: Code navigation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;Part 2: Refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/07/16/androidstudioshortcuts3/&quot;&gt;Part 3: Taming the interface&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I strongly suggest you look at the examples below, but a quick reference is always useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + number&lt;/code&gt;: open/close views&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt;: enlarge view&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt;: shrink view&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + →&lt;/code&gt;: enlarge side view&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ←&lt;/code&gt;: shrink side view&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + F12&lt;/code&gt;: close all views&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ]&lt;/code&gt;: next tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + [&lt;/code&gt;: previous tab&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + →&lt;/code&gt;: text view (xml layout editing)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + ←&lt;/code&gt;: design view (visual layout editing)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + letter&lt;/code&gt;: invoke button&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + A&lt;/code&gt;: action lookup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;taming-the-interface&quot;&gt;Taming the interface&lt;/h2&gt;
&lt;p&gt;Using your keyboard is always more efficient than using a mouse. This is because you can make use of all your fingers at the same time + you don’t have to switch between mouse and keyboard.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be cool if we never have to use our mouse again?&lt;/p&gt;

&lt;p&gt;First of all you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + number&lt;/code&gt; to open/close different Android Studio views (e.g. Logcat, Project view,…)&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/openviews.gif&quot; alt=&quot;Use `⌥ + number` to open/close different Android Studio views&quot; /&gt;
  &lt;figcaption&gt;Use `⌥ + number` to open/close different Android Studio views&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can shrink/enlarge the views above using &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt; respectively,&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/expandshrinkviews.gif&quot; alt=&quot;Use `⇧ + ⌘ + ↑` and `⇧ + ⌘ + ↓` to shrink or enlarge views&quot; /&gt;
  &lt;figcaption&gt;Use `⇧ + ⌘ + ↑` and `⇧ + ⌘ + ↓` to shrink or enlarge views&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that this will also work with &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + →&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ←&lt;/code&gt; for side views.&lt;/p&gt;

&lt;p&gt;Or close all views with &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + F12&lt;/code&gt; to have a clutter free interface,&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/closeallviews.gif&quot; alt=&quot;Use `⇧ + ⌘ + F12` to close all views&quot; /&gt;
  &lt;figcaption&gt;Use `⇧ + ⌘ + F12` to close all views&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When you have multiple tabs open, &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + [&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ]&lt;/code&gt; come in handy to cycle between tabs.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/closeallviews.gif&quot; alt=&quot;Use `⇧ + ⌘ + [` and `⇧ + ⌘ + ]` to cycle between tabs&quot; /&gt;
  &lt;figcaption&gt;Use `⇧ + ⌘ + [` and `⇧ + ⌘ + ]` to cycle between tabs&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you’re designing layouts, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + →&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + ⇧ + ←&lt;/code&gt; to switch between design and text view.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/switchdesignxml.gif&quot; alt=&quot;Use `^ + ⇧ + →` and `^ + ⇧ + ←` to switch between design and text view&quot; /&gt;
  &lt;figcaption&gt;Use `^ + ⇧ + →` and `^ + ⇧ + ←` to switch between design and text view&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And whenever you have a dialog open you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥&lt;/code&gt; to highlight what letters you can press to invoke the respective buttons. E.g. in the example below &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + R&lt;/code&gt; is used to press the replace button.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/controlinterface.gif&quot; alt=&quot;Use `⌥` to highlight what letters you can press to invoke the respective buttons&quot; /&gt;
  &lt;figcaption&gt;Use `⌥` to highlight what letters you can press to invoke the respective buttons&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥&lt;/code&gt; helps in a lot more situations such as in the find and replace window. (notice the subtle underline)&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/althighlighting.gif&quot; alt=&quot;Pressing `⌥` reveals you can use `⌥ + p` to replace the next occurrence&quot; /&gt;
  &lt;figcaption&gt;Pressing `⌥` reveals you can use `⌥ + p` to replace the next occurrence&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;shortcut-lookup&quot;&gt;Shortcut lookup&lt;/h2&gt;
&lt;p&gt;If there is one shortcut you should really remember, then that is &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + A&lt;/code&gt;. That one allows you to invoke any Android Studio action using your keyboard.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts3/searchactions.gif&quot; alt=&quot;Use `⌘ + ⇧ + A` to search for any action.&quot; /&gt;
  &lt;figcaption&gt;Use `⌘ + ⇧ + A` to search for any action.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that this also serves as a useful shortcut lookup tool. Next to every action the corresponding shortcut will be displayed (if there is one).&lt;/p&gt;

&lt;h2 id=&quot;additional-reads&quot;&gt;Additional reads&lt;/h2&gt;
&lt;p&gt;Android Studio is incredibly powerful and hence this blog post series couldn’t cover everything. However, if I piqued your interest, have a look at these references:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kevinpelgrims.com/blog/2017/12/29/using-multicursor-in-android-studio/&quot;&gt;Using multicursor in Android studio&lt;/a&gt; by Kevin Pelgrims&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@geapi/permanent-function-keys-intellij-macbook-pro-w-touchbar-d6fc78781b90&quot;&gt;Permantent function keys in Android Studio with Macbook pro Touchbar&lt;/a&gt; By Georg Apitz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://afterecho.uk/blog/structural-search-and-replace-in-android-studio.html&quot;&gt;Structural search and replace&lt;/a&gt; by Darren&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/writing-more-code-by-writing-less-code-with-android-studio-live-templates-244f648d17c7&quot;&gt;Android studio live templates&lt;/a&gt; by Retro Meier&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vojtechruzicka.com/intellij-idea-tips-tricks-postfix-code-completion/&quot;&gt;Postfix code completion&lt;/a&gt; by Vojtech Ruzicka’s&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Investing time to really learn Android Studio can mean a big productivity boost. Start with &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + A&lt;/code&gt;, learn the corresponding shortcuts and challenge yourself to use your mouse less.&lt;/p&gt;

&lt;p&gt;This was the last part in my series to get the most out of Android Studio.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-tamingtheinterface2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="androidstudio" /><category term="tools" /><category term="shortcuts" /><category term="navigation" /><summary type="html">Not only can anything in Android Studio be controlled with a keyboard shortcut, it offers many more simple tricks to make you more productive.</summary></entry><entry><title type="html">Pro Android Studio - Refactoring</title><link href="https://jeroenmols.com/blog/2018/04/26/androidstudioshortcuts2/" rel="alternate" type="text/html" title="Pro Android Studio - Refactoring" /><published>2018-04-26T00:00:00+02:00</published><updated>2018-04-26T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2018/04/26/androidstudioshortcuts2</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/04/26/androidstudioshortcuts2/">&lt;p&gt;Refactoring can be tedious and easily introduce bugs. The main reason for this is the number of manual steps involved: rename, move, copy-paste,… So wouldn’t it make sense to automate this and have Android Studio do all the work for you?&lt;/p&gt;

&lt;p&gt;This post will zoom in on the most useful refactoring options of Android Studio. Enabling you to refactor more confidently, introduce fewer bugs and increase overall quality as also variables, documentation, etc. will be updated.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;This post is part of a series with practical examples on how you to get the most out of Android Studio:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/02/22/androidstudioshortcuts/&quot;&gt;Part 1: Code navigation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;Part 2: Refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/07/16/androidstudioshortcuts3/&quot;&gt;Part 3: Taming the interface&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I strongly suggest you look at the examples below, but a quick reference is always useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + D&lt;/code&gt;: duplicate line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + backspace&lt;/code&gt;: delete line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↑&lt;/code&gt;: move line up&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↓&lt;/code&gt;: move line down&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt;: move method up&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt;: move method down&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F6&lt;/code&gt;: rename&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F6&lt;/code&gt;: change method signature&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F6&lt;/code&gt;: move&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + V&lt;/code&gt;: extract variable&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + M&lt;/code&gt;: extract method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + P&lt;/code&gt;: extract method parameter&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + F&lt;/code&gt;: extract property (or field)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + C&lt;/code&gt;: extract constant (java only)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + N&lt;/code&gt;: inline&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + T&lt;/code&gt;: open refactoring menu&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + enter&lt;/code&gt;: quick fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows equivalents can be found &lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;code-manipulation&quot;&gt;Code manipulation&lt;/h2&gt;
&lt;p&gt;In order to speed up development, you want to reduce the amount of typing to a minimum. While autocomplete definitely helps, sometimes it’s faster to directly manipulate lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + D&lt;/code&gt;: duplicate line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + backspace&lt;/code&gt;: delete line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These shortcuts will work regardless of the cursor position in the line.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/duplicatedelete.gif&quot; alt=&quot;Duplicate and delete lines&quot; /&gt;
  &lt;figcaption&gt;Duplicate and delete lines&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After duplicating you can simply move code up/down by using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↓&lt;/code&gt; for lines, or &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + ↓&lt;/code&gt; for methods.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/movelineblock.gif&quot; alt=&quot;Move lines and methods up/down&quot; /&gt;
  &lt;figcaption&gt;Move lines and methods up/down&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Both combined provide a powerful way of extending code: you duplicate a line, edit it and move it to its location.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/editlines.gif&quot; alt=&quot;Quick edit lines via duplicate and move&quot; /&gt;
  &lt;figcaption&gt;Quick edit lines via duplicate and move&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;rename-update-and-move&quot;&gt;Rename, update and move&lt;/h2&gt;
&lt;p&gt;Renaming classes is very involved: rename class definition, rename the file and update all references and documentation. Fortunately &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F6&lt;/code&gt; does all of that for you.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/renameclass.gif&quot; alt=&quot;Rename anything with ⇧ + F6&quot; /&gt;
  &lt;figcaption&gt;Rename anything with ⇧ + F6&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This doesn’t just work for classes, but also for methods, variables, fields,…&lt;/p&gt;

&lt;p&gt;Similarly &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F6&lt;/code&gt; allows you to update the signature of a method. This is especially useful to add, remove or reorder new parameters to the method definition.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/changesignature.gif&quot; alt=&quot;Change method signature with ⌘ + F6&quot; /&gt;
  &lt;figcaption&gt;Change method signature with ⌘ + F6&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note how you can specify a default value so all existing method consumers will be updated by Android Studio! Use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↑&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ↓&lt;/code&gt; to quickly reorder parameters.&lt;/p&gt;

&lt;p&gt;Finally, you can move classes to their own file or to another package using &lt;code class=&quot;highlighter-rouge&quot;&gt;F6&lt;/code&gt;. This works for all top-level declarations and Java static methods/constants.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/moveclass.gif&quot; alt=&quot;Move classes with F6&quot; /&gt;
  &lt;figcaption&gt;Move classes with F6&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;To clean up code it is often handy to convert values into variables with a meaningful name. This is easy using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + V&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractvariable.gif&quot; alt=&quot;Extract variable with ⌥ + ⌘ + V&quot; /&gt;
  &lt;figcaption&gt;Extract variable with ⌥ + ⌘ + V&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that you can either replace one or all occurrences.&lt;/p&gt;

&lt;p&gt;Similarly, you can extract code into a method with &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + M&lt;/code&gt; and give it an easy to understand name.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractmethod.gif&quot; alt=&quot;Extract method with ⌥ + ⌘ + M&quot; /&gt;
  &lt;figcaption&gt;Extract method with ⌥ + ⌘ + M&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can even convert a variable to a parameter that is injected into the method using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + P&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractparameter.gif&quot; alt=&quot;Extract parameter with ⌥ + ⌘ + P&quot; /&gt;
  &lt;figcaption&gt;Extract parameter with ⌥ + ⌘ + P&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If this makes another parameter obsolete, then it will be automatically removed from the method signature.&lt;/p&gt;

&lt;p&gt;Same holds true to create properties, by using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + F&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/extractproperty.gif&quot; alt=&quot;Extract property with ⌥ + ⌘ + F&quot; /&gt;
  &lt;figcaption&gt;Extract property with ⌥ + ⌘ + F&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that for Java you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + C&lt;/code&gt; to extract a static final field. This isn’t available for Kotlin however.&lt;/p&gt;

&lt;p&gt;Besides extracting, you can also do the inverse operation: inlining &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + ⌘ + N&lt;/code&gt;. This is available for almost everything you can extract: methods, variables, properties,…&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/inlinevariablesmethods.gif&quot; alt=&quot;Inline method or variable with ⌥ + ⌘ + N&quot; /&gt;
  &lt;figcaption&gt;Inline method or variable with ⌥ + ⌘ + N&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Inlining gives you the option to inline it only in one place or everywhere. Plus you can optionally still keep the inlined variable or method.&lt;/p&gt;

&lt;p&gt;While the above refactorings are the most commonly used ones, Android Studio actually offers quite a lot more if you press &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + T&lt;/code&gt;:&lt;/p&gt;

&lt;figure style=&quot;width: 50%&quot; class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/refactoroptions.png&quot; alt=&quot;All refactoring options&quot; /&gt;
  &lt;figcaption&gt;All refactoring options&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I strongly encourage you to experiment with these and learn how they work. Good knowledge of these can dramatically speed up your development and reduce mistakes.&lt;/p&gt;

&lt;h2 id=&quot;android-studio-quick-fixes&quot;&gt;Android studio quick fixes&lt;/h2&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ + enter&lt;/code&gt; Android Studio is able to quickly fix a number of common issues: add imports, remove unused method, remove unused parameter, restrict access modifiers,…&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/quickfixes.gif&quot; alt=&quot;Quick fix problems with ⌥ + enter&quot; /&gt;
  &lt;figcaption&gt;Quick fix problems with ⌥ + enter&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This quick fix option is significantly more powerful than you might think. Have a look at the function below:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldFollowAuthorOnTwitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBadBlogPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasReadArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isBlogJeroen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBlogJeroen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBadBlogPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasReadArticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not easy to understand, is it?&lt;/p&gt;

&lt;p&gt;Let’s now use Android Studio to simplify this complex code for us.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts2/simplifyifs.gif&quot; alt=&quot;Simplify if statements&quot; /&gt;
  &lt;figcaption&gt;Simplify if statements&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Pretty cool, no?&lt;/p&gt;

&lt;p&gt;Even better: this procedure is 100% safe!!! This is because we’ve offloaded all correctness checks and code changes to our IDE.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in the next posts it’s probably best to follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-refactoring2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Refactoring can be tedious and easily introduce bugs. Therefore we should automate as much as we can using Android Studio.&lt;/p&gt;

&lt;p&gt;This was part two of my series to get the most out of Android Studio.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-refactoring2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="androidstudio" /><category term="tools" /><category term="shortcuts" /><summary type="html">Refactoring can be tedious and easily introduce bugs. The main reason for this is the number of manual steps involved: rename, move, copy-paste,… So wouldn’t it make sense to automate this and have Android Studio do all the work for you?</summary></entry><entry><title type="html">Pro Android Studio - Code navigation</title><link href="https://jeroenmols.com/blog/2018/02/22/androidstudioshortcuts/" rel="alternate" type="text/html" title="Pro Android Studio - Code navigation" /><published>2018-02-22T00:00:00+01:00</published><updated>2018-02-22T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2018/02/22/androidstudioshortcuts</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/02/22/androidstudioshortcuts/">&lt;p&gt;Struggling to navigate your code? Getting lost in deep inheritance hierarchies? Hard time figuring out relations between classes? Let’s learn how to navigate code in Android Studio like a pro.&lt;/p&gt;

&lt;p&gt;Being a skilled Android developer means getting the most out of the tools at your disposal. While there are plenty resources listing shortcuts, it’s often hard to make sense and master those.&lt;/p&gt;

&lt;p&gt;Therefore this series aims to be a practical guide with clear examples on how to better navigate and refactor code. It will effectively cover how I personally use Android Studio.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;This post is part of a series with practical examples on how you to get the most out of Android Studio:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/02/22/androidstudioshortcuts/&quot;&gt;Part 1: Code navigation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;Part 2: Refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/blog/2018/07/16/androidstudioshortcuts3/&quot;&gt;Part 3: Taming the interface&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I strongly suggest you look at the examples below, but a quick reference is always useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + O&lt;/code&gt;: find class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + O&lt;/code&gt;: find symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + O&lt;/code&gt;: find file&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + T&lt;/code&gt;: go to/from test&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + F7&lt;/code&gt;: show usages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + U&lt;/code&gt;: jump to superclass/defining method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + B&lt;/code&gt;: jump to subclass/overridden method&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^ + H&lt;/code&gt;: show class hierarchy&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F12&lt;/code&gt;: show methods&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + B&lt;/code&gt;: go to declaration&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F2&lt;/code&gt;: next error/warning&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F2&lt;/code&gt;: previous error/warning&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + L&lt;/code&gt;: go to line&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + E&lt;/code&gt;: show recent files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + [&lt;/code&gt;: to previous code position&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ]&lt;/code&gt;: to next code position&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + backspace&lt;/code&gt;: to last code edit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows equivalents can be found &lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;opening-classes-and-files&quot;&gt;Opening classes and files&lt;/h2&gt;
&lt;p&gt;Better than search everywhere is telling Android Studio what you are looking for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + O&lt;/code&gt;: a class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + O&lt;/code&gt;: a symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + O&lt;/code&gt;: a file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes search a lot faster and returns fewer, more relevant results!&lt;/p&gt;

&lt;p&gt;Searched for classes but needed a file? Just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + O&lt;/code&gt; while open to dynamically swap between modes. You can even use &lt;a href=&quot;https://en.wikipedia.org/wiki/Camel_case&quot;&gt;Camel Casing&lt;/a&gt; to quickly find &lt;code class=&quot;highlighter-rouge&quot;&gt;AlbumActivityTest&lt;/code&gt; by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;AlAT&lt;/code&gt; or directly jump to a line number by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/openclassandfiles.gif&quot; alt=&quot;Open classes, symbols or files&quot; /&gt;
  &lt;figcaption&gt;Open classes, symbols or files&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Already found the class you were looking for, but quickly want to go to the test? Go to the class declaration and use &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + ⌘ + T&lt;/code&gt;. It even suggests to create a new test and also works from the test.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/navigatetest.gif&quot; alt=&quot;Navigate between test and class with ⌘ + T&quot; /&gt;
  &lt;figcaption&gt;Navigate between test and class with ⌘ + T&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;relationships-between-classes&quot;&gt;Relationships between classes&lt;/h2&gt;
&lt;p&gt;If you want to figure out where a class is being used? &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + F7&lt;/code&gt; shows it in a handy pop over. Note that you can show the same info in the find tab using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F7&lt;/code&gt; for a more static view.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/classusages.gif&quot; alt=&quot;Show class usages with ⌘ + ⌥ + F7&quot; /&gt;
  &lt;figcaption&gt;Show class usages with ⌘ + ⌥ + F7&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Inheritance hierarchies are typically easy to get lost in.&lt;/p&gt;

&lt;p&gt;Did you know you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + U&lt;/code&gt; to jump to the super class or &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⌥ + B&lt;/code&gt; to go to a sub class? It even works for method overrides!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/supersubclass.gif&quot; alt=&quot;Navigate between super- and subclasses&quot; /&gt;
  &lt;figcaption&gt;Navigate between super- and subclasses&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;^ + H&lt;/code&gt; dumps out the entire class hierarchy in a handy overview.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/classhierarchy.png&quot; alt=&quot;Show class hierarchy with ^ + H&quot; /&gt;
  &lt;figcaption&gt;Show class hierarchy with ^ + H&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;structure-of-classes&quot;&gt;Structure of classes&lt;/h2&gt;
&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + F12&lt;/code&gt; to show all methods and properties of a class. Like any other view in Android Studio, even this one is searchable.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/showmethods.gif&quot; alt=&quot;Show class methods and properties with ⌘ + F12&quot; /&gt;
  &lt;figcaption&gt;Show class methods and properties with ⌘ + F12&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Come across a member in code? With &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + B&lt;/code&gt; you can immediately jump to where it is defined. Tapping &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + B&lt;/code&gt; a second time shows you where it is used.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/gotodeclaration.gif&quot; alt=&quot;Analyze class usages with ⌘ + ⌥ + F7&quot; /&gt;
  &lt;figcaption&gt;Go to declaration and show usages with ⌘ + B&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Be it a failing build due to multiple errors, or you scroll away from broken code under development. Compilation errors are common and can be hard to navigate to.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;F2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ + F2&lt;/code&gt;, however, will let you jump back and forth between all errors in a file. If there are none, those keys will do the same for all warnings.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/nexterror.gif&quot; alt=&quot;Navigate between errors/warnings in a file&quot; /&gt;
  &lt;figcaption&gt;Navigate between errors/warnings in a file&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Know the exact line number? Then &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + L&lt;/code&gt; is the shortcut for you.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/gotoline.gif&quot; alt=&quot;Go to a specific line in a file with ⌘ + L&quot; /&gt;
  &lt;figcaption&gt;Go to a specific line in a file with ⌘ + L&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;With all these new code navigation superpowers, there is one critical element missing: how do you find your way back to where you started?&lt;/p&gt;

&lt;p&gt;One of the well-known options is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + E&lt;/code&gt; to list your recently opened files.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/recentnavigation.gif&quot; alt=&quot;List recently opened files with ⌘ + E&quot; /&gt;
  &lt;figcaption&gt;List recently opened files with ⌘ + E&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;However, when clicking through code you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + [&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ]&lt;/code&gt; to take a step back or forth respectively.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/previousnextnavigation.gif&quot; alt=&quot;Navigate between previous visited code&quot; /&gt;
  &lt;figcaption&gt;Navigate between previous visited code&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And finally, if you just want to continue coding where you left off, use &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + ⇧ + backspace&lt;/code&gt; to jump to where you made the last code edit.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudioshortcuts/previousedit.gif&quot; alt=&quot;Navigate to the last edited code with ⌘ + ⇧ + backspace&quot; /&gt;
  &lt;figcaption&gt;Navigate to the last edited code with ⌘ + ⇧ + backspace&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-codenavigation2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;This was part one of my series to get the most out of Android Studio, feel free to continue reading &lt;a href=&quot;/blog/2018/04/26/androidstudioshortcuts2/&quot;&gt;the second part&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=proandroidstudio-codenavigation2018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;

&lt;p&gt;Special thanks to Antonio Leiva, all gifs are made with code from his open source project &lt;a href=&quot;https://github.com/antoniolg/Bandhook-Kotlin&quot;&gt;Bandhook&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="androidstudio" /><category term="tools" /><category term="shortcuts" /><summary type="html">Struggling to navigate your code? Getting lost in deep inheritance hierarchies? Hard time figuring out relations between classes? Let’s learn how to navigate code in Android Studio like a pro.</summary></entry><entry><title type="html">Year in review 2017</title><link href="https://jeroenmols.com/blog/2018/01/01/yearinreview/" rel="alternate" type="text/html" title="Year in review 2017" /><published>2018-01-01T00:00:00+01:00</published><updated>2018-01-01T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2018/01/01/yearinreview</id><content type="html" xml:base="https://jeroenmols.com/blog/2018/01/01/yearinreview/">&lt;p&gt;For the first time ever I have my &lt;code class=&quot;highlighter-rouge&quot;&gt;year in review&lt;/code&gt; ready in time.&lt;/p&gt;

&lt;p&gt;I’m sure I’ll never forget 2017. Not only did we start building our dream house, but more importantly, our family grew to 4 people! Our baby girl Lene - ahum Toddler - became the big sister of our newborn son Wout. While having two kids is definitely very, very intense, it’s extraordinary to see them grow and a privilege to experience how fond they already are of each other.&lt;/p&gt;

&lt;p&gt;For my career this was the most remarkable year so far as I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Became a &lt;a href=&quot;https://developers.google.com/experts/people/jeroen-mols&quot;&gt;Google Developer Expert for Android&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Built up an internal app team and became the &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6264882628466475008&quot;&gt;Lead Android developer&lt;/a&gt; at Philips Hue&lt;/li&gt;
  &lt;li&gt;Started my own company &lt;a href=&quot;https://jeroenmols.com/hireme/&quot;&gt;Build IT bvba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further, I’m super proud of all my community efforts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spoke at &lt;a href=&quot;https://jeroenmols.com/speaking/&quot;&gt;4 big conferences + 5 local meetups&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wrote &lt;a href=&quot;http://jeroenmols.com/blog/&quot;&gt;13 blog posts&lt;/a&gt;, exceeding my goal of 1 per month&lt;/li&gt;
  &lt;li&gt;Grew my &lt;a href=&quot;https://twitter.com/molsjeroen&quot;&gt;Twitter&lt;/a&gt; followers to more than 1850&lt;/li&gt;
  &lt;li&gt;Had the &lt;a href=&quot;https://medium.com/@jordanjoz/12-android-blogs-you-should-be-following-1220c7e5398d&quot;&gt;12th most influential Android blog&lt;/a&gt; in the world&lt;/li&gt;
  &lt;li&gt;Got 5 times featured in &lt;a href=&quot;http://androidweekly.net/search?keyword=jeroen+mols&amp;amp;commit=Search&quot;&gt;Android weekly&lt;/a&gt; and once in &lt;a href=&quot;http://mailchi.mp/kotlinweekly/kotlin-weekly-59&quot;&gt;Kotlin weekly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gave the &lt;a href=&quot;https://devoxx.be/2017/11/the-top-100-rated-devoxx-belgium-2017-talks/&quot;&gt;8th highest rated talk&lt;/a&gt; at Devoxx&lt;/li&gt;
  &lt;li&gt;Revamped &lt;a href=&quot;https://jeroenmols.com/&quot;&gt;my website&lt;/a&gt; with https, faster loading, and search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But leave no mistake, my family is and will always be the most important thing in the world!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/yearinreview17/house.jpg&quot; alt=&quot;Status of our house&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking forward to next year, stuff is going to be intense for sure! We’ll complete the construction of our house, our daughter will start going to school, our son will likely learn how to walk,… and I don’t want to miss a second of all that. Which means #latenightblogging. :)&lt;/p&gt;

&lt;p&gt;So I’m not going to increase my community efforts, but instead, I’d like to experiment with data analytics to increase the impact of all my typical efforts.&lt;/p&gt;

&lt;p&gt;As always you can reach me &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=yearinreview20172018&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;@molsjeroen&lt;/a&gt;&lt;/span&gt;
 on twitter, or leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="review" /><summary type="html">For the first time ever I have my year in review ready in time.</summary></entry><entry><title type="html">MacOS update could not be installed</title><link href="https://jeroenmols.com/blog/2017/12/26/macosupdate/" rel="alternate" type="text/html" title="MacOS update could not be installed" /><published>2017-12-26T00:00:00+01:00</published><updated>2017-12-26T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/12/26/macosupdate</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/12/26/macosupdate/">&lt;p&gt;Tonight after a routine MacOS update (10.13.2) disaster struck and my Mac got stuck in an update boot loop. After a few hours of panic, reading online and trial &amp;amp; error I managed to resolve it. Here’s what I did in the hope it also helps someone else.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;p&gt;From the “MacOS could not be installed on your computer” screen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Press and hold “option” key and click restart&lt;/li&gt;
  &lt;li&gt;In the “Startup disk selection” screen, use the arrow keys to select your main hard drive (not the MacOS update)&lt;/li&gt;
  &lt;li&gt;Wait for your Mac to boot normally&lt;/li&gt;
  &lt;li&gt;Download the latest &lt;a href=&quot;https://support.apple.com/downloads/macos&quot;&gt;combo update&lt;/a&gt; directly from Apple. (this is a full system image, not an incremental update)&lt;/li&gt;
  &lt;li&gt;Open and install the update&lt;/li&gt;
  &lt;li&gt;Grab a snickers, this will take a while&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My environment: 2017 Macbook pro 15” Touch Bar with MacOS 10.13.1 (High Sierra) installed and tried to update to 10.13.2 using the App Store.&lt;/p&gt;

&lt;p&gt;Feel free leave a comment below or follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=macosupdatecouldnotbeinstalled2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="macos" /><category term="update" /><category term="troubleshooting" /><summary type="html">Tonight after a routine MacOS update (10.13.2) disaster struck and my Mac got stuck in an update boot loop. After a few hours of panic, reading online and trial &amp;amp; error I managed to resolve it. Here’s what I did in the hope it also helps someone else.</summary></entry><entry><title type="html">The curious case of haunting fragments</title><link href="https://jeroenmols.com/blog/2017/12/18/fragmentback/" rel="alternate" type="text/html" title="The curious case of haunting fragments" /><published>2017-12-18T00:00:00+01:00</published><updated>2017-12-18T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/12/18/fragmentback</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/12/18/fragmentback/">&lt;p&gt;Do Fragment transactions and back navigation have no more secrets for you? Well then you should try to solve the mystery in this post, where a Fragment (literally) came to haunt us…&lt;/p&gt;

&lt;p&gt;Seemingly simple Fragment transactions can sometimes have unintended side effects. While investigating, we’ll learn how Fragment transactions actually work.&lt;/p&gt;

&lt;h2 id=&quot;part-1-the-haunt&quot;&gt;Part 1: the haunt&lt;/h2&gt;
&lt;p&gt;Let’s build a very straightforward app that shows all today’s calendar events for a particular user. To do so, users will obviously have to log in first.&lt;/p&gt;

&lt;p&gt;Assume now that the app consists out of a single screen that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;either shows today’s events if user is logged in&lt;/li&gt;
  &lt;li&gt;otherwise shows a placeholder + login button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jeroenmols.com/img/blog/fragmentback/app_explanation.png&quot;&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/app_explanation.png&quot; alt=&quot;Main screens shows either list of events or a placeholder with login button&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The login is a two-step flow that consists out of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt;. Afterwards, the app navigates back to the main screen to show the events.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jeroenmols.com/img/blog/fragmentback/app_flow_simplified.png&quot;&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/app_flow_simplified.png&quot; alt=&quot;Event app with login flow simplified&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that for simplicity we don’t display the events when navigating back, but instead show the placeholder screen again after successful login.&lt;/p&gt;

&lt;p&gt;A simple implementation for all Fragment transactions could be:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that we only add the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt; to the back stack! This way one single back would always take the user back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodayFragment&lt;/code&gt;, making it super easy to navigate back when log in was successful.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onLoginSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that gives surprising results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/fragmentback_ghost.gif&quot; alt=&quot;Password fragment is back to haunt us&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; is back to haunt us!&lt;/p&gt;

&lt;h2 id=&quot;part-2-investigative-development&quot;&gt;Part 2: investigative development&lt;/h2&gt;
&lt;p&gt;Let’s have another look at the sequence of transactions that takes place:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since a replace is just a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;remove()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt; we can rewrite this to:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it is important to know that the FragmentTransactionManager only saves the FragmentTransactions that were executed, not the Fragments themselves!&lt;/p&gt;

&lt;p&gt;Consequently, when you press back in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt;, it won’t show all Fragments that were present before the Transaction! Instead, it will revert the previous Transaction that was added to the back stack:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will then be executed in reverse:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But because we are on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt;, which has replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt;, there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt; in this situation!&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hence nothing is removed and the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodayFragment&lt;/code&gt; is added leaving the users with both the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TodayFragment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/app_haunting.png&quot; alt=&quot;Haunting password fragment&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-3-mystery-solved&quot;&gt;Part 3: mystery solved&lt;/h2&gt;
&lt;p&gt;As a first stab, you could say that this problem is caused by transaction three not being added to the back stack. So why not also add that transaction and do a double back.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onLoginSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While simple, this actually won’t work! After calling &lt;code class=&quot;highlighter-rouge&quot;&gt;onBackPressed()&lt;/code&gt; the first time, the fragment will be detached from its activity, causing a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; on accessing the activity for the second back press.&lt;/p&gt;

&lt;p&gt;But even if that would’ve worked, it would still be a poor idea because this way the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; has hardcoded in it that it’s preceded by exactly one Fragment. Should you ever change that, this would break.&lt;/p&gt;

&lt;p&gt;Alternatively you could assign a tag to the first &lt;code class=&quot;highlighter-rouge&quot;&gt;addToBackStack&lt;/code&gt; invocation and add every transaction to the back stack:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onLoginSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POP_BACK_STACK_INCLUSIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That actually works! But unfortunately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; still needs to know what the first screen of the login flow is… This won’t just break easily, but it also makes it very complex to build dynamic login flows.&lt;/p&gt;

&lt;p&gt;So what would be the clean way of setting it up?&lt;/p&gt;

&lt;p&gt;Well actually… since all login screens together form a separate flow, why not just move them all to a single &lt;code class=&quot;highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;That has many advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Default way of reusing app parts on Android&lt;/li&gt;
  &lt;li&gt;Screens in the flow don’t know about each other&lt;/li&gt;
  &lt;li&gt;Ability to pass back a result&lt;/li&gt;
  &lt;li&gt;Better fits multi-module architectures&lt;/li&gt;
  &lt;li&gt;Super simple back handling: &lt;code class=&quot;highlighter-rouge&quot;&gt;activity.finish()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Fragment transactions are a surprisingly simple concept of adding/removing and reversing those operations. When navigations become complex, consider moving parts of the flow to a separate activity.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=thecuriouscaseofhauntingfragments2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below or check out &lt;a href=&quot;https://github.com/JeroenMols/FragmentBackNavigation&quot;&gt;the code&lt;/a&gt; on GitHub!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="fragment" /><category term="navigation" /><summary type="html">Do Fragment transactions and back navigation have no more secrets for you? Well then you should try to solve the mystery in this post, where a Fragment (literally) came to haunt us…</summary></entry><entry><title type="html">The 100% code coverage problem</title><link href="https://jeroenmols.com/blog/2017/11/28/coveragproblem/" rel="alternate" type="text/html" title="The 100% code coverage problem" /><published>2017-11-28T00:00:00+01:00</published><updated>2017-11-28T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/11/28/coveragproblem</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/11/28/coveragproblem/">&lt;p&gt;While you may be tempted to strive for 100% code coverage, that would be a horrible idea. Besides some code being hard to test, the concept of coverage is actually fundamentally limited.&lt;/p&gt;

&lt;p&gt;This post will deep dive in what code coverage actually means, detail why you should never set coverage goals and help you get the most value out of this concept.&lt;/p&gt;

&lt;h2 id=&quot;app-coverage&quot;&gt;App coverage&lt;/h2&gt;
&lt;p&gt;Take a step back and try to answer the following question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your app has 100% code coverage, are you then sure everything will work as expected? (i.e. there are no bugs) Why/why not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Well obviously no! Because even if all your classes have 100% coverage, that still doesn’t mean they will correctly interact with each other.&lt;/p&gt;

&lt;p&gt;For instance your JSON parser could get an unexpected response back from the web server. (Note that this is typically something you address with integration tests.)&lt;/p&gt;

&lt;h2 id=&quot;class-coverage&quot;&gt;Class coverage&lt;/h2&gt;
&lt;p&gt;Let’s narrow down the scope and look at one single very focussed class e.g. a Calculator class.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If one single focussed class has 100% code coverage, are you then sure everything will work as expected for that class? (i.e. there are no bugs) Why/why not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Mmmmm trickier…&lt;/p&gt;

&lt;p&gt;But the answer is still clearly no!&lt;/p&gt;

&lt;p&gt;This is because code coverage doesn’t tell you anything about the quality of your tests. It only counts what lines of code are executed during tests and what aren’t.&lt;/p&gt;

&lt;p&gt;A good Calculator test (with 100% line coverage) would be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfOneAndThreeShouldBeFour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But even the same test without assert would result in 100% line coverage:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfOneAndThreeShouldBeFourWithoutAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That test is just plain useless! It doesn’t prevent you from changing the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt; at all.&lt;/p&gt;

&lt;h2 id=&quot;code-coverage--quality-of-tests&quot;&gt;Code coverage != quality of tests&lt;/h2&gt;
&lt;p&gt;So if we remove all asserts from our test suite, our code coverage would remain the same. Interesting… what else is broken with code coverage?&lt;/p&gt;

&lt;p&gt;Even if you have asserts, code coverage doesn’t guarantee that you’ve covered your functionality. For instance if we change our &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; class and hardcode the result of the sum:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All above tests would still pass, code coverage would be 100% but your code doesn’t functionally do what it should. We would need to add multiple tests (covering the same line of code) to guarantee that.&lt;/p&gt;

&lt;p&gt;So coverage doesn’t ensure your tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;do an actual assert&lt;/li&gt;
  &lt;li&gt;are complete (cover all functionality)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;use-for-coverage&quot;&gt;Use for coverage&lt;/h2&gt;
&lt;p&gt;Hopefully it is clear now that you should never use code coverage as a goal or KPI (key performance indicator). This is because the tool can too easily be fooled and 100% coverage is in that regard meaningless.&lt;/p&gt;

&lt;p&gt;Even if coverage wouldn’t be flawed, it still would be a mistake to try and get 100% coverage. While everything can be tested, not everything is easy to test!&lt;/p&gt;

&lt;p&gt;Think about UI animations, communication between Threads, operations on filesystem,…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/coverageproblem/effortvalue.png&quot; alt=&quot;Everything can be tested, but at some point the effort gets bigger than the value you could get out of those tests.&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trying to test complex things doesn’t just take way to much effort. The resulting tests usually also tend to be so complex that they will end up being a maintenance burden. Wasted effort with hardly any value in return.&lt;/p&gt;

&lt;p&gt;Well then, how should you use coverage?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The real value is in the evolution of code coverage over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assume the team is proficient in writing &lt;a href=&quot;https://jeroenmols.com/blog/2017/02/16/unittests/&quot;&gt;high quality tests&lt;/a&gt; and has the ambition to have everything well tested, then code coverage shouldn’t decrease right?&lt;/p&gt;

&lt;p&gt;Why not use it to identify parts of your app that should get some extra testing love?&lt;/p&gt;

&lt;p&gt;Or how about automatically adding a coverage report to every pull request? This is something I do for all my &lt;a href=&quot;https://github.com/JeroenMols/LandscapeVideoCamera/pull/49&quot;&gt;open source projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/coverageproblem/coveragereport.png&quot; alt=&quot;Code coverage on pull requests&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the next time your boss asks you to have 100% code coverage, you know what to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;generate all your tests using a &lt;a href=&quot;https://plugins.jetbrains.com/plugin/8326-generate-tests&quot;&gt;tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;claim your bonus&lt;/li&gt;
  &lt;li&gt;go back to doing proper engineering and empower yourself with coverage to build something your proud of.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Code coverage can be an incredibly powerful tool to improve the quality of your code as long as you don’t blindly optimize for maximum coverage.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=the100%codecoverageproblem2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="testing" /><category term="coverage" /><summary type="html">While you may be tempted to strive for 100% code coverage, that would be a horrible idea. Besides some code being hard to test, the concept of coverage is actually fundamentally limited.</summary></entry><entry><title type="html">Droidcon UK slides</title><link href="https://jeroenmols.com/blog/2017/10/27/droidconuk/" rel="alternate" type="text/html" title="Droidcon UK slides" /><published>2017-10-27T00:00:00+02:00</published><updated>2017-10-27T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/10/27/droidconuk</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/10/27/droidconuk/">&lt;p&gt;Had a blast visiting Droidcon UK this year and wanted to do a quick post to link to all of it’s wonderful content.&lt;/p&gt;

&lt;h2 id=&quot;conference-slides&quot;&gt;Conference slides&lt;/h2&gt;
&lt;p&gt;While you can find all recordings &lt;a href=&quot;https://skillsmatter.com/conferences/8265-droidcon-london-2017#skillscasts&quot;&gt;here&lt;/a&gt;, I often find it useful to be able to quickly scan through the slides. Hence I bundled everything I could already from socials.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jeroenmols/deep-into-the-iot-trenches-how-to-build-a-connected-product&quot;&gt;IoT from the trenches - How to build a connected product&lt;/a&gt; by Jeroen Mols&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/colabug/the-creative-technologist&quot;&gt;The Creative Technologist!&lt;/a&gt; by Corey Latislaw&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://photos.google.com/share/AF1QipPv2vuQuVln5ASkKskgxIGWvh5E_Gtx4rEQR9GW1USQAo0ir0-msywha4mcA8Vzgg?key=NllER3QwalRjTXN4alRzejJtdExYV054ajlhd3VB&quot;&gt;Vector Workflows&lt;/a&gt; by Nick Butcher&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/erikhellman/my-app-is-smarter-than-your-app&quot;&gt;My app is smarter than your app&lt;/a&gt; by Erik Hellman&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jakewharton/sinking-your-teeth-into-bytecode-droidcon-uk-2017&quot;&gt;Sinking your teeth into byte code&lt;/a&gt; by Jake Wharton&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/lisawray/tips-for-library-development-from-a-startup-developer&quot;&gt;Tips for Library Development from a Startup Developer&lt;/a&gt; by Lisa Wray&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/igorwojda/why-do-we-need-clean-architecture&quot;&gt;Why do we need Clean Architecture&lt;/a&gt; by Igor Wojda&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://photos.google.com/share/AF1QipNFHDcQ8dYK_qMxCjPU4vp1mWQZUEYWHvLklKRAmruZ_z5xmQptv8WPsUjEH5_zlw?key=azg3OUFTUFV3d0xwaF9QTUllYUUybzhlcFZEckRR&quot;&gt;Becoming a master window fitter&lt;/a&gt; by Chris Banes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/maltzj/multiplying-your-impact-through-mentoring-droidcon-london-2017&quot;&gt;Multiplying your impact through mentoring&lt;/a&gt; by Jonathan Maltz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/fabio_collini/testing-android-apps-based-on-dagger-and-rxjava-droidcon-uk/1&quot;&gt;Testing Android apps based on Dagger and RxJava&lt;/a&gt; by
Fabio Collini&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/e/2PACX-1vRHA5uSq_Zn9qCg-Lx0BYWjDoIw3Cm8ui19MdLTDtfs54YjiQTjpsBLF1fCgXlGCJOBaYuf1QNCR170/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g280bfd46a0_0_17&quot;&gt;Poor programming patterns and how to avoid them&lt;/a&gt; by Alice Yuan&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/raulh82vlc/building-a-minimum-viable-product-mvp-with-face-recognition-and-ar-in-android-at-droidcon-london-2017&quot;&gt;Building a “Minimum Viable Product” (MVP) with Face recognition and AR in Android&lt;/a&gt; by Raul Hernandez Lopez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/stkent/bluetooth-low-energy-on-android-top-tips-for-the-tricky-bits-v3-droidcon-london&quot;&gt;Bluetooth Low Energy on Android: Top Tips for the Tricky Bits&lt;/a&gt; by Stuart Kent&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/nightlynexus/making-dogfood-builds-testable-and-fun&quot;&gt;Making Dogfood Builds Testable and Fun&lt;/a&gt; by Eric Cochran&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mplacona/these-are-a-few-of-my-favourite-android-things&quot;&gt;These are a few of my favourite (Android) Things&lt;/a&gt; by Marcos Placona&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/pakoito/short-about-memory-management-in-fully-reactive-apps&quot;&gt;About Memory Management in Fully Reactive Apps&lt;/a&gt; by Paco Estevez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/vrallev/doo-z-z-z-z-z-e&quot;&gt;Doo z z z z z e&lt;/a&gt; by Ralf Wondratschek‏&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/bmonjoie/droidconuk-2017-opengl-a-noobs-guide-for-android-developers&quot;&gt;OpenGL - A noob’s guide for Android developers&lt;/a&gt; by Benjamin Monjoie&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1hnWTlKi95_VhX1T0s4MnT0PrVq5bRutY2WsSvFARjh8/present?slide=id.g267d5be2b1_0_0&quot;&gt;Through the looking-glass eyes of an Android&lt;/a&gt; by Adrián Catalán&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/marianeum/travelling-across-asia-our-journey-from-java-to-kotlin&quot;&gt;Travelling across Asia - Our journey from Java to Kotlin&lt;/a&gt; by Amal Kakaiya and Maria Neumayer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitpitch.com/xgouchet/Talks/DroidconUK_AutoMergeTool&quot;&gt;Merge like it’s 2099&lt;/a&gt; by Xavier Gouchet&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/e/2PACX-1vRHA5uSq_Zn9qCg-Lx0BYWjDoIw3Cm8ui19MdLTDtfs54YjiQTjpsBLF1fCgXlGCJOBaYuf1QNCR170/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g280bfd46a0_0_17&quot;&gt;Poor programming patterns and how to avoid them&lt;/a&gt; by Alice Yuan&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/codingchick/android-internals-for-developers&quot;&gt;Android Internals for Developers&lt;/a&gt; by Effie Barak&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/tysmith/deep-android-integrations&quot;&gt;Deep Android Integrations&lt;/a&gt; by Ty Smith&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/gdglviv/britt-barak-when-your-apps-asleep&quot;&gt;When your app’s asleep&lt;/a&gt; by Britt Barak&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mauin/modularizing-android-applications&quot;&gt;Modularizing Android Applications&lt;/a&gt; by Marvin Ramin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jinqian/droidcon-london-heat-the-neurons-of-your-smartphone-with-deep-learning&quot;&gt;Heat the neurons of your smartphone with Deep Learning&lt;/a&gt; by Qian Jin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AgentK/kotlin-coroutines-and-android-sitting-in-a-tree&quot;&gt;Kotlin Coroutines and Android sitting in a tree&lt;/a&gt; by Kai Koenig&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/brompwnie/DroidConLondon2017/blob/master/Hacking%20Android.pdf&quot;&gt;Hacking Android, a Hacker’s narrative&lt;/a&gt; by Chris Le Roy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/e/2PACX-1vQ92zS6_X-ExPBTNO4uFfFOVee5NW3NZ0iYClzrvO_TTRmvNBNVSIfA7jQohOwn_lvsYWnoT7qk-URj/pub?start=false&amp;amp;loop=false&amp;amp;delayms=30000&amp;amp;slide=id.p&quot;&gt;Commonly overlooked areas of security&lt;/a&gt; By Clive Lee&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mallikapotter/accessibility-at-scale-droidcon-uk-2017&quot;&gt;Accessibility @ Scale&lt;/a&gt; by Mallika Potter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to the Skills Matter team for organizing a top notch conference! To all sponsors for making this event possible. And to the entire Android community for being so awesome!&lt;/p&gt;

&lt;p&gt;Hope to see you all next year!&lt;/p&gt;

&lt;p&gt;Helpful? Got extra slides? Hit me up on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=droidconukslides2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="conference" /><category term="droidconuk" /><summary type="html">Had a blast visiting Droidcon UK this year and wanted to do a quick post to link to all of it’s wonderful content.</summary></entry><entry><title type="html">The career opportunity called Kotlin</title><link href="https://jeroenmols.com/blog/2017/09/13/kotlinopportunity/" rel="alternate" type="text/html" title="The career opportunity called Kotlin" /><published>2017-09-13T00:00:00+02:00</published><updated>2017-09-13T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/09/13/kotlinopportunity</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/09/13/kotlinopportunity/">&lt;p&gt;This isn’t another post about the benefits of using Kotlin. Hell, I’m not even going to cover any of its language features. Nor will I try to convince you to make the switch.&lt;/p&gt;

&lt;p&gt;In contrast, this post will talk career. How learning a new language makes you a better developer and ensures you stay relevant. And in that regards, Kotlin now presents a golden opportunity.&lt;/p&gt;

&lt;h2 id=&quot;why-you-should-learn-a-new-programming-language&quot;&gt;Why you should learn a new programming language&lt;/h2&gt;
&lt;p&gt;Predicting the future is nearly impossible. But 10 years ago (2007) there where no smartphone apps… And 10 years before that (1997) well… dot-com bubble anyone?&lt;/p&gt;

&lt;p&gt;So how will the future look like in 10 years from now? Or 20 years?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only sure thing is that you’ll still be working as retirement age continues to be raised.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two things are likely to happen though:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Software will become even more ubiquitous than today&lt;/li&gt;
  &lt;li&gt;The platform you’re now developing for is no longer relevant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Differently put: your software skills will still be needed, but you’ll have to switch programming languages several times along the way.&lt;/p&gt;

&lt;p&gt;Say what?&lt;/p&gt;

&lt;p&gt;Learning a new programming language isn’t easy! And I will have to do that multiple times? Even when I’m 40 or 50?&lt;/p&gt;

&lt;p&gt;Yes, absolutely!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But here’s the thing: while there are hundreds of programming languages, &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2012/12/19/Three-Paradigms.html&quot;&gt;programming concepts are finite&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And with every language you learn, you pick up a couple extra of those concepts.&lt;/p&gt;

&lt;p&gt;So while learning your first programming language is really time consuming. Your second will already go slightly smoother and after your third you’ll realize: “Hey Kotlin coroutines are like C# async/await, but then slightly different”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Learning a new language becomes easier with every language you learn. And every time you learn a new language, your horizon broadens and you pick up tons of new widely applicable software concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;challenges-in-learning-a-new-language&quot;&gt;Challenges in learning a new language&lt;/h2&gt;
&lt;p&gt;While the previous statement may be true, you hardly ever learn a programming language alone.&lt;/p&gt;

&lt;p&gt;For instance while learning Android you need to learn the core platform concepts (e.g. activity lifecycle), environment (e.g battery constraints), Android APIs, …&lt;/p&gt;

&lt;p&gt;And that’s just to get you started. If you really want to get productive you’ll also have to figure out what 3rd party libraries to use, how to get the most out of the IDE and especially how to write tests effectively.&lt;/p&gt;

&lt;p&gt;So imagine you want to learn how to build a web app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What technology do you use? Ruby on rails, Javascript,…?&lt;/li&gt;
  &lt;li&gt;What Javascript framework should you use?&lt;/li&gt;
  &lt;li&gt;How does a DOM work?&lt;/li&gt;
  &lt;li&gt;Do I use a text editor or are there any good IDE’s?&lt;/li&gt;
  &lt;li&gt;How/where do I deploy my web app?&lt;/li&gt;
  &lt;li&gt;How can I find the answers to my problems?&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s a lot to take in, right?&lt;/p&gt;

&lt;p&gt;Learning all of this at once can easily become a very frustrating experience. You’ll manage, I’m sure, but it will take you quite some time before you’ll become productive.&lt;/p&gt;

&lt;h2 id=&quot;why-your-next-language-should-be-kotlin&quot;&gt;Why your next language should be Kotlin&lt;/h2&gt;
&lt;p&gt;Here’s where Kotlin enters the game. Suddenly every Android developer has gotten the opportunity to learn a new, modern language inside of his/her already familiar cocoon.&lt;/p&gt;

&lt;p&gt;You’re already used to every Android problem you may encounter. You know the ins and outs of Android studio. And I’ll be damned if you’re not a StackOverflow wizard by now!&lt;/p&gt;

&lt;p&gt;So grab the opportunity to learn a new language without it being too frustrating. Learn those extra programming concepts that will remain relevant throughout your entire career. Have your horizon broadened by new concepts and ways of thinking.&lt;/p&gt;

&lt;p&gt;I’m not saying you must learn Kotlin. But learning a new programming language is inevitable if you’re aspiring a technical career. And Kotlin presents a damn fine opportunity to keep your sanity while you’re at it.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Learning a new programming language is essential in staying relevant as a software developer. Thanks to Kotlin, Android developers can now learn a new language without the frustration of all boilerplate around it.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=thecareeropportunitycalledkotlin2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="kotlin" /><category term="career" /><summary type="html">This isn’t another post about the benefits of using Kotlin. Hell, I’m not even going to cover any of its language features. Nor will I try to convince you to make the switch.</summary></entry><entry><title type="html">Embracing Java 8 language features</title><link href="https://jeroenmols.com/blog/2017/07/21/java8language/" rel="alternate" type="text/html" title="Embracing Java 8 language features" /><published>2017-07-21T00:00:00+02:00</published><updated>2017-07-21T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/07/21/java8language</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/07/21/java8language/">&lt;p&gt;For years Android developers have been limited to Java 6 features. While RetroLambda or the experimental Jack toolchain would help, proper support from Google was notably missing.&lt;/p&gt;

&lt;p&gt;Finally, Android Studio 3.0 brings (backported!) support for most Java 8 features. Continue reading to learn how those work and why you should upgrade.&lt;/p&gt;

&lt;h2 id=&quot;enabling-java-8-features&quot;&gt;Enabling java 8 features&lt;/h2&gt;
&lt;p&gt;While Android Studio already supported many features in the &lt;a href=&quot;https://developer.android.com/guide/platform/j8-jack.html&quot;&gt;Jack toolchain&lt;/a&gt;, starting from Android Studio 3.0 they are supported in the default toolchain.&lt;/p&gt;

&lt;p&gt;First of all, make sure you disable Jack by removing the following from your main &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Remove the jackOptions if they exist&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jackOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And add the following configuration instead:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_1_8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;targetCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_1_8&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also make sure you have the latest Gradle plugin in your root &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.tools.build:gradle:3.0.0-alpha7'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations, you can now use most Java 8 features on all API levels!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: In case you’re migrating from &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot;&gt;RetroLambda&lt;/a&gt;, the official documentation has a more extensive &lt;a href=&quot;https://developer.android.com/studio/write/java8-support.html#migrate&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lambdas&quot;&gt;Lambda’s&lt;/h2&gt;
&lt;p&gt;Passing a listener to another class in Java 6 is quite verbose. A typical case would be where you add an &lt;code class=&quot;highlighter-rouge&quot;&gt;OnClickListener&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lambda’s can dramatically simplify this to the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that almost all boilerplate is removed: no access modifier, no return type and no method name!&lt;/p&gt;

&lt;p&gt;Now how do lambda’s actually work?&lt;/p&gt;

&lt;p&gt;They are syntactic sugar that reduce the need for anonymous class creation whenever you have an interface with exactly one method. We call such interfaces functional interfaces and &lt;code class=&quot;highlighter-rouge&quot;&gt;OnClickListener&lt;/code&gt; is an example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// A functional interface has exactly one method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnClickListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically the lambda consists out of a three parts:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;declaration of all method arguments between brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an arrow &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;code that needs to execute between brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that in many cases even the brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; can be removed. For more details have a look at the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;method-references&quot;&gt;Method references&lt;/h2&gt;
&lt;p&gt;Recall that lambda expressions remove a lot of boilerplate code for functional interfaces. Method references take that concept one step further when the lambda calls a method that already has a name.&lt;/p&gt;

&lt;p&gt;In the following example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All the lambda does is redirecting the work to an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;doSomething()&lt;/code&gt; method. In such a case, a method reference simplifies things further to:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the referenced method must take exactly the same parameters as the functional interface:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// functional interface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnClickListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// referenced method: must take View as argument, because onClick() does&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how do method references work?&lt;/p&gt;

&lt;p&gt;They are again syntactic sugar to simplify a lambda expression that invokes an existing method. They can reference to:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;static methods&lt;/td&gt;
      &lt;td&gt;MyClass::doSomething&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;instance method of object&lt;/td&gt;
      &lt;td&gt;myObject::doSomething&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;MyClass:: new&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;instance method of any argument type&lt;/td&gt;
      &lt;td&gt;String::compare&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more examples about this have a look at the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;default-interface-methods&quot;&gt;Default interface Methods&lt;/h2&gt;
&lt;p&gt;Default methods make it possible to add new methods to an interface without breaking all classes that implement that interface.&lt;/p&gt;

&lt;p&gt;Imagine if you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;MyView&lt;/code&gt; interface that is implemented by a &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFragment&lt;/code&gt; (typical MVP scenario):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you now want to add an extra method to &lt;code class=&quot;highlighter-rouge&quot;&gt;MyView&lt;/code&gt; your code will no longer compile, until &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFragment&lt;/code&gt; also implements that new method. This is annoying, and can be even problematic when many classes are implementing said interface.&lt;/p&gt;

&lt;p&gt;Therefore Java 8 now allows you to define default methods that provide a standard implementation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hideProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something here&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how do default methods work?&lt;/p&gt;

&lt;p&gt;Just define a method with the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; keyword in the interface and provide an actual default method body.&lt;/p&gt;

&lt;p&gt;To learn more about this feature, have a look at the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-started&quot;&gt;How to get started&lt;/h2&gt;
&lt;p&gt;While this all might seem a bit overwhelming, Android Studio actually offers amazing quick fixes once you enable Java 8 features.&lt;/p&gt;

&lt;p&gt;Just use &lt;code class=&quot;highlighter-rouge&quot;&gt;alt/option&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;enter&lt;/code&gt; to convert a functional interface to a lamba or a lambda to a method reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/java8language/androidstudioconversion.gif&quot; alt=&quot;Java 8 language quick fixes&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a great way to get familiar with these new features and allows you to write code like you’re used to. After enough quick fixes by Android Studio you’ll learn in what cases a lambda or method reference would be possible and start writing them yourself.&lt;/p&gt;

&lt;h2 id=&quot;supported-features&quot;&gt;Supported features&lt;/h2&gt;
&lt;p&gt;While not all Java 8 features have been backported yet, Android Studio 3.0 offers plenty more features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;static interface methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html&quot;&gt;type annotations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html&quot;&gt;repeating annotations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&quot;&gt;try with resources&lt;/a&gt; (all versions, no longer min SDK 19)&lt;/li&gt;
  &lt;li&gt;Java 8 APIs (e.g. stream) -&amp;gt; min SDK 24&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Thanks to Java 8 features, a lot of code can be simplified into lambda’s or method references. Android Studio auto convert is the easiest way to start learning these features.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=embracingjava8languagefeatures2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="tools" /><category term="java" /><summary type="html">For years Android developers have been limited to Java 6 features. While RetroLambda or the experimental Jack toolchain would help, proper support from Google was notably missing.</summary></entry></feed>