<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://jeroenmols.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jeroenmols.com/" rel="alternate" type="text/html" /><updated>2022-11-26T21:39:10+01:00</updated><id>https://jeroenmols.com/feed.xml</id><title type="html">Jeroen Mols</title><subtitle>Blog and portfolio of Jeroen Mols, Software developer at Plaid and Google Developer Expert.</subtitle><author><name>Jeroen Mols</name></author><entry><title type="html">Verify Github profile link on Mastodon</title><link href="https://jeroenmols.com/blog/2022/11/26/mastodon-verify-github/" rel="alternate" type="text/html" title="Verify Github profile link on Mastodon" /><published>2022-11-26T00:00:00+01:00</published><updated>2022-11-26T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/11/26/mastodon-verify-github</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/11/26/mastodon-verify-github/"><![CDATA[<p>Looking to get a fancy verified checkmark on Mastodon for your Github account?</p>

<p>This post details how I made this work.</p>

<h2 id="steps">Steps</h2>
<blockquote>
  <p>Before I get started, huge thanks to <a href="https://fedi.simonwillison.net/@simon">Simon Wilson</a> for inspiring me with the original idea.</p>
</blockquote>

<p>In his <a href="https://til.simonwillison.net/mastodon/verifying-github-on-mastodon">excellent post</a> Simon details how to leverage the <code class="language-plaintext highlighter-rouge">your-username.github.io</code> static webpage to prove Github domain ownership.</p>

<p>The idea is that proving I own <code class="language-plaintext highlighter-rouge">jeroenmols.github.io</code> is equivalent to proving ownership of <code class="language-plaintext highlighter-rouge">github.com/jeroenmols</code>.</p>

<p>However, I can’t simply redirect <a href="https://jeroenmols.github.io">jeroenmols.github.io</a> to my Github profile as I already host my <a href="https://jeroenmols.com">my personal website</a> on that domain. (I use a <a href="https://github.com/JeroenMols/jeroenmols.github.io/blob/master/CNAME">CNAME record</a> to make both domains equivalent).</p>

<p>Consequently, Simon’s approach didn’t work for me. Now what?</p>

<p>Well instead of redirecting the entire domain, I decided to redirect a sub-page. To do this, I:</p>

<ol>
  <li>Added a new page <code class="language-plaintext highlighter-rouge">https://jeroenmols.com/github</code></li>
  <li>Included the Mastodon verification tag: <code class="language-plaintext highlighter-rouge">&lt;link href="https://androiddev.social/@jeroenmols" rel="me"&gt;</code></li>
  <li>Have the page redirect to my Github profile</li>
  <li>Use the domain <code class="language-plaintext highlighter-rouge">jeroenmols.github.io/github</code> on my Mastodon profile</li>
</ol>

<p>The webpage content looks like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Redirecting to github.com/jeroenmols /<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"refresh"</span> <span class="na">content=</span><span class="s">"0; URL=https://github.com/jeroenmols"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://github.com/jeroenmols"</span> <span class="na">rel=</span><span class="s">"me"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://jeroenmols.com"</span> <span class="na">rel=</span><span class="s">"me"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"https://androiddev.social/@jeroenmols"</span> <span class="na">rel=</span><span class="s">"me"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>And my <a href="https://androiddev.social/@Jeroenmols">Mastodon profile</a>, now looks like this:</p>

<p><img src="https://jeroenmols.com/img/blog/mastodonverifygithub/mastodon-profile.png" alt="Mastondon profile" class="align-center" /></p>

<p>That’s it!</p>

<p>If this was helpful to you, consider <a href="https://www.buymeacoffee.com/jeroen">buying me a coffee</a> or thanking me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a> or <a href="https://twitter.com/molsjeroen">Twitter</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="mastodon" /><category term="github" /><category term="tips" /><summary type="html"><![CDATA[Looking to get a fancy verified checkmark on Mastodon for your Github account?]]></summary></entry><entry><title type="html">Test React app on mobile without Wi-Fi</title><link href="https://jeroenmols.com/blog/2022/11/19/react-local-development/" rel="alternate" type="text/html" title="Test React app on mobile without Wi-Fi" /><published>2022-11-19T00:00:00+01:00</published><updated>2022-11-19T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/11/19/react-local-development</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/11/19/react-local-development/"><![CDATA[<p>Traveling by train or plane and want to test your react app on your mobile phone? This quick post explains how to access your react development server from your phone without a Wi-Fi connection.</p>

<h2 id="steps">Steps</h2>

<ol>
  <li>Connect your phone to your laptop using a USB cable</li>
  <li>Enable <code class="language-plaintext highlighter-rouge">USB tethering</code>
    <ul>
      <li>Android: System settings &gt; Network &amp; internet &gt; Hotspot &amp; tethering &gt; USB tethering</li>
    </ul>
  </li>
  <li>Start your react server on your laptop <code class="language-plaintext highlighter-rouge">npm start</code></li>
  <li>Open your servers <code class="language-plaintext highlighter-rouge">ip:port</code> on your phone</li>
</ol>

<p>That’s it!</p>

<p>If this was helpful to you, consider <a href="https://www.buymeacoffee.com/jeroen">buying me a coffee</a> or thanking me on <a href="https://androiddev.social/@Jeroenmols">Mastodon</a> or <a href="https://twitter.com/molsjeroen">Twitter</a>!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="react" /><category term="offline" /><category term="tips" /><summary type="html"><![CDATA[Traveling by train or plane and want to test your react app on your mobile phone? This quick post explains how to access your react development server from your phone without a Wi-Fi connection.]]></summary></entry><entry><title type="html">The curious case of crashing Workers</title><link href="https://jeroenmols.com/blog/2022/04/27/workmanager-crash/" rel="alternate" type="text/html" title="The curious case of crashing Workers" /><published>2022-04-27T00:00:00+02:00</published><updated>2022-04-27T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2022/04/27/workmanager-crash</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/04/27/workmanager-crash/"><![CDATA[<p>WorkManager is great to schedule background work on Android. However, since scheduled work lives outside of the app lifecycle, you might run into unexpected crashes.</p>

<p>Read on to learn why and how to prevent this.</p>

<h2 id="how-to-crash-workmanager">How to crash WorkManager</h2>
<p>Reading <a href="https://developer.android.com/topic/libraries/architecture/workmanager">the documentation</a>, it is clear that <code class="language-plaintext highlighter-rouge">WorkManager</code> is a worry-free solution to background work:</p>

<blockquote>
  <p>WorkManager is the recommended solution for persistent work. Work is persistent when it remains scheduled through app restarts and system reboots.</p>
</blockquote>

<p>That’s very neat!</p>

<p>So if we schedule some work, for instance upload a crash:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">workerClass</span> <span class="p">=</span> <span class="nc">CrashUploadWorker</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span>
<span class="nc">WorkManager</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="nc">OneTimeWorkRequest</span><span class="p">.</span><span class="nc">Builder</span><span class="p">(</span><span class="n">workerClass</span><span class="p">).</span><span class="nf">build</span><span class="p">())</span>
</code></pre></div></div>

<p>We can be sure that WorkManager will handle it for us, even when the app closes it self immediately after the crash.</p>

<p>However, <code class="language-plaintext highlighter-rouge">WorkManager</code> assumes that the <code class="language-plaintext highlighter-rouge">Worker</code> class will always exist in our application. So if we ship a new version of our application that either:</p>

<ul>
  <li>removes the <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code></li>
  <li>renames the <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code> to <code class="language-plaintext highlighter-rouge">CrashReportWorker</code></li>
  <li>moves the <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code> to a new package</li>
</ul>

<p>We might get a <code class="language-plaintext highlighter-rouge">ClassNotFoundException</code> crash after installing the update!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java.lang.Error: java.lang.ClassNotFoundException: com.example.CrashUploadWorker
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1119)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
        at java.lang.Thread.run(Thread.java:818)
</code></pre></div></div>

<p>This happens, because <code class="language-plaintext highlighter-rouge">WorkManager</code> lives in a separate process (Google Play Services) and will always try to complete its work. It will try to instantiate <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code>, but that no longer exists in our application.</p>

<p>Unfortunately <a href="https://github.com/plaid/plaid-link-android/issues/201">I had to learn this the hard way</a>.</p>

<blockquote>
  <p>Notice the usage of “might”: a crash isn’t guaranteed and will only happen if there was unfinished work pending while the app got updated.</p>
</blockquote>

<h2 id="how-not-to-crash-workmanager">How not to crash WorkManager</h2>
<p>The first thing you can try is to cancel all pending work for the <code class="language-plaintext highlighter-rouge">Worker</code> you removed/renamed:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">workManager</span><span class="p">.</span><span class="nf">cancelAllWorkByTag</span><span class="p">(</span><span class="s">"crash_upload"</span><span class="p">)</span>
</code></pre></div></div>

<p>This approach can be subject to race conditions as <code class="language-plaintext highlighter-rouge">Workmanager</code> might still retry to execute the scheduled work before you had the chance to cancel. (depending on where you call this)</p>

<p>Another downside of this approach is that this will drop scheduled work, causing data loss. Depending on your unique use case that may or may not be acceptable.</p>

<p>An alternative approach is to keep the original <code class="language-plaintext highlighter-rouge">CrashUploadWorker</code> class and modify that to handle the changing requirements:</p>

<ul>
  <li>drop the work (empty implementation)</li>
  <li>migrate and schedule the new worker class</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">internal</span> <span class="kd">class</span> <span class="nc">CrashUploadWorker</span><span class="p">(</span>
  <span class="n">appContext</span><span class="p">:</span> <span class="nc">Context</span><span class="p">,</span>
  <span class="n">workerParams</span><span class="p">:</span> <span class="nc">WorkerParameters</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">CoroutineWorker</span><span class="p">(</span><span class="n">appContext</span><span class="p">,</span> <span class="n">workerParams</span><span class="p">)</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">doWork</span><span class="p">():</span> <span class="nc">Result</span> <span class="p">{</span>
    <span class="c1">// Schedule new worker class</span>
    <span class="kd">val</span> <span class="py">workerClass</span> <span class="p">=</span> <span class="nc">CrashReportWorker</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span>
    <span class="nc">WorkManager</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="n">appContext</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="nc">OneTimeWorkRequest</span><span class="p">.</span><span class="nc">Builder</span><span class="p">(</span><span class="n">workerClass</span><span class="p">).</span><span class="nf">build</span><span class="p">())</span>
    <span class="k">return</span> <span class="nc">Result</span><span class="p">.</span><span class="nf">success</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Once you stop scheduling work using the old <code class="language-plaintext highlighter-rouge">Worker</code>, you can mark it to be removed after all your customers have updated and migrated.</p>

<p>Finally, here’s what a migration plan could look like:</p>

<ul>
  <li>Release 1: Add new worker and migrate all work</li>
  <li>Release 5: Cancel all remaining work using old <code class="language-plaintext highlighter-rouge">Worker</code> (causes data loss!)</li>
  <li>Release 10: Remove old <code class="language-plaintext highlighter-rouge">Worker</code> (causes crashes!)</li>
</ul>

<h2 id="using-workerfactory">Using WorkerFactory</h2>
<p>An alternative approach is to provide a custom <code class="language-plaintext highlighter-rouge">WorkerFactory</code> to handle the migration to the new class.</p>

<blockquote>
  <p>Thanks to <a href="https://twitter.com/pfmaggi">Pietro Maggi</a> and Steffan Davies for suggesting this approach</p>
</blockquote>

<p>To do so, first <a href="https://developer.android.com/topic/libraries/architecture/workmanager/advanced/custom-configuration#on-demand">disable automatic <code class="language-plaintext highlighter-rouge">WorkManager</code> initialization</a>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;provider</span>
   <span class="na">android:name=</span><span class="s">"androidx.startup.InitializationProvider"</span>
   <span class="na">android:authorities=</span><span class="s">"${applicationId}.androidx-startup"</span>
   <span class="na">android:exported=</span><span class="s">"false"</span>
   <span class="na">tools:node=</span><span class="s">"merge"</span><span class="nt">&gt;</span>
   <span class="c">&lt;!-- If you are using androidx.startup to initialize other components --&gt;</span>
   <span class="nt">&lt;meta-data</span>
       <span class="na">android:name=</span><span class="s">"androidx.work.WorkManagerInitializer"</span>
       <span class="na">android:value=</span><span class="s">"androidx.startup"</span>
       <span class="na">tools:node=</span><span class="s">"remove"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/provider&gt;</span>
</code></pre></div></div>

<p>Then initialize the <code class="language-plaintext highlighter-rouge">WorkManager</code> in your <code class="language-plaintext highlighter-rouge">Application#onCreate</code> or <code class="language-plaintext highlighter-rouge">ContentProvider</code>:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">configuration</span> <span class="p">=</span> <span class="nc">Configuration</span><span class="p">.</span><span class="nc">Builder</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">setWorkerFactory</span><span class="p">(</span><span class="nc">MigrateWorkerFactory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">build</span><span class="p">()</span>
<span class="nc">WorkManager</span><span class="p">.</span><span class="nf">initialize</span><span class="p">(</span><span class="n">appContext</span><span class="p">,</span> <span class="n">configuration</span><span class="p">)</span>
</code></pre></div></div>

<p>And create your own <a href="https://developer.android.com/reference/androidx/work/WorkerFactory"><code class="language-plaintext highlighter-rouge">WorkerFactory</code></a> that schedules the new worker:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MigrateWorkerFactory</span><span class="p">()</span> <span class="p">:</span> <span class="nc">WorkerFactory</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">createWorker</span><span class="p">(</span>
    <span class="n">appContext</span><span class="p">:</span> <span class="nc">Context</span><span class="p">,</span>
    <span class="n">workerClassName</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">workerParameters</span><span class="p">:</span> <span class="nc">WorkerParameters</span>
  <span class="p">):</span> <span class="nc">ListenableWorker</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">workerClassName</span> <span class="p">=</span> <span class="s">"com.example.CrashUploadWorker"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nc">CrashReportWorker</span><span class="p">(</span><span class="n">appContext</span><span class="p">,</span> <span class="n">workerParameters</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="o">..</span><span class="p">.</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This has the upside of not needing to keep the old <code class="language-plaintext highlighter-rouge">Worker</code> class around, but comes with some extra complexity of manual <code class="language-plaintext highlighter-rouge">WorkManager</code> initialization.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p><code class="language-plaintext highlighter-rouge">WorkManager</code> is a very handy tool to handle background work, but be careful with removing or renaming <code class="language-plaintext highlighter-rouge">Workers</code>.</p>

<p>If you’ve made it this far you should probably <span><a href="https://twitter.com/molsjeroen?source=thecuriouscaseofcrashingworkers2022" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="workmanager" /><category term="crash" /><summary type="html"><![CDATA[WorkManager is great to schedule background work on Android. However, since scheduled work lives outside of the app lifecycle, you might run into unexpected crashes.]]></summary></entry><entry><title type="html">No, your pull request does not need a review</title><link href="https://jeroenmols.com/blog/2022/02/23/pull-request-reviews/" rel="alternate" type="text/html" title="No, your pull request does not need a review" /><published>2022-02-23T00:00:00+01:00</published><updated>2022-02-23T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2022/02/23/pull-request-reviews</id><content type="html" xml:base="https://jeroenmols.com/blog/2022/02/23/pull-request-reviews/"><![CDATA[<p>In the past years, my thoughts on pull request reviews have evolved considerably. Given that creating and reviewing pull requests are a core part of our work, let’s talk about those.</p>

<p>This post will detail when to craft a pull request and what pull requests require a code review.</p>

<h2 id="when-to-craft-a-pull-request">When to craft a pull request</h2>
<blockquote>
  <p>Always.</p>
</blockquote>

<p>Starting with the easiest part: every code change requires a pull request. This is mainly for two reasons:</p>

<ol>
  <li>Code quality</li>
  <li>Provide additional context</li>
</ol>

<h3 id="1-code-quality">1. Code quality</h3>
<p>Your team likely wants to establish a common baseline of quality.</p>

<p>For this most teams use a set of automated checks that are executed on every pull request. These can verify that the code builds, tests pass, test coverage does not decrease, app size is within certain limits, …</p>

<p>However, some checks can also be manual, such as a checklist on the pull request template. These nudge developers to avoid unrelated changes, do a self-review, add clear descriptions, steps to test the changes, …</p>

<h3 id="2-provide-additional-context">2. Provide additional context</h3>
<p>Writing a pull request is a useful form of documentation. It allows additional context to code changes such as why the changes are required and what alternatives were considered.</p>

<p>For bugs, you can elaborate on the steps to reproduce, a stack trace of the issue, and what steps others can follow to verify the proposed solution. Adding before/after screenshots can be incredibly helpful in reviewing UI changes.</p>

<p>Finally, draft pull requests can be a tool to compare alternatives or an effective way to convey your design ideas to others.</p>

<h2 id="when-your-pull-request-requires-a-review">When your pull request requires a review</h2>
<blockquote>
  <p>For all significant, non-critical code changes.</p>
</blockquote>

<p>While you might have expected an <code class="language-plaintext highlighter-rouge">always</code> here, I can at least think of two scenarios where pull request reviews might be skipped:</p>

<ol>
  <li>Trivial code</li>
  <li>High urgency changes</li>
</ol>

<h3 id="1-trivial-code">1. Trivial code</h3>
<p>Some code changes are straightforward, such as bumping the app version. Would you want to hold off your release until a team member finds the time to review the following?</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code> defaultConfig {
<span class="gd">-    versionName "1.3.0"
</span><span class="gi">+    versionName "1.3.1"
</span>     ...
 }
</code></pre></div></div>

<p>But why stop there?</p>

<p>How about committing the output of automatic scripts? Examples are adding new translations, updating the <a href="https://developers.google.com/protocol-buffers/">Protobuf</a> definitions, or tweaking assets.</p>

<p>Far too often have I had to disrupt a colleague’s “flow” for a “quick stamp” on a particular pull request. Whereas in reality, our default automated checks would have been sufficient.</p>

<h3 id="2-high-urgency-changes">2. High urgency changes</h3>
<p>What if, despite all processes, main is suddenly broken?</p>

<p>A common scenario for me is that end-to-end tests suddenly start failing. Either due to a backend change or due to a change on <a href="https://firebase.google.com/docs/test-lab/">Firebase tests lab</a>. In this case, main will still compile, but the builds for all open pull requests would fail.</p>

<p><a href="https://jeroenmols.com/img/blog/pullrequestreview/failed_builds.png"><img src="https://jeroenmols.com/img/blog/pullrequestreview/failed_builds.png" alt="All pull request builds are failing due to an issue with the end-to-end tests" /></a></p>

<p>An even worse situation is when two incompatible changes are merged, breaking main compilation as a result. That is even more impactful as it also breaks compilation for all developers starting from or rebasing onto the latest main.</p>

<p>Given such an impact, should you wait for approval before merging the fix?</p>

<p>Let’s think about the worst-case scenario:</p>

<ol>
  <li>main breaks</li>
  <li>someone on the team implements a very hacky fix</li>
  <li>person opens pull request (mandatory!)</li>
  <li>all automated checks pass</li>
  <li>merge the fix into main and builds turn green</li>
</ol>

<p>Now there’s a very hacky fix in main, but builds are green. Did that fix improve the situation? Yes. Should that fix stay in main forever? Of course not.</p>

<p>We need to accept that software is never finished, and it will always continue to evolve. So after the quick patch, other team members can chime in, offer suggestions and follow up with another pull request containing a more sustainable solution.</p>

<h3 id="compounding-factors">Compounding factors</h3>
<p>In some situations, requiring reviews can be especially frustrating:</p>

<ul>
  <li>remote work: unable to tap a colleague on her shoulder for a quick review</li>
  <li>asynchronous work: my colleagues are 9 (!) time zones apart from me</li>
  <li>foundational tasks: e.g. update protobufs, so you can build your new feature on top</li>
</ul>

<h2 id="interesting-idea-but-it-wont-work-at-our-scale">Interesting idea, but it won’t work at our scale</h2>
<p>That might be true, I haven’t tested this out on a 100+ people project. And given that my proposal relies more on developer trust, I could see some scaling challenges.</p>

<p>However, I would question whether your scale challenges are unique.</p>

<p>Don’t all processes run into scaling issues as teams grow? Can’t we just apply our usual solutions?</p>

<p>Few ideas:</p>

<ul>
  <li>Tools can determine whether a PR needs a review based on predefined requirements</li>
  <li>Tools can enforce providing a rationale when a PR is merged without review. This can even be broadcasted (Slack) to all team members</li>
  <li>Some trivial changes could be fully automated: e.g. continuously integrating new translations or assets</li>
  <li>Code ownership can restrict who can skip reviews for certain parts of the code base,…</li>
  <li>…</li>
</ul>

<p>Regardless of my suggestions, removing frustrations from your development process is one of the most impactful things you can do.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p>All code changes require a pull request before they are merged. Code reviews are encouraged, but they can be skipped for trivial or highly urgent changes.</p>

<p>If you’ve made it this far you should probably <span><a href="https://twitter.com/molsjeroen?source=no,yourpullrequestdoesnotneedareview2022" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="pull request" /><category term="code review" /><category term="process" /><category term="team" /><summary type="html"><![CDATA[In the past years, my thoughts on pull request reviews have evolved considerably. Given that creating and reviewing pull requests are a core part of our work, let’s talk about those.]]></summary></entry><entry><title type="html">Migrate existing library artifacts from JCenter to Maven Central</title><link href="https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral/" rel="alternate" type="text/html" title="Migrate existing library artifacts from JCenter to Maven Central" /><published>2021-03-24T00:00:00+01:00</published><updated>2021-03-24T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral</id><content type="html" xml:base="https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral/"><![CDATA[<p>With JCenter shutting down, many are migrating to Maven Central. And while there are many posts on how to publish new artifacts, also all existing artifacts should be migrated away from JCenter.</p>

<p>This post will cover all steps required to migrate artifacts from JCenter to Maven Central. It will present a script to automatically perform such a migration so that it can be run on a CI and have the secrets injected.</p>

<h2 id="required-before-you-start">Required before you start</h2>
<p>To migrate an existing project to Maven Central involves two steps:</p>

<ol>
  <li>Update (Gradle) scripts to publish to Maven Central</li>
  <li>Migrate all existing artifacts from JCenter to Maven Central</li>
</ol>

<p>This post will only cover the second step and hence assumes that the reader has a <a href="https://issues.sonatype.org/secure/Dashboard.jspa">Sonatype account</a> and GPG key available.</p>

<p>If you don’t have these yet, have a look at <a href="https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/">this great post</a> by <a href="https://twitter.com/zsmb13">Márton Braun</a>. It will also explain the required steps to make artifacts available after uploading on the Sonatype backend.</p>

<h2 id="migration-steps">Migration steps</h2>
<p>These are the steps to migrate from JCenter to Maven Central:</p>

<ol>
  <li><a href="#1-enumerate-all-versions-to-migrate">Enumerate all versions to migrate</a></li>
  <li><a href="#2-configure-gnu-pg-with-a-signing-key">Configure GNU PG with a signing key</a></li>
  <li><a href="#3-setup-credentials-for-maven-central-upload">Setup credentials to upload to Maven Central</a></li>
  <li>For each existing version:
    <ul>
      <li><a href="#4a-download-artifacts">Download the artifact from JCenter</a></li>
      <li><a href="#4b-add-all-missing-info-to-pomxml">Add all missing info to <code class="language-plaintext highlighter-rouge">pom.xml</code></a></li>
      <li><a href="#4c-sign-and-upload-to-maven-central">Sign and upload the artifact to Maven Central</a></li>
    </ul>
  </li>
</ol>

<p>If you’re impatient, feel free to <a href="#bringing-it-all-together">jump ahead to the full script</a> below.</p>

<p>Though I encourage you to have a look at specific sections as your signing key may be in a different format, sections may be missing from your <code class="language-plaintext highlighter-rouge">pom.xml</code>,…</p>

<h2 id="1-enumerate-all-versions-to-migrate">1. Enumerate all versions to migrate</h2>
<p>To get all previously published versions from JCenter, navigate to the following url:</p>

<p><code class="language-plaintext highlighter-rouge">https://dl.bintray.com/&lt;bintray-org&gt;/&lt;bintray-repo&gt;/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;</code></p>

<p>For the <a href="https://bintray.com/plaid/link-android/com.plaid.link">Plaid Link Android SDK located</a>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;bintray-org&gt;</code>: <code class="language-plaintext highlighter-rouge">plaid</code> - first part of url</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;bintray-repo&gt;</code>: <code class="language-plaintext highlighter-rouge">link-android</code> - second part of url</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;group-id-slash-separated&gt;</code>: <code class="language-plaintext highlighter-rouge">com.plaid.link</code> - group id with <code class="language-plaintext highlighter-rouge">.</code> replaced by <code class="language-plaintext highlighter-rouge">/</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;artifact-id&gt;</code>: <code class="language-plaintext highlighter-rouge">sdk-core</code> - artifact id</li>
</ul>

<p><a href="/img/blog/migrateartifactsmaven/jcenter_info.png"><img src="/img/blog/migrateartifactsmaven/jcenter_info.png" alt="Bintray and Maven credentials to construct versions url" class="align-center" /></a></p>

<p>Resulting in the <a href="https://dl.bintray.com/plaid/link-android/com/plaid/link/sdk-core">following url</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">BINTRAYURL</span><span class="o">=</span>https://dl.bintray.com/plaid/link-android/com/plaid/link/sdk-core
</code></pre></div></div>

<p>From this, all versions can be copy-pasted in plain text and converted into a space-separated array. Either using a text editor or command line (OSX only):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pbpaste | <span class="nb">tr</span> <span class="s1">'/'</span> <span class="s1">' '</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'\n'</span>
</code></pre></div></div>

<p>Now the versions can be used as an input variable for the script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">VERSIONS</span><span class="o">=(</span>0.1.0 0.1.1 0.1.2 0.1.3 0.1.4 0.1.5 0.2.0 0.2.1 0.2.2 <span class="se">\</span>
            0.3.0 0.3.1 0.3.2 0.3.3 0.3.4 0.3.5 0.3.6 1.0.0 1.0.1 <span class="se">\</span>
            1.0.2 1.0.3 1.1.0 1.2.0 1.2.1 1.3.0 1.3.1 1.4.0 1.4.1 <span class="se">\</span>
            2.0.0 2.0.0-rc1 2.0.0-rc2 2.0.0-rc3 2.1.0 2.1.1 2.1.2 <span class="se">\</span>
            2.2.0 3.0.0 3.0.1 3.1.0 3.1.1 3.2.0 3.2.0-rc1 3.2.0-rc2 <span class="se">\</span>
            3.2.1 3.2.2 3.2.3 3.2.4<span class="o">)</span>
</code></pre></div></div>

<p>Finally, keep this URL somewhere as we’ll need it later on to download all artifacts.</p>

<h2 id="2-configure-gnu-pg-with-a-signing-key">2. Configure GNU PG with a signing key</h2>
<p>To sign the artifacts, we’ll use <a href="https://gnupg.org/">GNU PG</a>.</p>

<p>First, ensure GNU GPG is installed:</p>

<ul>
  <li>OSX: <code class="language-plaintext highlighter-rouge">$ brew install gnupg</code></li>
  <li>Docker: <code class="language-plaintext highlighter-rouge">$ RUN apk add gnupg</code></li>
</ul>

<p>Now your private key can be imported by:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--import</span> private.key
</code></pre></div></div>

<p>Or if you’ll be running the script on your CI environment, you may want to inject a base64 encoded version of the private key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Export base64 key</span>
gpg <span class="nt">--export-secret-key</span> <span class="nt">--armor</span> | <span class="nb">base64</span>

<span class="c"># Import base64 key</span>
<span class="nb">echo</span> <span class="nv">$BASE64_SIGNING_KEY</span> | <span class="nb">base64</span> <span class="nt">-d</span> | gpg <span class="nt">--import</span>
</code></pre></div></div>

<h2 id="3-setup-credentials-for-maven-central-upload">3. Setup credentials for Maven Central upload</h2>
<p>To make sure Maven can access your Sonatype credentials, a <code class="language-plaintext highlighter-rouge">settings.xml</code> needs to be created in the <code class="language-plaintext highlighter-rouge">~/.m2</code> folder with the <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">password</code>.</p>

<p>First define a variable for <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">password</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">SONATYPE_USERNAME</span><span class="o">=</span><span class="s2">"&lt;username_here&gt;"</span>
<span class="nv">SONATYPE_PASSWORD</span><span class="o">=</span><span class="s2">"&lt;password_here&gt;"</span>
</code></pre></div></div>

<p>Note that these shouldn’t contain any characters that aren’t compatible with xml. Hence we better xml encode them before using:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>xml_encode<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="nv">$1</span> | <span class="nb">sed</span> <span class="s1">'s/&amp;/\&amp;amp;/g; s/&lt;/\&amp;lt;/g; s/&gt;/\&amp;gt;/g; s/"/\&amp;quot;/g; s/'</span><span class="s2">"'"</span><span class="s1">'/\&amp;#39;/g'</span>
<span class="o">}</span>

<span class="nv">SONATYPE_USERNAME</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="s2">"&lt;username_here&gt;"</span><span class="si">)</span>
<span class="nv">SONATYPE_PASSWORD</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="s2">"&lt;password_here&gt;"</span><span class="si">)</span>
</code></pre></div></div>

<p>Next, make sure the <code class="language-plaintext highlighter-rouge">~/.m2</code> directory is created:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p ~/.m2
</code></pre></div></div>

<p>And finally create the <code class="language-plaintext highlighter-rouge">settings.xml</code> file with the credentials:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"&lt;settings xmlns=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0</span><span class="se">\"</span><span class="s2"> xmlns:xsi=</span><span class="se">\"</span><span class="s2">http://www.w3.org/2001/XMLSchema-instance</span><span class="se">\"</span><span class="s2">
  xsi:schemaLocation=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd</span><span class="se">\"</span><span class="s2">&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;</span><span class="nv">$MAVEN_CENTRAL_REPOID</span><span class="s2">&lt;/id&gt;
      &lt;username&gt;</span><span class="nv">$SONATYPE_USERNAME</span><span class="s2">&lt;/username&gt;
      &lt;password&gt;</span><span class="nv">$SONATYPE_PASSWORD</span><span class="s2">&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;"</span> <span class="o">&gt;</span> ~/.m2/settings.xml
</code></pre></div></div>

<h2 id="4a-download-artifacts">4.a Download artifacts</h2>
<p>First, define the output directory where the downloaded files will be placed.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">OUTPUT_DIR</span><span class="o">=</span><span class="s2">"output"</span>
</code></pre></div></div>

<p>Then for each version, create a new directory that will host the downloaded artifacts:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>
<span class="k">done</span>
</code></pre></div></div>

<p>And finally, download all the artifacts using the base URL that we created in step 1:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
  ...
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.aar <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.aar
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom
<span class="k">done</span>
</code></pre></div></div>

<p>This will represent a similar folder structure in the output directory as what is present in Maven.</p>

<blockquote>
  <p>Note: if you deploy more artifacts (e.g. <code class="language-plaintext highlighter-rouge">javadoc.jar</code>), make sure to download them here. And when your artifact is a <code class="language-plaintext highlighter-rouge">.jar</code>, update the extension.</p>
</blockquote>

<h2 id="4b-add-all-missing-info-to-pomxml">4.b Add all missing info to <code class="language-plaintext highlighter-rouge">pom.xml</code></h2>
<p>Maven Central has <a href="https://central.sonatype.org/publish/requirements/#sufficient-metadata">more mandatory fields</a> for the <code class="language-plaintext highlighter-rouge">pom.xml</code> and hence the <code class="language-plaintext highlighter-rouge">pom.xml</code> files may need to be amended before uploading.</p>

<p>I had to add the following info:</p>

<ul>
  <li>name</li>
  <li>description</li>
  <li>URL</li>
  <li>license</li>
  <li>developer</li>
  <li>organization</li>
  <li>SCM (link to source control)</li>
</ul>

<p>To add the information above, let’s replace an existing attribute in the <code class="language-plaintext highlighter-rouge">pom.xml</code> with a new XML snippet that contains all information. A good candidate to replace is the <code class="language-plaintext highlighter-rouge">&lt;packaging&gt;</code> attribute:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_PLACEHOLDER</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;.*&gt;"</span>
</code></pre></div></div>

<p>This will be replaced with a new XML snippet that starts with the same attribute, but adds the other attributes to the <code class="language-plaintext highlighter-rouge">pom.xml</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_REPLACEMENT</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;aar&lt;/packaging&gt;

  &lt;name&gt;name here&lt;/name&gt;
  &lt;description&gt;description here&lt;/description&gt;
  &lt;url&gt;url here&lt;/url&gt;


  &lt;licenses&gt;
    &lt;license&gt;
      &lt;name&gt;license here&lt;/name&gt;
      &lt;url&gt;url to license&lt;/url&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;

  &lt;organization&gt;
    &lt;name&gt;name here&lt;/name&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/organization&gt;

   &lt;developers&gt;
    &lt;developer&gt;
      &lt;organization&gt;name here&lt;/organization&gt;
      &lt;organizationUrl&gt;url here&lt;/organizationUrl&gt;
    &lt;/developer&gt;
  &lt;/developers&gt;

  &lt;scm&gt;
    &lt;connection&gt;url here&lt;/connection&gt;
    &lt;developerConnection&gt;url here&lt;/developerConnection&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/scm&gt;
  "</span>
</code></pre></div></div>

<blockquote>
  <p>To learn what data to provide for each attribute, have a look a the <a href="https://central.sonatype.org/publish/requirements/#sufficient-metadata">sonatype documentation</a></p>
</blockquote>

<blockquote>
  <p>Note that your <code class="language-plaintext highlighter-rouge">pom.xml</code> might already have been defining some of these attributes, so you may not need to add all of these replacement attributes when migrating your project</p>
</blockquote>

<p>Using <code class="language-plaintext highlighter-rouge">sed</code> we can replace the placeholder with the replacement text:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/</span><span class="nv">$POM_PLACEHOLDER</span><span class="s2">/</span><span class="nv">$POM_REPLACEMENT_ESCAPED</span><span class="s2">/g"</span> <span class="se">\</span>
  <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom
</code></pre></div></div>

<p>Unfortunately, that doesn’t work as all <code class="language-plaintext highlighter-rouge">/</code> in the replacement snippet need to be escaped or <code class="language-plaintext highlighter-rouge">sed</code> will consider them part of its command.</p>

<p>To fix this, preprocess the replacement snippet:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_REPLACEMENT_ESCAPED</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">POM_REPLACEMENT</span><span class="k">}</span><span class="s2">"</span> |<span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s#/#\\/#g'</span><span class="si">)</span>
</code></pre></div></div>

<p>Almost there, but <code class="language-plaintext highlighter-rouge">sed</code> cannot handle multi-line replacements.</p>

<p>This can be solved by using <code class="language-plaintext highlighter-rouge">tr</code> to temporarily swap the <code class="language-plaintext highlighter-rouge">/n</code> characters with a unique character <code class="language-plaintext highlighter-rouge">@</code> and swapping it back after the replacement:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">POM_REPLACEMENT_ESCAPED</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">POM_REPLACEMENT</span><span class="k">}</span><span class="s2">"</span> |<span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s#/#\\/#g'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">'@'</span><span class="si">)</span>
<span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/</span><span class="nv">$POM_PLACEHOLDER</span><span class="s2">/</span><span class="nv">$POM_REPLACEMENT_ESCAPED</span><span class="s2">/g"</span> <span class="se">\</span>
    <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom |<span class="se">\</span>
     <span class="nb">tr</span> <span class="s1">'@'</span> <span class="s1">'\n'</span> <span class="o">&gt;</span> temp.txt
<span class="nb">mv </span>temp.txt <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom
</code></pre></div></div>

<p>Notice how an intermediate file <code class="language-plaintext highlighter-rouge">temp.txt</code> is used to avoid reading and modifying the original file at the same time.</p>

<h2 id="4c-sign-and-upload-to-maven-central">4.c Sign and upload to Maven Central</h2>
<p>To sign and upload the artifacts to Maven Central, what better tool to use than Maven itself?</p>

<p>First, make sure Maven is installed:</p>

<ul>
  <li>OSX: <code class="language-plaintext highlighter-rouge">$ brew install maven</code></li>
  <li>Docker: <code class="language-plaintext highlighter-rouge">$ RUN apk add maven</code></li>
</ul>

<p>Then define the repository id and staging URL constants:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Constants, no need to change these</span>
<span class="nv">MAVEN_CENTRAL_STAGINGURL</span><span class="o">=</span><span class="s2">"https://oss.sonatype.org/service/local/staging/deploy/maven2"</span>
<span class="nv">MAVEN_CENTRAL_REPOID</span><span class="o">=</span><span class="s2">"ossrh"</span>
</code></pre></div></div>

<p>Finally, invoke Maven with the GPG sign and deploy plugin:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
  ...
mvn gpg:sign-and-deploy-file <span class="se">\</span>
   <span class="nt">-Durl</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_STAGINGURL</span> <span class="se">\</span>
   <span class="nt">-DrepositoryId</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_REPOID</span> <span class="se">\</span>
   <span class="nt">-DpomFile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
   <span class="nt">-Dfile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.aar
<span class="k">done</span>
</code></pre></div></div>

<p>This will upload all your files to the staging environment on Maven Central.</p>

<blockquote>
  <p>Note: If you want to upload additional artifacts (e.g. javadoc.jar), have a look at the <a href="https://central.sonatype.org/pages/manual-staging-bundle-creation-and-deployment.html">Sonatype documentation</a>.</p>
</blockquote>

<p>After, login to Sonatype to close the repository from future uploads and promote all artifacts to release. This process is well described in the <a href="https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/#your-first-release">your first release</a> section by <a href="https://twitter.com/zsmb13">Márton Braun</a></p>

<h2 id="bringing-it-all-together">Bringing it all together</h2>
<p>Combined this results in the following script, that takes all required secrets as input parameters so it can easily be run on a CI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./migrate_to_mavencentral.sh <span class="nv">$BASE64_SIGNING_KEY</span> <span class="nv">$SONATYPE_USERNAME</span> <span class="nv">$SONATYPE_PASSWORD</span>
</code></pre></div></div>

<p>And the full script (including <code class="language-plaintext highlighter-rouge">TODOs</code>!) <a href="https://github.com/JeroenMols/MigrateArtifactsMavenCentral">can be found on Github</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail

<span class="c"># TODO: add versions e.g. (1.0.0 1.0.1 1.0.2)</span>
<span class="nv">VERSIONS</span><span class="o">=()</span>
<span class="c"># TODO : add artifact Id</span>
<span class="nv">ARTIFACT_ID</span><span class="o">=</span><span class="s2">""</span>
<span class="c"># TODO: https://dl.bintray.com/&lt;bintray-org&gt;/&lt;bintray-repo&gt;/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;</span>
<span class="nv">BINTRAYURL</span><span class="o">=</span><span class="s2">""</span>

<span class="c"># TODO: define placeholder and provide additional pom information (starting with placeholder!)</span>
<span class="nv">ARTIFACT_EXTENSTION</span><span class="o">=</span><span class="s2">"aar"</span>
<span class="nv">POM_PLACEHOLDER</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;.*&gt;"</span>
<span class="nv">POM_REPLACEMENT</span><span class="o">=</span><span class="s2">"&lt;packaging&gt;aar&lt;/packaging&gt;

  &lt;name&gt;name here&lt;/name&gt;
  &lt;description&gt;description here&lt;/description&gt;
  &lt;url&gt;url here&lt;/url&gt;


  &lt;licenses&gt;
    &lt;license&gt;
      &lt;name&gt;license here&lt;/name&gt;
      &lt;url&gt;url to license&lt;/url&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;

  &lt;organization&gt;
    &lt;name&gt;name here&lt;/name&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/organization&gt;

   &lt;developers&gt;
    &lt;developer&gt;
      &lt;organization&gt;name here&lt;/organization&gt;
      &lt;organizationUrl&gt;url here&lt;/organizationUrl&gt;
    &lt;/developer&gt;
  &lt;/developers&gt;

  &lt;scm&gt;
    &lt;connection&gt;url here&lt;/connection&gt;
    &lt;developerConnection&gt;url here&lt;/developerConnection&gt;
    &lt;url&gt;url here&lt;/url&gt;
  &lt;/scm&gt;
  "</span>

<span class="c"># Constants</span>
<span class="nv">MAVEN_CENTRAL_STAGINGURL</span><span class="o">=</span><span class="s2">"https://oss.sonatype.org/service/local/staging/deploy/maven2"</span>
<span class="nv">MAVEN_CENTRAL_REPOID</span><span class="o">=</span><span class="s2">"ossrh"</span>
<span class="nv">OUTPUT_DIR</span><span class="o">=</span><span class="s2">"output"</span>

<span class="c"># Utilities</span>
<span class="k">function </span>escape_pom<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s1">'s#/#\\/#g'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">'@'</span>
<span class="o">}</span>

<span class="k">function </span>xml_encode<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="nv">$1</span> | <span class="nb">sed</span> <span class="s1">'s/&amp;/\&amp;amp;/g; s/&lt;/\&amp;lt;/g; s/&gt;/\&amp;gt;/g; s/"/\&amp;quot;/g; s/'</span><span class="s2">"'"</span><span class="s1">'/\&amp;#39;/g'</span>
<span class="o">}</span>



<span class="nb">echo</span> <span class="s2">"Loading script input"</span>
<span class="nv">BASE64_SIGNING_KEY</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">SONATYPE_USERNAME</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="nv">$2</span><span class="si">)</span>
<span class="nv">SONATYPE_PASSWORD</span><span class="o">=</span><span class="si">$(</span>xml_encode <span class="nv">$3</span><span class="si">)</span>
<span class="nb">echo</span> <span class="nv">$SONATYPE_PASSWORD</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASE64_SIGNING_KEY</span><span class="k">}</span><span class="s2">"</span>  <span class="nt">-o</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SONATYPE_USERNAME</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-o</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SONATYPE_PASSWORD</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"USAGE: migrate BASE64_SIGNING_KEY SONATYPE_USERNAME SONATYPE_PASSWORD"</span>
  <span class="nb">exit </span>1
<span class="k">fi



</span><span class="nb">echo</span> <span class="s2">"Setup signing key"</span>
<span class="nb">echo</span> <span class="nv">$BASE64_SIGNING_KEY</span> | <span class="nb">base64</span> <span class="nt">-d</span> | gpg <span class="nt">--import</span>



<span class="nb">echo</span> <span class="s2">"Setup Maven credentials"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/.m2
<span class="nb">echo</span> <span class="s2">"&lt;settings xmlns=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0</span><span class="se">\"</span><span class="s2"> xmlns:xsi=</span><span class="se">\"</span><span class="s2">http://www.w3.org/2001/XMLSchema-instance</span><span class="se">\"</span><span class="s2">
  xsi:schemaLocation=</span><span class="se">\"</span><span class="s2">http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd</span><span class="se">\"</span><span class="s2">&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;</span><span class="nv">$MAVEN_CENTRAL_REPOID</span><span class="s2">&lt;/id&gt;
      &lt;username&gt;</span><span class="nv">$SONATYPE_USERNAME</span><span class="s2">&lt;/username&gt;
      &lt;password&gt;</span><span class="nv">$SONATYPE_PASSWORD</span><span class="s2">&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;"</span> <span class="o">&gt;</span> ~/.m2/settings.xml



<span class="nb">echo</span> <span class="s2">"Migrate artifacts"</span>
<span class="k">for </span>v <span class="k">in</span> <span class="k">${</span><span class="nv">VERSIONS</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"Migrating version </span><span class="nv">$v</span><span class="s2">"</span>
  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.<span class="nv">$ARTIFACT_EXTENSTION</span> <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.<span class="nv">$ARTIFACT_EXTENSTION</span>
  curl <span class="nt">-L</span> <span class="nv">$BINTRAYURL</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
      <span class="nt">-o</span> <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom

  <span class="c"># Add required metadata to pom.xml</span>
  <span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/</span><span class="nv">$POM_PLACEHOLDER</span><span class="s2">/</span><span class="si">$(</span>escape_pom <span class="s2">"</span><span class="nv">$POM_REPLACEMENT</span><span class="s2">"</span><span class="si">)</span><span class="s2">/g"</span> <span class="se">\</span>
      <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom |<span class="se">\</span>
      <span class="nb">tr</span> <span class="s1">'@'</span> <span class="s1">'\n'</span> <span class="o">&gt;</span> temp.txt
  <span class="nb">mv </span>temp.txt <span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom

  mvn gpg:sign-and-deploy-file <span class="se">\</span>
     <span class="nt">-Durl</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_STAGINGURL</span> <span class="se">\</span>
     <span class="nt">-DrepositoryId</span><span class="o">=</span><span class="nv">$MAVEN_CENTRAL_REPOID</span> <span class="se">\</span>
     <span class="nt">-DpomFile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.pom <span class="se">\</span>
     <span class="nt">-Dfile</span><span class="o">=</span><span class="nv">$OUTPUT_DIR</span>/<span class="nv">$v</span>/<span class="nv">$ARTIFACT_ID</span>-<span class="nv">$v</span>.<span class="nv">$ARTIFACT_EXTENSTION</span>
<span class="k">done</span>
</code></pre></div></div>

<h2 id="wrap-up">Wrap-up</h2>
<p>Migrating existing artifacts to Maven Central involves quite a few steps. Fortunately, the <a href="https://github.com/JeroenMols/MigrateArtifactsMavenCentral">open source script</a> presented in this blogpost can help with downloading all artifacts, updating their <code class="language-plaintext highlighter-rouge">pom.xml</code>, signing them, and uploading them to Maven Central.</p>

<p>If you’ve made it this far you should probably <span><a href="https://twitter.com/molsjeroen?source=migrateexistinglibraryartifactsfromjcentertomavencentral2021" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="script" /><category term="migrate" /><category term="jcenter" /><category term="mavenCentral" /><category term="maven" /><summary type="html"><![CDATA[With JCenter shutting down, many are migrating to Maven Central. And while there are many posts on how to publish new artifacts, also all existing artifacts should be migrated away from JCenter.]]></summary></entry><entry><title type="html">Share code between Android and Jvm in Kotlin multiplatform</title><link href="https://jeroenmols.com/blog/2021/03/17/share-code-kotlin-multiplatform/" rel="alternate" type="text/html" title="Share code between Android and Jvm in Kotlin multiplatform" /><published>2021-03-17T00:00:00+01:00</published><updated>2021-03-17T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2021/03/17/share-code-kotlin-multiplatform</id><content type="html" xml:base="https://jeroenmols.com/blog/2021/03/17/share-code-kotlin-multiplatform/"><![CDATA[<p>While Android supports most Java language features, it doesn’t support every API that Java provides. On the other hand, Kotlin multiplatform only allows sharing code across all targets (commonMain), not a subset of targets (commonJvm).</p>

<p>Read on to learn how to share part of your code between Android and Java (Jvm), while still providing platform-specific implementations of some classes.</p>

<h2 id="problem-description">Problem description</h2>
<p>In a typical Kotlin multiplatform project, there is a <code class="language-plaintext highlighter-rouge">commonMain</code> <code class="language-plaintext highlighter-rouge">SourceSet</code> (blue) which defines both common code and <code class="language-plaintext highlighter-rouge">expected</code> code for specific <code class="language-plaintext highlighter-rouge">SourceSets</code> (orange):</p>

<p><a href="/img/blog/sharecodemultiplatform/multiplatform_project.png"><img src="/img/blog/sharecodemultiplatform/multiplatform_project.png" alt="Kotlin multiplatform project overview" class="align-center" /></a></p>

<p>Besides making use of the common code, the specific <code class="language-plaintext highlighter-rouge">SourceSets</code> also must provide <code class="language-plaintext highlighter-rouge">actual</code> implementations for the expected code.</p>

<p>While this mechanism works great, it doesn’t allow to share code between specific <code class="language-plaintext highlighter-rouge">SourceSets</code>. Take for instance <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code>, they have a lot of common API’s but some (e.g. <code class="language-plaintext highlighter-rouge">Base64</code>) are different.</p>

<p>As such <code class="language-plaintext highlighter-rouge">Android</code> has defined its own <code class="language-plaintext highlighter-rouge">android.util.Base64</code> class which is different from the <code class="language-plaintext highlighter-rouge">Jvm</code> <code class="language-plaintext highlighter-rouge">java.util.Base64</code> class. (Though API level 26 and higher also support <code class="language-plaintext highlighter-rouge">java.util.Base64</code>)</p>

<p>So the challenge at hand is to share most <code class="language-plaintext highlighter-rouge">actual</code> implementations across <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code>, but provide platform-specific implementations for some functions.</p>

<p>Visually speaking we would like to accomplish the following:</p>

<p><a href="/img/blog/sharecodemultiplatform/codeshare_androidjvm.png"><img src="/img/blog/sharecodemultiplatform/codeshare_androidjvm.png" alt="Desired code sharing between Android and Jvm" class="align-center" /></a></p>

<h2 id="approach-1-new-sourceset">Approach 1: New sourceset</h2>
<p>Inspired by <a href="https://github.com/h0tk3y/k-new-mpp-samples/blob/master/split-actuals/build.gradle">an example</a> from <a href="https://twitter.com/h07k3y?lang=en">Sergey Igushkin</a>, let’s add a new sourceSet <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> that will have the shared <code class="language-plaintext highlighter-rouge">actual</code> implementations across <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code>.</p>

<p>This requires the following:</p>

<ol>
  <li>create a new folder <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> under <code class="language-plaintext highlighter-rouge">src</code></li>
  <li>create a new <code class="language-plaintext highlighter-rouge">SourceSet</code> called <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code></li>
  <li>make <code class="language-plaintext highlighter-rouge">androidMain</code> and <code class="language-plaintext highlighter-rouge">jvmMain</code> depend on this new <code class="language-plaintext highlighter-rouge">SourceSet</code></li>
</ol>

<p>And the resulting <code class="language-plaintext highlighter-rouge">build.gradle.kts</code> file will be:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kotlin</span> <span class="p">{</span>
  <span class="o">..</span><span class="p">.</span>

  <span class="nf">sourceSets</span> <span class="p">{</span>
    <span class="o">..</span><span class="p">.</span>

    <span class="c1">// Must be defined before androidMain and jvmMain</span>
    <span class="kd">val</span> <span class="py">commonJvmAndroid</span> <span class="p">=</span> <span class="nf">create</span><span class="p">(</span><span class="s">"commonJvmAndroid"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">dependsOn</span><span class="p">(</span><span class="n">commonMain</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">androidMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
      <span class="nf">dependsOn</span><span class="p">(</span><span class="n">commonJvmAndroid</span><span class="p">)</span>
      <span class="nf">dependencies</span> <span class="p">{</span>
        <span class="o">..</span><span class="p">.</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">jvmMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
      <span class="nf">dependsOn</span><span class="p">(</span><span class="n">commonJvmAndroid</span><span class="p">)</span>
      <span class="nf">dependencies</span> <span class="p">{</span>
        <span class="o">..</span><span class="p">.</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>While this solution works great from the command line, Intellij autocomplete unfortunately doesn’t work and all <code class="language-plaintext highlighter-rouge">Java</code> imports show up red.</p>

<p>I suspect this is because Intellij doesn’t know what kind of <code class="language-plaintext highlighter-rouge">SourceSet</code> <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> is, whereas it can recognize the default multiplatform <code class="language-plaintext highlighter-rouge">SourceSets</code>.</p>

<h2 id="approach-2-new-srcdir">Approach 2: New srcDir</h2>
<p>To ensure Intellij autocomplete works, a <code class="language-plaintext highlighter-rouge">srcDir</code> can be added to the existing <code class="language-plaintext highlighter-rouge">SourceSets</code>.</p>

<ol>
  <li>create a new folder <code class="language-plaintext highlighter-rouge">commonJvmAndroid</code> under <code class="language-plaintext highlighter-rouge">src</code></li>
  <li>add this new sourceSet to <code class="language-plaintext highlighter-rouge">androidMain</code> and <code class="language-plaintext highlighter-rouge">jvmMain</code></li>
</ol>

<p>And the resulting <code class="language-plaintext highlighter-rouge">build.gradle.kts</code> file will be:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kotlin</span> <span class="p">{</span>
  <span class="o">..</span><span class="p">.</span>

  <span class="nf">sourceSets</span> <span class="p">{</span>
    <span class="o">..</span><span class="p">.</span>

    <span class="kd">val</span> <span class="py">androidMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
        <span class="n">kotlin</span><span class="p">.</span><span class="nf">srcDir</span><span class="p">(</span><span class="s">"src/commonJvmAndroid/kotlin"</span><span class="p">)</span>
        <span class="nf">dependencies</span> <span class="p">{</span>
            <span class="o">..</span><span class="p">.</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">jvmMain</span> <span class="k">by</span> <span class="nf">getting</span> <span class="p">{</span>
        <span class="n">kotlin</span><span class="p">.</span><span class="nf">srcDir</span><span class="p">(</span><span class="s">"src/commonJvmAndroid/kotlin"</span><span class="p">)</span>
        <span class="nf">dependencies</span> <span class="p">{</span>
            <span class="o">..</span><span class="p">.</span>
        <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Because there is no new sourceSet, Intellij will implicitly use the <code class="language-plaintext highlighter-rouge">Android</code> or <code class="language-plaintext highlighter-rouge">Jvm</code> one while browsing code in <code class="language-plaintext highlighter-rouge">commonAndroidJvm</code>, and hence autocomplete will work!</p>

<h2 id="real-life-example">Real-life example</h2>
<p>Want a bigger example of this principle in action? Have a look at the awesome <a href="https://github.com/streem/pbandk">PbandK</a> project, that provides a Kotlin code generator and runtime for Protocol Buffers. It is built to work across multiple Kotlin platforms.</p>

<p>In the <a href="https://github.com/streem/pbandk/tree/master/runtime">runtime module</a>, the <a href="https://github.com/streem/pbandk/blob/master/runtime/build.gradle.kts">build.gradle.kts</a> adds the extra <code class="language-plaintext highlighter-rouge">srcDir</code> to <code class="language-plaintext highlighter-rouge">androidMain</code>/<code class="language-plaintext highlighter-rouge">jvmMain</code> and the <a href="https://github.com/streem/pbandk/tree/master/runtime/src">src directory</a> has the shared code in a <code class="language-plaintext highlighter-rouge">commonAndroidJvm</code> folder.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p>While <code class="language-plaintext highlighter-rouge">Android</code> and <code class="language-plaintext highlighter-rouge">Jvm</code> projects share most APIs, not every <code class="language-plaintext highlighter-rouge">Java</code> API is available on Android. To share a subset of code across both platforms, it’s best to use a shared <code class="language-plaintext highlighter-rouge">srcDir</code> so Intellij autocomplete works as expected.</p>

<p>If you’ve made it this far you should probably follow me on <span><a href="https://twitter.com/molsjeroen?source=sharecodebetweenandroidandjvminkotlinmultiplatform2021" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="kotlin" /><category term="multiplatform" /><category term="code sharing" /><category term="gradle" /><summary type="html"><![CDATA[While Android supports most Java language features, it doesn’t support every API that Java provides. On the other hand, Kotlin multiplatform only allows sharing code across all targets (commonMain), not a subset of targets (commonJvm).]]></summary></entry><entry><title type="html">Migrating away from JCenter</title><link href="https://jeroenmols.com/blog/2021/02/04/migratingjcenter/" rel="alternate" type="text/html" title="Migrating away from JCenter" /><published>2021-02-04T00:00:00+01:00</published><updated>2021-02-04T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2021/02/04/migratingjcenter</id><content type="html" xml:base="https://jeroenmols.com/blog/2021/02/04/migratingjcenter/"><![CDATA[<p>This week JFrog - out of nowhere - announced to completely remove their Maven repository. Since they’ll pull it offline already by May 2021 (!!!) it’s time to urgently migrate away. This blogpost will guide how to get started.</p>

<h2 id="expected-migrations">Expected migrations</h2>
<p>After the <a href="https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/">jcenter/bintray shutdown announcement</a>, there are two main migrations steps required:</p>

<ul>
  <li>consumed dependencies from Bintray/JCenter</li>
  <li>published artifacts to Bintray/JCenter</li>
</ul>

<p>Let’s have an in-depth look at both.</p>

<h2 id="consumed-dependencies-from-bintrayjcenter">Consumed dependencies from Bintray/JCenter</h2>
<p>These are dependencies that your app or library directly uses in one of its <code class="language-plaintext highlighter-rouge">dependencies</code> blocks in <code class="language-plaintext highlighter-rouge">build.gradle</code>.</p>

<p>To understand what needs to happen, let’s first have a look to see how Gradle fetches dependencies. Imagine a project with multiple defined repositories in the top-level <code class="language-plaintext highlighter-rouge">build.gradle</code> file:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Top-level build.gradle file</span>
<span class="n">allprojects</span> <span class="o">{</span>
  <span class="n">repositories</span> <span class="o">{</span>
      <span class="n">google</span><span class="o">()</span>
      <span class="n">jcenter</span><span class="o">()</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// App (or module) level build.gradle file</span>
<span class="n">dependencies</span> <span class="o">{</span>
  <span class="n">implementation</span> <span class="s1">'com.jeroenmols:mylibrary:1.0.0'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>In this example, Gradle will first look for <code class="language-plaintext highlighter-rouge">com.jeroenmols:mylibrary</code> in the <code class="language-plaintext highlighter-rouge">google()</code> Maven repository. If it can’t find the artifact there, it will look in <code class="language-plaintext highlighter-rouge">jcenter()</code> instead.</p>

<blockquote>
  <p>Note that <code class="language-plaintext highlighter-rouge">jcenter</code> is a superset of Maven Central. So when you request <code class="language-plaintext highlighter-rouge">jcenter</code> for a Maven artifact that it doesn’t host itself, it will go and fetch it from Maven Central for you.</p>
</blockquote>

<p>Two things are important to note here:</p>

<ol>
  <li>the order in which repositories are defined matters</li>
  <li>most artifacts come from <code class="language-plaintext highlighter-rouge">mavenCentral()</code>, hosted through <code class="language-plaintext highlighter-rouge">jcenter()</code></li>
</ol>

<p>To fully migrate away from <code class="language-plaintext highlighter-rouge">jcenter()</code>, all we need to do is replace all <code class="language-plaintext highlighter-rouge">jcenter()</code> occurrences with <code class="language-plaintext highlighter-rouge">mavenCentral()</code> in all <code class="language-plaintext highlighter-rouge">build.gradle</code> files.</p>

<p>For my projects this meant:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span> Top level build.gradle file
<span class="p">buildscript {
</span>  repositories {
    google()
<span class="gd">-   jcenter()
</span><span class="gi">+   mavenCentral()
</span>  }
<span class="err">}</span>
...

allprojects {
  repositories {
<span class="gd">-   jcenter()
</span><span class="gi">+   mavenCentral()
</span>  }
<span class="err">}</span>
</code></pre></div></div>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span> buildSrc level build.gradle file
<span class="p">repositories {
</span><span class="gd">- jcenter()
</span><span class="gi">+ mavenCentral()
</span><span class="err">}</span>
</code></pre></div></div>

<p>After replacing all repositories, we can test if our build still passes by running the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew assemble assembleDebugUnitTest assembleAndroidTest <span class="nt">--refresh-dependencies</span>
</code></pre></div></div>

<p>This will ensure all dependencies for every build type are downloaded again. Such a “clean” build will assess whether your app can be built independently of <code class="language-plaintext highlighter-rouge">jcenter()</code>.</p>

<p>If this command passes, congratulations you’ve successfully migrated your dependencies away from <code class="language-plaintext highlighter-rouge">jcenter</code>. Nothing more to do.</p>

<p>When this command fails, however, it will print out all issues you may have:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span> What went wrong:
Could not determine the dependencies of task <span class="s1">':app:lintVitalRelease'</span><span class="nb">.</span>
<span class="o">&gt;</span> Could not resolve all artifacts <span class="k">for </span>configuration <span class="s1">':app:debugCompileClasspath'</span><span class="nb">.</span>
   <span class="o">&gt;</span> Could not find com.jeroenmols:mylibrary:1.0.0.
     Required by:
         project :app
</code></pre></div></div>

<p>This doesn’t just mean we can’t remove <code class="language-plaintext highlighter-rouge">jcenter()</code> from our projects yet. But keeping <code class="language-plaintext highlighter-rouge">jcenter()</code> as a repository could cause us to add even more <code class="language-plaintext highlighter-rouge">jcenter()</code> only dependencies in the future!</p>

<p>Fortunately there is a way to restrict the usage of <code class="language-plaintext highlighter-rouge">jcenter()</code>:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jcenter</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">content</span> <span class="o">{</span>
        <span class="n">includeModule</span><span class="o">(</span><span class="s2">"com.jeroenmols"</span><span class="o">,</span> <span class="s2">"mylibrary"</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This will restrict Gradle to only use <code class="language-plaintext highlighter-rouge">jcenter()</code> for this single dependency. Note that you can define multiple lines of <code class="language-plaintext highlighter-rouge">includeModule</code> for each dependency that isn’t available on Maven Central yet.</p>

<p>The benefits of this are twofold:</p>
<ol>
  <li>You make it explicit which <code class="language-plaintext highlighter-rouge">jcenter()</code> dependencies you still have</li>
  <li>You prevent other <code class="language-plaintext highlighter-rouge">jcenter()</code> only dependencies from being added.</li>
</ol>

<p>For each <code class="language-plaintext highlighter-rouge">jcenter()</code> dependency you still have, I recommend opening a <a href="https://github.com/streem/pbandk/issues/120">public Github issue</a> to request the library author to migrate.</p>

<p>Bringing it all together yields:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Top level build.gradle file</span>
<span class="n">allprojects</span> <span class="o">{</span>
  <span class="n">repositories</span> <span class="o">{</span>
      <span class="n">google</span><span class="o">()</span>
      <span class="n">mavenCentral</span><span class="o">()</span>
      <span class="n">jcenter</span><span class="o">()</span> <span class="o">{</span>
          <span class="n">content</span> <span class="o">{</span>
              <span class="n">includeModule</span><span class="o">(</span><span class="s2">"com.jeroenmols"</span><span class="o">,</span> <span class="s2">"mylibrary"</span><span class="o">)</span>
          <span class="o">}</span>
      <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// App (or module) level build.gradle file</span>
<span class="n">dependencies</span> <span class="o">{</span>
  <span class="n">implementation</span> <span class="s1">'com.jeroenmols:mylibrary:1.0.0'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>With this solution, Gradle will first look for the artifact in the <code class="language-plaintext highlighter-rouge">google()</code> repository, then in <code class="language-plaintext highlighter-rouge">mavenCentral()</code> and finally in <code class="language-plaintext highlighter-rouge">jcenter()</code> if the artifact is on the explicit allow list.</p>

<h1 id="published-artifacts-to-bintrayjcenter">Published artifacts to Bintray/JCenter</h1>
<p>These are artifacts you’ve published to <code class="language-plaintext highlighter-rouge">jcenter()</code> yourself.</p>

<p>Roughly there are two things that you’ll need to do:</p>

<ol>
  <li>Change your publishing pipeline to upload new library versions to Maven Central</li>
  <li>Migrate all your existing artifacts to Maven Central.</li>
</ol>

<p>To handle the first part, I recommend <a href="https://proandroiddev.com/publishing-your-first-android-library-to-mavencentral-be2c51330b88">this guide</a> by <a href="https://twitter.com/waseefakhtar">Waseef Akhtar</a> on how to publish to Maven Central.</p>

<p>For the second part, I want to emphasize how important it is to also migrate your old artifacts. Not all your customers will be on the latest version of your library and upgrading might not be straightforward for them, especially with breaking API changes.</p>

<blockquote>
  <p>Update: To help you with the migration, I’ve created <a href="/blog/2021/03/24/migrate-artifacts-mavencentral/">a script to migrate all existing artifacts from JCenter to Maven Central</a>.</p>
</blockquote>

<p>But besides this customer argument, there could also be existing open source projects that are currently in low maintenance mode, but still incredibly valuable to the community as a learning resource. Would we want to break all those builds?</p>

<p>Finally note that, even though May 1st is still a few months away, I highly recommend you to start migrating your library as soon as feasible. This won’t just decrease the burden for your customers, but I do also expect a surge in libraries being migrated to Maven central which could result in technical issues on their end. Hopefully not, of course, but better to make sure you have some extra time in your planning.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p>Migrating your app away from JCenter can be done by replacing all <code class="language-plaintext highlighter-rouge">jcenter()</code> references with <code class="language-plaintext highlighter-rouge">mavenCentral()</code> and adding explicit inclusions for dependencies that haven’t migrated yet. For your published libraries, try to migrate as soon as possible, and don’t forget to also migrate all existing artifacts.</p>

<p>If you’ve made it this far you should probably follow me on <span><a href="https://twitter.com/molsjeroen?source=migratingawayfromjcenter2021" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="library" /><category term="maven" /><category term="jcenter" /><category term="bintray" /><category term="transitive dependencies" /><category term="gradle" /><summary type="html"><![CDATA[This week JFrog - out of nowhere - announced to completely remove their Maven repository. Since they’ll pull it offline already by May 2021 (!!!) it’s time to urgently migrate away. This blogpost will guide how to get started.]]></summary></entry><entry><title type="html">Year in review 2020</title><link href="https://jeroenmols.com/blog/2021/01/05/yearinreview/" rel="alternate" type="text/html" title="Year in review 2020" /><published>2021-01-05T00:00:00+01:00</published><updated>2021-01-05T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2021/01/05/yearinreview</id><content type="html" xml:base="https://jeroenmols.com/blog/2021/01/05/yearinreview/"><![CDATA[<p>Well… I don’t really know where to start this time. 2020 was quite the rollercoaster, with many downs… but fortunately also a few amazing ups. Let’s focus on the good stuff.</p>

<p>My first lucky break was that I started working remotely by choice! This privilege meant I was quite well equipped both practically and mentally for the challenges of remote work. And while not without its challenges, I haven’t been happier at my work.</p>

<p>The main work challenge was bridging the 9-hour timezone gap with my colleagues. And while I do work some evenings, I’ve never been more available for my kids. And I’ve grown really fond of:</p>

<ul>
  <li>never (!!!) having to set an alarm clock</li>
  <li>exercising in the middle of a working day</li>
  <li>grabbing coffee/breakfast with my wife anytime I want (can?)</li>
</ul>

<p>Another highlight was the amazing time I was able to spend with my kids during the first Lockdown. I would work from 2pm to 10pm so me and the kids could do fun stuff in the mornings (fixing up the house, gardening, playgrounds,…). I recognize how extraordinary it was to have so much playtime with my kids and truly enjoyed it.</p>

<p>However, working such long days also meant I pushed myself beyond my limits and I had to take it a lot slower for several weeks before I felt better. A huge shoutout to Plaid and my manager Judd for the immense understanding they’ve shown for my situation.</p>

<p>Further, I’ve also built and designed my own custom Lego set: <a href="http://bit.ly/legostuntcar">Radio-Controlled Flip Over Stunt Car</a>:</p>

<p><a href="http://bit.ly/legostuntcar"><img src="https://jeroenmols.com/img/blog/yearinreview20/lego-ideas.jpg" alt="Radio-Controlled Flip Over Stunt Car" class="align-center" /></a></p>

<p>Please give me a <a href="http://bit.ly/legostuntcar">vote</a>!!! If I make it to 10k supporters, Lego might actually make it into an official set. 🤞</p>

<p>Further 2020 highlights include:</p>

<ul>
  <li>🧱 Teaching my son and daughter how to build Lego</li>
  <li>👨‍💻 Spoke at <a href="https://jeroenmols.com/speaking/">4 online events</a> and produced <a href="https://www.youtube.com/watch?v=TCKb1WfjAC8">1 video</a>.</li>
  <li>📝 Wrote <a href="http://jeroenmols.com/blog/">6 blog posts</a></li>
  <li>📱 Grew my <a href="https://twitter.com/molsjeroen">Twitter</a> followers by ~20% to more than 7500</li>
  <li>🦠 Contributed code to the official <a href="https://github.com/nhsx/covid-19-app-android-ag-public/tree/master/app/src/main/java/com/jeroenmols">UK Covid app</a></li>
  <li>🚗 Drove less than 1500 km with my car (down from 30k km)</li>
  <li>☕️  Improved my coffee skills with (basic) latte art!</li>
  <li>🚴‍♀️ Worked out (almost) biweekly on my indoor racing bike</li>
  <li>🪒 Shaved my hair and grew a beard</li>
  <li>📕 Read 4 books</li>
  <li>📈 Started investing</li>
</ul>

<p>To keep the best for last: we’re expecting a baby girl in March! 🍼👼</p>

<p>In 2021, I’m going to try and exercise twice a week, read 5 books, enjoy every little moment with the baby and double down on being an awesome father for all my kids.</p>

<p>I do want to pick up my community contributions again and maybe even venture into other areas beyond Android.</p>

<p>As always you can reach me <span><a href="https://twitter.com/molsjeroen?source=yearinreview20202021" class="ga-link" target="_blank">@molsjeroen</a></span>
 on Twitter, or leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="review" /><summary type="html"><![CDATA[Well… I don’t really know where to start this time. 2020 was quite the rollercoaster, with many downs… but fortunately also a few amazing ups. Let’s focus on the good stuff.]]></summary></entry><entry><title type="html">Test library releases using an in project Maven repository</title><link href="https://jeroenmols.com/blog/2020/12/02/inproject-maven/" rel="alternate" type="text/html" title="Test library releases using an in project Maven repository" /><published>2020-12-02T00:00:00+01:00</published><updated>2020-12-02T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2020/12/02/inproject-maven</id><content type="html" xml:base="https://jeroenmols.com/blog/2020/12/02/inproject-maven/"><![CDATA[<p>Short, powerful post on how to test the release version of libraries directly within a project without having to deploy them to Maven first.</p>

<p>As a bonus, there will also be an open-source example showcasing all of this in action.</p>

<h2 id="problem-description">Problem description</h2>
<p>In (Android) library development, the local development setup differs from how customers integrate the library.</p>

<p>Local development uses a module dependency:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="nf">project</span><span class="o">(</span><span class="s1">':library'</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Customers integrate through Maven:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="err">`</span><span class="n">com</span><span class="o">.</span><span class="na">jeroenmols</span><span class="o">.</span><span class="na">lib</span><span class="o">:</span><span class="nl">library:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span><span class="err">`</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now because both integration mechanisms are fundamentally different, they can also lead to different results.</p>

<p>Wouldn’t it be great if you could test the Maven version of your library directly in your project?</p>

<p>Let’s do that!</p>

<p>That avoids deploying the library to Maven, makes testing more realistic, and speeds up release testing considerably.</p>

<h2 id="core-idea">Core idea</h2>
<p>What we’ll try to accomplish is to mimic a local <code class="language-plaintext highlighter-rouge">Maven</code> repository within your Android project. That allows integrating the release build similar to an external Maven build:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
    <span class="c1">// in-project build from current code</span>
    <span class="n">releaseImplementation</span> <span class="s1">'com.jeroenmols.lib:library:local'</span>

    <span class="c1">// version from Maven</span>
    <span class="n">releaseImplementation</span> <span class="s1">'com.jeroenmols.lib:library:1.0.0'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>To accomplish this we’ll:</p>

<ul>
  <li>add a build flag to toggle between local and external build</li>
  <li>create a release artifact and <code class="language-plaintext highlighter-rouge">pom.xml</code> with a special version</li>
  <li>create a <code class="language-plaintext highlighter-rouge">Maven</code> like folder structure in <code class="language-plaintext highlighter-rouge">app/libs</code></li>
  <li>add <code class="language-plaintext highlighter-rouge">Maven</code> metadata files and symlinks to the build outputs</li>
  <li>include the local Maven repository</li>
</ul>

<h2 id="implementation">Implementation</h2>
<p>In the <code class="language-plaintext highlighter-rouge">app</code> level <code class="language-plaintext highlighter-rouge">build.gradle</code> file, split the <code class="language-plaintext highlighter-rouge">lib</code> dependency between <code class="language-plaintext highlighter-rouge">debug</code> and <code class="language-plaintext highlighter-rouge">release</code> variant:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
    <span class="n">debugImplementation</span> <span class="nf">project</span><span class="o">(</span><span class="s1">':lib'</span><span class="o">)</span>

    <span class="kt">def</span> <span class="n">releaseVersion</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">hasProperty</span><span class="o">(</span><span class="s2">"external_version"</span><span class="o">)</span> <span class="o">?</span> <span class="n">project</span><span class="o">.</span><span class="na">external_version</span> <span class="o">:</span> <span class="s2">"local"</span>
    <span class="n">releaseImplementation</span> <span class="s2">"com.jeroenmols.lib:library:$releaseVersion"</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">lib</code> level <code class="language-plaintext highlighter-rouge">build.gradle</code> file, toggle the published version between <code class="language-plaintext highlighter-rouge">local</code> and external version:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">publishing</span> <span class="o">{</span>
    <span class="n">publications</span> <span class="o">{</span>
        <span class="n">aar</span><span class="o">(</span><span class="n">MavenPublication</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">...</span>

            <span class="n">groupId</span> <span class="o">=</span> <span class="s1">'com.jeroenmols.lib'</span>
            <span class="n">artifactId</span> <span class="o">=</span> <span class="s1">'library'</span>
            <span class="n">version</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">hasProperty</span><span class="o">(</span><span class="s2">"external_version"</span><span class="o">)</span> <span class="o">?</span> <span class="n">project</span><span class="o">.</span><span class="na">external_version</span> <span class="o">:</span> <span class="s2">"local"</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Create a local Maven repository in the <code class="language-plaintext highlighter-rouge">libs</code> folder of the <code class="language-plaintext highlighter-rouge">app</code> module:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> app/libs/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;/local
<span class="c"># example: $ mkdir -p app/libs/com/jeroenmols/lib/library/local/</span>
</code></pre></div></div>

<p>Go into the <code class="language-plaintext highlighter-rouge">artifact-id</code> folder and create a new file <code class="language-plaintext highlighter-rouge">maven-metadata-local.xml</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>app/libs/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;
<span class="nv">$ </span><span class="nb">touch </span>maven-metadata-local.xml

<span class="c"># example: $ cd app/libs/com/jeroenmols/lib/library/</span>
<span class="c">#          $ touch maven-metadata-local.xml</span>
</code></pre></div></div>

<p>Copy the following content into the <code class="language-plaintext highlighter-rouge">maven-metadata-local.xml</code> and replace the placeholders with your <code class="language-plaintext highlighter-rouge">groupId</code> and <code class="language-plaintext highlighter-rouge">artifactId</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;metadata&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>GROUP ID HERE<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>ARTIFACT ID HERE<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;versioning&gt;</span>
    <span class="nt">&lt;latest&gt;</span>local<span class="nt">&lt;/latest&gt;</span>
    <span class="nt">&lt;release&gt;</span>local<span class="nt">&lt;/release&gt;</span>
    <span class="nt">&lt;versions&gt;</span>
      <span class="nt">&lt;version&gt;</span>local<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/versions&gt;</span>
  <span class="nt">&lt;/versioning&gt;</span>
<span class="nt">&lt;/metadata&gt;</span>
</code></pre></div></div>

<p>Create symbolic links to the <code class="language-plaintext highlighter-rouge">aar</code> and <code class="language-plaintext highlighter-rouge">pom.xml</code> files.</p>

<blockquote>
  <p>Note that the file names and paths need to match exactly or this won’t work!</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Make sure the output files exist, so we can symlink them
<span class="nv">$ </span>./gradlew generatePomFileForAarPublication assembleRelease

<span class="nv">$ </span><span class="nb">cd </span>app/libs/&lt;group-id-slash-separated&gt;/&lt;artifact-id&gt;

<span class="nv">$ </span><span class="nb">ln</span> <span class="nt">-s</span> &lt;path-to-lib-build&gt;/outputs/aar/&lt;aar-file-name&gt; &lt;artifact-id&gt;-local.aar
<span class="nv">$ </span><span class="nb">ln</span> <span class="nt">-s</span> &lt;path-to-lib-build&gt;/publications/aar/pom-default.xml &lt;artifact-id&gt;-local.pom
<span class="c"># example: ln -s ../../../../../../../lib/build/outputs/aar/lib-release.aar library-local.aar</span>
<span class="c">#          ln -s ../../../../../../../lib/build/publications/aar/pom-default.xml library-local.pom</span>
</code></pre></div></div>

<p>Add the local repository to the <code class="language-plaintext highlighter-rouge">app</code> level <code class="language-plaintext highlighter-rouge">build.gradle</code> file:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">repositories</span> <span class="o">{</span>
    <span class="n">maven</span> <span class="o">{</span> <span class="n">url</span> <span class="s2">"$projectDir/libs"</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>And make sure the <code class="language-plaintext highlighter-rouge">library</code> dependencies are built when running an <code class="language-plaintext highlighter-rouge">app</code> release build by adding to the <code class="language-plaintext highlighter-rouge">app</code> level <code class="language-plaintext highlighter-rouge">build.gradle</code> file:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">afterEvaluate</span> <span class="o">{</span>
    <span class="n">preReleaseBuild</span><span class="o">.</span><span class="na">dependsOn</span><span class="o">(</span><span class="s2">":lib:assembleRelease"</span><span class="o">)</span>
    <span class="n">preReleaseBuild</span><span class="o">.</span><span class="na">dependsOn</span><span class="o">(</span><span class="s2">":lib:generatePomFileForAarPublication"</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<p>That’s it!</p>

<p>You can now test your release variant locally by changing the build variant of the <code class="language-plaintext highlighter-rouge">app</code> project to <code class="language-plaintext highlighter-rouge">release</code> in Android studio and clicking run. Or you can test an external Maven version by invoking:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew assembleRelease <span class="nt">-Pexternal_version</span><span class="o">=</span>1.0.0
</code></pre></div></div>

<h2 id="wrap-up">Wrap-up</h2>
<p>I hope this neat little trick is helpful to test your libraries. I’ve also <a href="https://github.com/JeroenMols/LibraryExample/pull/1/files">open sourced a sample project</a> that demonstrates this concept.</p>

<p>If you’ve made it this far you should probably follow me on <span><a href="https://twitter.com/molsjeroen?source=testlibraryreleasesusinganinprojectmavenrepository2020" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="library" /><category term="maven" /><category term="transitive dependencies" /><category term="gradle" /><category term="kotlin" /><summary type="html"><![CDATA[Short, powerful post on how to test the release version of libraries directly within a project without having to deploy them to Maven first.]]></summary></entry><entry><title type="html">Android library development - Dependencies</title><link href="https://jeroenmols.com/blog/2020/11/11/library-dependencies/" rel="alternate" type="text/html" title="Android library development - Dependencies" /><published>2020-11-11T00:00:00+01:00</published><updated>2020-11-11T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2020/11/11/library-dependencies</id><content type="html" xml:base="https://jeroenmols.com/blog/2020/11/11/library-dependencies/"><![CDATA[<p>Ever had a build failure while integrating an SDK? Wonder how you can avoid your SDK customers having dependency conflicts? How many transitive dependencies should your SDK have?</p>

<p>This post will cover how transitive dependencies of an Android library affect Apps integrating it.</p>

<blockquote>
  <p>This blog post is part of a series on Android libraries:</p>
  <ul>
    <li>Part 1: <a href="/blog/2020/10/28/library-gettingstarted/">Getting started</a></li>
    <li>Part 2: <a href="/blog/2020/11/04/library-modularization/">Modularization</a></li>
    <li>Part 3: <a href="/blog/2020/11/11/library-dependencies/">Transitive dependencies</a></li>
  </ul>
</blockquote>

<h2 id="introduction">Introduction</h2>
<blockquote>
  <p>This post assumes familiarity with transitive dependencies and how Maven handles those. You can learn all about that and much more in <a href="/blog/2020/10/28/library-gettingstarted/">the first part</a> of this series.</p>
</blockquote>

<p>Assume there is an existing application <code class="language-plaintext highlighter-rouge">CustomerApp</code> that is about to start using our library:</p>

<p><a href="https://jeroenmols.com/img/blog/librarydependencies/customerapp_before.png"><img src="https://jeroenmols.com/img/blog/librarydependencies/customerapp_before.png" alt="Customer app about to integrate a new library" class="align-center" /></a></p>

<p>Before integration, they have a single dependency on <code class="language-plaintext highlighter-rouge">Another library</code> that transitively depends on <code class="language-plaintext highlighter-rouge">Transitive dependency 1</code>.</p>

<p>Now when they integrate the new <code class="language-plaintext highlighter-rouge">library</code>:</p>

<p><a href="https://jeroenmols.com/img/blog/librarydependencies/customerapp_after.png"><img src="https://jeroenmols.com/img/blog/librarydependencies/customerapp_after.png" alt="Customer app after integrating a new library" class="align-center" /></a></p>

<p>They don’t just start to depend on <code class="language-plaintext highlighter-rouge">library</code>, but they also depend on all its transitive dependencies <code class="language-plaintext highlighter-rouge">Transitive dependency 1</code> and <code class="language-plaintext highlighter-rouge">Transitive dependency 2</code>.</p>

<p>All these transitive dependencies can easily cause integration issues in the host <code class="language-plaintext highlighter-rouge">CustomerApp</code>.</p>

<p>This blog post will look at the two most common issues:</p>

<ul>
  <li>conflicting transitive dependency versions</li>
  <li>incompatible transitive dependencies</li>
</ul>

<p>It’s important to note that when transitive dependency issues occur, the last integrated SDK will be blamed for these issues!!!</p>

<p><code class="language-plaintext highlighter-rouge">CustomerApp</code> was compiling fine with <code class="language-plaintext highlighter-rouge">Another library</code>, only after adding <code class="language-plaintext highlighter-rouge">library</code> the issues occurred. So as an SDK developer, this is our problem to solve.</p>

<h2 id="conflicting-dependency-versions">Conflicting dependency versions</h2>
<p>Imagine if <code class="language-plaintext highlighter-rouge">CustomerApp</code> integrates the following two SDKs:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
  <span class="n">implementation</span> <span class="s2">"com.jeroenmols:library:1.0.0"</span>
  <span class="n">implementation</span> <span class="s2">"com.example:anotherlibrary:2.0.0"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>And that both <code class="language-plaintext highlighter-rouge">library</code> and <code class="language-plaintext highlighter-rouge">anotherLibary</code> depend on a different version of a common dependency like <code class="language-plaintext highlighter-rouge">OkHttp</code>.</p>

<p><a href="https://jeroenmols.com/img/blog/librarydependencies/dependency_versions.png"><img src="https://jeroenmols.com/img/blog/librarydependencies/dependency_versions.png" alt="Customer app after integrating a new library" class="align-center" /></a></p>

<p>Now building <code class="language-plaintext highlighter-rouge">CustomerApp</code> would fail, because Gradle can’t know what <code class="language-plaintext highlighter-rouge">OkHttp</code> version to pick: <code class="language-plaintext highlighter-rouge">v3</code> or <code class="language-plaintext highlighter-rouge">v4</code>?</p>

<p>While more solutions possible, this post will cover the three most common ways this problem can be fixed:</p>

<ol>
  <li>Force dependency resolution in <code class="language-plaintext highlighter-rouge">CustomerApp</code></li>
  <li>Loosen dependency requirements in <code class="language-plaintext highlighter-rouge">library</code></li>
  <li>Remove transitive dependency from <code class="language-plaintext highlighter-rouge">library</code></li>
</ol>

<h3 id="1-force-dependency-resolution-in-customerapp">1. Force dependency resolution in <code class="language-plaintext highlighter-rouge">CustomerApp</code></h3>
<p>The first way to address this problem is by adding code in the <code class="language-plaintext highlighter-rouge">CustomerApp</code> to force a particular dependency version.</p>

<p>This can either be done by excluding the <code class="language-plaintext highlighter-rouge">OkHttp</code> version from the <code class="language-plaintext highlighter-rouge">library</code> dependency.</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span><span class="o">(</span><span class="s1">'com.jeroenmols:library:1.0.0'</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">'com.squareup.okhttp3'</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">'okhttp'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Or by forcing the resolved <code class="language-plaintext highlighter-rouge">OkHttp</code> version for all dependencies to a particular version:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">configurations</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span>
  <span class="n">resolutionStrategy</span> <span class="o">{</span>
    <span class="n">force</span> <span class="s1">'com.squareup.okhttp3:okhttp:4.9.0'</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The main advantage of this strategy is that no <code class="language-plaintext highlighter-rouge">library</code> update is required. So the developers of <code class="language-plaintext highlighter-rouge">CustomerApp</code> can apply this themselves when a conflict occurs.</p>

<p>However, this is incredibly dangerous as <code class="language-plaintext highlighter-rouge">CustomerApp</code> is now forcing <code class="language-plaintext highlighter-rouge">AnotherLibrary</code> to work with <code class="language-plaintext highlighter-rouge">OkHttp</code> version <code class="language-plaintext highlighter-rouge">4.9.0</code>, whereas <code class="language-plaintext highlighter-rouge">AnotherLibrary</code> was expecting <code class="language-plaintext highlighter-rouge">OkHttp</code> <code class="language-plaintext highlighter-rouge">3.x.x</code>!</p>

<p>And since the developers of <code class="language-plaintext highlighter-rouge">AnotherLibrary</code> never tested their SDK with the enforced version of <code class="language-plaintext highlighter-rouge">OkHttp</code>, this could cause runtime crashes (e.g. <code class="language-plaintext highlighter-rouge">ClassNotFoundException</code>), behavior differences,…</p>

<p>A second downside is that this puts the burden on the SDK customers (i.e. <code class="language-plaintext highlighter-rouge">CustomerApp</code>) to fix the problems arising from integrating your SDK.</p>

<h3 id="2-loosen-dependency-requirements-in-library">2. Loosen dependency requirements in <code class="language-plaintext highlighter-rouge">library</code></h3>
<p>A better solution is to loosen the dependency requirements of the <code class="language-plaintext highlighter-rouge">library</code>.</p>

<p>Instead of explicitly requiring version <code class="language-plaintext highlighter-rouge">OkHttp</code> version <code class="language-plaintext highlighter-rouge">4.9.0</code>, the SDK can also require a minimum version of <code class="language-plaintext highlighter-rouge">4.0.0</code> or higher in the <code class="language-plaintext highlighter-rouge">pom.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="nt">&lt;dependencies&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.squareup.okhttp3<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>okhttp3<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>[4.0.0,)<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>Notice how the <code class="language-plaintext highlighter-rouge">OkHttp</code> version is now specified as <code class="language-plaintext highlighter-rouge">[4.0.0,)</code> meaning any version of <code class="language-plaintext highlighter-rouge">4.0.0</code> or higher is supported.</p>

<p>In order to achieve this using Gradle, the <code class="language-plaintext highlighter-rouge">publishing</code> block of SDK <code class="language-plaintext highlighter-rouge">build.gradle</code> needs to contain the following:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pom</span><span class="o">.</span><span class="na">withXml</span> <span class="o">{</span>
  <span class="kt">def</span> <span class="n">dependencies</span> <span class="o">=</span> <span class="n">asNode</span><span class="o">().</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'dependencies'</span><span class="o">)</span>
  <span class="n">configurations</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s2">"releaseCompileClasspath"</span><span class="o">).</span><span class="na">getResolvedConfiguration</span><span class="o">().</span><span class="na">getFirstLevelModuleDependencies</span><span class="o">().</span><span class="na">each</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kt">def</span> <span class="n">dependency</span> <span class="o">=</span> <span class="n">dependencies</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'dependency'</span><span class="o">)</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">moduleGroup</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s1">'okhttp3'</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">dependency</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'version'</span><span class="o">,</span> <span class="s2">"[4.0.0,)"</span><span class="o">)</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">dependency</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'version'</span><span class="o">,</span> <span class="n">it</span><span class="o">.</span><span class="na">moduleVersion</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The main advantage of this strategy is that this doesn’t require any action from the <code class="language-plaintext highlighter-rouge">CustomerApp</code>.</p>

<p>On the other hand, this increases the testing burden for the developers of <code class="language-plaintext highlighter-rouge">library</code> to ensure compatibility with all supported versions of <code class="language-plaintext highlighter-rouge">OkHttp</code>.</p>

<p>Also, imagine <code class="language-plaintext highlighter-rouge">OkHttp</code> release a new major version <code class="language-plaintext highlighter-rouge">5.x.x</code> with massive breaking API changes. What version of <code class="language-plaintext highlighter-rouge">OkHttp</code> would <code class="language-plaintext highlighter-rouge">library</code> then support and force their customers to adopt?</p>

<blockquote>
  <p>Note that <code class="language-plaintext highlighter-rouge">OkHttp</code> actually solves this problem by <a href="https://jakewharton.com/java-interoperability-policy-for-major-version-updates/">including the version in their package name</a>:</p>
  <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.square.okhttp3</span>
</code></pre></div>  </div>
  <p>and Maven coordinates:</p>
  <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="s1">'com.squareup.okhttp3:okhttp3:4.9.0'</span>
</code></pre></div>  </div>
  <p>So for <code class="language-plaintext highlighter-rouge">OkHttp</code> different major versions can coexist in <code class="language-plaintext highlighter-rouge">CustomerApp</code>, but this isn’t true for all other SDKs.</p>
</blockquote>

<h3 id="3-remove-transitive-dependency-from-library">3. Remove transitive dependency from <code class="language-plaintext highlighter-rouge">library</code></h3>
<p>While obvious, this actually is a highly effective way of reducing transitive dependency conflicts. Downside is that the library needs more code to solve the challenges the dependency would.</p>

<p>This is also the only proposed solution that would be able to fully handle breaking API changes of a particular dependency that doesn’t support major versions to coexist.</p>

<h2 id="incompatible-transitive-dependencies">Incompatible transitive dependencies</h2>
<p>Similar to conflicting dependency versions, dependencies can be downright incompatible.</p>

<p>Take for instance <a href="https://developers.google.com/protocol-buffers">protocol buffers</a>, which has two different artifacts:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">protobuf-java</code></li>
  <li><code class="language-plaintext highlighter-rouge">protobuf-javalite</code> (optimized for Android)</li>
</ul>

<p>These artifacts are mostly similar but optimized for different use cases.</p>

<p>So for a <code class="language-plaintext highlighter-rouge">CustomerApp</code> with two <code class="language-plaintext highlighter-rouge">libraries</code> dependencies that transitive rely on a different <code class="language-plaintext highlighter-rouge">protobuf</code> artifact:</p>

<p><a href="https://jeroenmols.com/img/blog/librarydependencies/dependency_incompatible.png"><img src="https://jeroenmols.com/img/blog/librarydependencies/dependency_incompatible.png" alt="Customer app with incompatible transitive dependencies" class="align-center" /></a></p>

<p>Compilation will fail! Because both <code class="language-plaintext highlighter-rouge">protobuf-java</code> and <code class="language-plaintext highlighter-rouge">protobuf-javalite</code> define the same/similar classes in the same namespace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./gradlew clean assembleDebug
&gt; Task :app:checkDebugDuplicateClasses FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':myproject:checkReleaseDuplicateClasses'.
&gt; 1 exception was raised by workers:
  java.lang.RuntimeException: Duplicate class com.google.protobuf.AbstractMessageLite found in modules protobuf-java-3.11.1.jar (com.google.protobuf:protobuf-java:3.11.1) and protobuf-javalite-3.11.0.jar (com.google.protobuf:protobuf-javalite:3.11.0)
  Duplicate class com.google.protobuf.AbstractMessageLite$Builder found in modules protobuf-java-3.11.1.jar (com.google.protobuf:protobuf-java:3.11.1) and protobuf-javalite-3.11.0.jar (com.google.protobuf:protobuf-javalite:3.11.0)
  Duplicate class com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream found in modules protobuf-java-3.11.1.jar (com.google.protobuf:protobuf-java:3.11.1) and protobuf-javalite-3.11.0.jar (com.google.protobuf:protobuf-javalite:3.11.0)
     ...
</code></pre></div></div>

<p>And unfortunately for <code class="language-plaintext highlighter-rouge">protobuf</code>, this issue is very common: even Firebase performance monitoring <code class="language-plaintext highlighter-rouge">19.0.7</code> (April 2020 !!!) relied on an even different, incompatible, 4 year old <code class="language-plaintext highlighter-rouge">protobuf</code> artifact!</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">+---</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">firebase</span><span class="o">:</span><span class="n">firebase</span><span class="o">-</span><span class="nl">perf:</span><span class="mf">19.0</span><span class="o">.</span><span class="mi">7</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">firebase</span><span class="o">:</span><span class="n">firebase</span><span class="o">-</span><span class="nl">config:</span><span class="mf">19.0</span><span class="o">.</span><span class="mi">4</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="o">+---</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">firebase</span><span class="o">:</span><span class="n">firebase</span><span class="o">-</span><span class="nl">abt:</span><span class="mf">19.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">protobuf</span><span class="o">:</span><span class="n">protobuf</span><span class="o">-</span><span class="nl">lite:</span><span class="mf">3.0</span><span class="o">.</span><span class="mi">1</span>
</code></pre></div></div>

<p>So what to do when a transitive dependency of the SDK relies on the wrong dependency?</p>

<p>Let’s have a look at three possible solutions:</p>

<ol>
  <li>Substitute dependency in <code class="language-plaintext highlighter-rouge">CustomerApp</code></li>
  <li>Remove dependency from transitive dependency of <code class="language-plaintext highlighter-rouge">library</code></li>
  <li>Remove transitive dependency from <code class="language-plaintext highlighter-rouge">library</code></li>
</ol>

<h3 id="1-substitute-dependency-in-customerapp">1. Substitute dependency in <code class="language-plaintext highlighter-rouge">CustomerApp</code></h3>
<p>Similar to handling conflicting dependency versions, the <code class="language-plaintext highlighter-rouge">CustomerApp</code> can exclude the dependency:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span><span class="o">(</span><span class="s1">'com.jeroenmols:library:1.0.0'</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">'com.google.protobuf'</span><span class="o">,</span> <span class="nl">module:</span> <span class="s1">'protobuf-java'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Or force the dependency to be substituted:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">allprojects</span> <span class="o">{</span>
  <span class="n">configurations</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span>
    <span class="n">resolutionStrategy</span><span class="o">.</span><span class="na">dependencySubstitution</span> <span class="o">{</span>
      <span class="n">substitute</span> <span class="nf">module</span><span class="o">(</span><span class="s1">'com.google.protobuf:protobuf-lite'</span><span class="o">)</span> <span class="n">with</span> <span class="n">module</span><span class="o">(</span><span class="s1">'com.google.protobuf:protobuf-javalite'</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>These solutions have similar advantages and disadvantages as solution 1 for conflicting versions.</p>

<h3 id="2-remove-dependency-from-transitive-dependency">2. Remove dependency from transitive dependency</h3>
<p>Let’s look at a more interesting approach.</p>

<p>We’ll take <a href="https://github.com/streem/pbandk"><code class="language-plaintext highlighter-rouge">pbandk</code></a> as an example, a very promising <code class="language-plaintext highlighter-rouge">Kotlin</code> code generator and runtime for Protocol buffers.</p>

<p>Imagine that <code class="language-plaintext highlighter-rouge">library</code> depends on <code class="language-plaintext highlighter-rouge">pbandk</code>, which unfortunately depends on the non-optimized version of <code class="language-plaintext highlighter-rouge">protobuf</code>, causing a build failure when integrated into the <code class="language-plaintext highlighter-rouge">CustomerApp</code>:</p>

<p><a href="https://jeroenmols.com/img/blog/librarydependencies/dependency_incompatible_pbandk.png"><img src="https://jeroenmols.com/img/blog/librarydependencies/dependency_incompatible_pbandk.png" alt="Library dependency has incompatible transitive dependency" class="align-center" /></a></p>

<p>Now to fix this, we need to ensure that <code class="language-plaintext highlighter-rouge">protobuf-java</code> doesn’t get transitively added to <code class="language-plaintext highlighter-rouge">CustomerApp</code> after adding a dependency on <code class="language-plaintext highlighter-rouge">library</code>.</p>

<p>So we’ll have to add a dependency exclusion to the <code class="language-plaintext highlighter-rouge">library</code>’s <code class="language-plaintext highlighter-rouge">pom.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="nt">&lt;dependencies&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>pro.streem.pbandk<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>pbandk-runtime-jvm<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>0.9.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;exclusions&gt;</span>
      <span class="nt">&lt;exclusion&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.google.protobuf<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>protobuf-java<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;/exclusion&gt;</span>
    <span class="nt">&lt;/exclusions&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>This can be done by modifying the <code class="language-plaintext highlighter-rouge">publishing</code> block of the <code class="language-plaintext highlighter-rouge">library</code>’s <code class="language-plaintext highlighter-rouge">build.gradle</code>:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pom</span><span class="o">.</span><span class="na">withXml</span> <span class="o">{</span>
  <span class="kt">def</span> <span class="n">dependencies</span> <span class="o">=</span> <span class="n">asNode</span><span class="o">().</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'dependencies'</span><span class="o">)</span>
  <span class="n">configurations</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s2">"releaseCompileClasspath"</span><span class="o">).</span><span class="na">getResolvedConfiguration</span><span class="o">().</span><span class="na">getFirstLevelModuleDependencies</span><span class="o">().</span><span class="na">each</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kt">def</span> <span class="n">dependency</span> <span class="o">=</span> <span class="n">dependencies</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'dependency'</span><span class="o">)</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">moduleName</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s2">"pbandk"</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">dependency</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'version'</span><span class="o">,</span> <span class="n">it</span><span class="o">.</span><span class="na">moduleVersion</span><span class="o">)</span>
        <span class="kt">def</span> <span class="n">exclusions</span> <span class="o">=</span> <span class="n">dependency</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'exclusions'</span><span class="o">)</span>
        <span class="kt">def</span> <span class="n">protobufExclusion</span> <span class="o">=</span> <span class="n">exclusions</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'exclusion'</span><span class="o">)</span>
        <span class="n">protobufExclusion</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'groupId'</span><span class="o">,</span> <span class="s2">"com.google.protobuf"</span><span class="o">)</span>
        <span class="n">protobufExclusion</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'artifactId'</span><span class="o">,</span> <span class="s2">"protobuf-java"</span><span class="o">)</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">dependency</span><span class="o">.</span><span class="na">appendNode</span><span class="o">(</span><span class="s1">'version'</span><span class="o">,</span> <span class="n">it</span><span class="o">.</span><span class="na">moduleVersion</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>And don’t forget to also add <code class="language-plaintext highlighter-rouge">protobuf-javalite</code> as a direct transitive dependency to the <code class="language-plaintext highlighter-rouge">library</code>. This is needed to ensure the SDK also works in apps that don’t rely on <code class="language-plaintext highlighter-rouge">protobuf-javalite</code> yet.</p>

<p><a href="https://jeroenmols.com/img/blog/librarydependencies/dependency_incompatible_pbandkfix.png"><img src="https://jeroenmols.com/img/blog/librarydependencies/dependency_incompatible_pbandkfix.png" alt="Library dependency has incompatible transitive dependency" class="align-center" /></a></p>

<blockquote>
  <p>Note that the <code class="language-plaintext highlighter-rouge">pbandk</code> example is just as an illustration. The library is still under active development and there is an <a href="https://github.com/streem/pbandk/issues/91">open issue</a> to address this.</p>
</blockquote>

<h3 id="3-remove-transitive-dependency-from-library-1">3. Remove transitive dependency from <code class="language-plaintext highlighter-rouge">library</code></h3>
<p>Similar to solving dependency version conflicts, incompatibilities can also be solved by removing the transitive dependency altogether. Again with the disadvantage of having to write more code in the <code class="language-plaintext highlighter-rouge">library</code>.</p>

<h2 id="investigate-dependency-conflicts">Investigate dependency conflicts</h2>
<p>Finally, whenever a dependency conflict occurs, there is one Gradle command that will be a lifesaver while debugging:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew :library:dependencies
</code></pre></div></div>

<p>Which will give you a detailed overview of how each transitive dependency ends up in your classpath:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">$</span> <span class="o">./</span><span class="n">gradlew</span> <span class="o">--</span><span class="n">console</span> <span class="n">plain</span> <span class="o">:</span><span class="nl">app:</span><span class="n">dependencies</span> <span class="o">--</span><span class="n">configuration</span> <span class="n">releaseRuntimeClasspath</span>

<span class="o">&gt;</span> <span class="n">Task</span> <span class="o">:</span><span class="nl">app:</span><span class="n">dependencies</span>

<span class="o">------------------------------------------------------------</span>
<span class="n">Project</span> <span class="o">:</span><span class="n">app</span>
<span class="o">------------------------------------------------------------</span>

<span class="n">releaseRuntimeClasspath</span> <span class="o">-</span> <span class="n">Runtime</span> <span class="n">classpath</span> <span class="n">of</span> <span class="n">compilation</span> <span class="s1">'release'</span> <span class="o">(</span><span class="n">target</span>  <span class="o">(</span><span class="n">androidJvm</span><span class="o">)).</span>
<span class="o">+---</span> <span class="n">org</span><span class="o">.</span><span class="na">jetbrains</span><span class="o">.</span><span class="na">kotlin</span><span class="o">:</span><span class="n">kotlin</span><span class="o">-</span><span class="nl">stdlib:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">72</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">org</span><span class="o">.</span><span class="na">jetbrains</span><span class="o">.</span><span class="na">kotlin</span><span class="o">:</span><span class="n">kotlin</span><span class="o">-</span><span class="n">stdlib</span><span class="o">-</span><span class="nl">common:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">72</span>
<span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="n">org</span><span class="o">.</span><span class="na">jetbrains</span><span class="o">:</span><span class="nl">annotations:</span><span class="mf">13.0</span>
<span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">core</span><span class="o">:</span><span class="n">core</span><span class="o">-</span><span class="nl">ktx:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">2</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">org</span><span class="o">.</span><span class="na">jetbrains</span><span class="o">.</span><span class="na">kotlin</span><span class="o">:</span><span class="n">kotlin</span><span class="o">-</span><span class="nl">stdlib:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">71</span> <span class="o">-&gt;</span> <span class="mf">1.3</span><span class="o">.</span><span class="mi">72</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">annotation</span><span class="o">:</span><span class="nl">annotation:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">core</span><span class="o">:</span><span class="nl">core:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">2</span>
<span class="o">|</span>         <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">appcompat</span><span class="o">:</span><span class="nl">appcompat:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">annotation</span><span class="o">:</span><span class="nl">annotation:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">core</span><span class="o">:</span><span class="nl">core:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">1.3</span><span class="o">.</span><span class="mi">2</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">cursoradapter</span><span class="o">:</span><span class="nl">cursoradapter:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">fragment</span><span class="o">:</span><span class="nl">fragment:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">appcompat</span><span class="o">:</span><span class="n">appcompat</span><span class="o">-</span><span class="nl">resources:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">|</span>   
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">drawerlayout</span><span class="o">:</span><span class="nl">drawerlayout:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">collection</span><span class="o">:</span><span class="nl">collection:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span> <span class="o">(*)</span>
<span class="o">+---</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">material</span><span class="o">:</span><span class="nl">material:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">annotation</span><span class="o">:</span><span class="nl">annotation:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">1</span> <span class="o">-&gt;</span> <span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">appcompat</span><span class="o">:</span><span class="nl">appcompat:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">1.2</span><span class="o">.</span><span class="mi">0</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">cardview</span><span class="o">:</span><span class="nl">cardview:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">coordinatorlayout</span><span class="o">:</span><span class="nl">coordinatorlayout:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">core</span><span class="o">:</span><span class="nl">core:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">1.3</span><span class="o">.</span><span class="mi">2</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">annotation</span><span class="o">:</span><span class="n">annotation</span><span class="o">-</span><span class="nl">experimental:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">fragment</span><span class="o">:</span><span class="nl">fragment:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">lifecycle</span><span class="o">:</span><span class="n">lifecycle</span><span class="o">-</span><span class="nl">runtime:</span><span class="mf">2.0</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">2.1</span><span class="o">.</span><span class="mi">0</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">recyclerview</span><span class="o">:</span><span class="nl">recyclerview:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span> <span class="o">-&gt;</span> <span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">transition</span><span class="o">:</span><span class="nl">transition:</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>    <span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="o">|</span>    <span class="o">+---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">vectordrawable</span><span class="o">:</span><span class="nl">vectordrawable:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">0</span> <span class="o">(*)</span>
<span class="o">|</span>    <span class="err">\</span><span class="o">---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">viewpager2</span><span class="o">:</span><span class="nl">viewpager2:</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">|</span>         <span class="err">\</span><span class="o">---</span> <span class="o">...</span>
<span class="err">\</span><span class="o">---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">constraintlayout</span><span class="o">:</span><span class="nl">constraintlayout:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">3</span>
     <span class="err">\</span><span class="o">---</span> <span class="n">androidx</span><span class="o">.</span><span class="na">constraintlayout</span><span class="o">:</span><span class="n">constraintlayout</span><span class="o">-</span><span class="nl">solver:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">3</span>

<span class="o">(*)</span> <span class="o">-</span> <span class="n">dependencies</span> <span class="n">omitted</span> <span class="o">(</span><span class="n">listed</span> <span class="n">previously</span><span class="o">)</span>
</code></pre></div></div>

<p>Notice the sheer amount of dependencies that the standard Android project template already has!</p>

<h2 id="recommendation">Recommendation</h2>
<p>Transitive SDK dependencies can create very challenging issues. These tend to be hard to predict as they only pop up for certain combinations of dependencies in a <code class="language-plaintext highlighter-rouge">CustomerApp</code>.</p>

<p>Worse even, their blame might be pushed onto the wrong SDK. And your SDK might be blamed for a conflict caused by an obsolete transitive <code class="language-plaintext highlighter-rouge">Firebase</code> dependency.</p>

<p>The only foolproof way to solve these issues is to not use any transitive dependencies for your <code class="language-plaintext highlighter-rouge">library</code>.</p>

<p>And while that’s likely not very practical, here’s a few tips to avoid transitive dependency problems:</p>

<ul>
  <li>minimize transitive dependencies
    <ul>
      <li>often it’s easy to write your own (minimal) solution</li>
      <li>focus on commonly used dependencies (e.g. OkHttp) -&gt; <code class="language-plaintext highlighter-rouge">CustomerApp</code> likely has this already</li>
      <li>investigate breaking changes are handled</li>
    </ul>
  </li>
  <li>specify minimum versions instead of specific ones</li>
  <li>only rely on stable transitive dependencies (no RC, Beta or Alpha)</li>
  <li>use android optimized dependencies</li>
</ul>

<p>Finally, to combat device fragmentation, Android has a rich set of <a href="https://developer.android.com/jetpack">Jetpack libraries</a>. These have become so ubiquitous, that it’s close to impossible not to rely on them when developing an Android app or SDK.</p>

<p>Therefore, and thanks to their amazing track record of backward compatibility, it’s fine to rely on <code class="language-plaintext highlighter-rouge">AndroidX</code> dependencies. Most tips above remain valid (e.g. min version, no alpha’s,…) and keep in mind that some <code class="language-plaintext highlighter-rouge">AndroidX</code> libraries may need Google play services in order to work.</p>

<h2 id="wrap-up">Wrap-up</h2>
<p>Transitive dependencies problems only occur when a <code class="language-plaintext highlighter-rouge">CustomerApp</code> has certain combinations of dependencies. This makes them hard to predict and quite disruptive for both the SDK as app developers.</p>

<p>Try to reduce the <code class="language-plaintext highlighter-rouge">library</code>’s transitive dependencies to a minimum and focus on popular, Android optimized dependencies.</p>

<p>If you’ve made it this far you should probably follow me on <span><a href="https://twitter.com/molsjeroen?source=androidlibrarydevelopment-dependencies2020" class="ga-link" target="_blank">Twitter</a></span>
. Feel free to leave a comment below!</p>]]></content><author><name>Jeroen Mols</name></author><category term="blog" /><category term="android" /><category term="library" /><category term="maven" /><category term="transitive dependencies" /><category term="gradle" /><category term="kotlin" /><summary type="html"><![CDATA[Ever had a build failure while integrating an SDK? Wonder how you can avoid your SDK customers having dependency conflicts? How many transitive dependencies should your SDK have?]]></summary></entry></feed>