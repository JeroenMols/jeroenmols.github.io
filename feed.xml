<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://jeroenmols.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jeroenmols.com/" rel="alternate" type="text/html" /><updated>2017-12-18T21:49:17+01:00</updated><id>https://jeroenmols.com/</id><title type="html">Jeroen Mols</title><subtitle>Blog and portfolio of Jeroen Mols, the Android developer you should hire.</subtitle><author><name>Jeroen Mols</name></author><entry><title type="html">The curious case of haunting fragments</title><link href="https://jeroenmols.com/blog/2017/12/18/fragmentback/" rel="alternate" type="text/html" title="The curious case of haunting fragments" /><published>2017-12-18T00:00:00+01:00</published><updated>2017-12-18T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/12/18/fragmentback</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/12/18/fragmentback/">&lt;p&gt;Do Fragment transactions and back navigation have no more secrets for you? Well then you should try to solve the mystery in this post, where a Fragment (literally) came to haunt us…&lt;/p&gt;

&lt;p&gt;Seemingly simple Fragment transactions can sometimes have unintended side effects. While investigating, we’ll learn how Fragment transactions actually work.&lt;/p&gt;

&lt;h2 id=&quot;part-1-the-haunt&quot;&gt;Part 1: the haunt&lt;/h2&gt;
&lt;p&gt;Let’s build a very straightforward app that shows all today’s calendar events for a particular user. To do so, users will obviously have to log in first.&lt;/p&gt;

&lt;p&gt;Assume now that the app consists out of a single screen that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;either shows today’s events if user is logged in&lt;/li&gt;
  &lt;li&gt;otherwise shows a placeholder + login button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jeroenmols.com/img/blog/fragmentback/app_explanation.png&quot;&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/app_explanation.png&quot; alt=&quot;Main screens shows either list of events or a placeholder with login button&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The login is a two-step flow that consists out of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt;. Afterwards, the app navigates back to the main screen to show the events.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jeroenmols.com/img/blog/fragmentback/app_flow_simplified.png&quot;&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/app_flow_simplified.png&quot; alt=&quot;Event app with login flow simplified&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that for simplicity we don’t display the events when navigating back, but instead show the placeholder screen again after successful login.&lt;/p&gt;

&lt;p&gt;A simple implementation for all Fragment transactions could be:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that we only add the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt; to the back stack! This way one single back would always take the user back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodayFragment&lt;/code&gt;, making it super easy to navigate back when log in was successful.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoginSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that gives surprising results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/fragmentback_ghost.gif&quot; alt=&quot;Password fragment is back to haunt us&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; is back to haunt us!&lt;/p&gt;

&lt;h2 id=&quot;part-2-investigative-development&quot;&gt;Part 2: investigative development&lt;/h2&gt;
&lt;p&gt;Let’s have another look at the sequence of transactions that takes place:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since a replace is just a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;remove()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt; we can rewrite this to:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it is important to know that the FragmentTransactionManager only saves the FragmentTransactions that were executed, not the Fragments themselves!&lt;/p&gt;

&lt;p&gt;Consequently, when you press back in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt;, it won’t show all Fragments that were present before the Transaction! Instead, it will revert the previous Transaction that was added to the back stack:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which will then be executed in reverse:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But because we are on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt;, which has replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt;, there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNameFragment&lt;/code&gt; in this situation!&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hence nothing is removed and the &lt;code class=&quot;highlighter-rouge&quot;&gt;TodayFragment&lt;/code&gt; is added leaving the users with both the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TodayFragment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/fragmentback/app_haunting.png&quot; alt=&quot;Haunting password fragment&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-3-mystery-solved&quot;&gt;Part 3: mystery solved&lt;/h2&gt;
&lt;p&gt;As a first stab, you could say that this problem is caused by transaction three not being added to the back stack. So why not also add that transaction and do a double back.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoginSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While simple, this actually won’t work! After calling &lt;code class=&quot;highlighter-rouge&quot;&gt;onBackPressed()&lt;/code&gt; the first time, the fragment will be detached from its activity, causing a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; on accessing the activity for the second back press.&lt;/p&gt;

&lt;p&gt;But even if that would’ve worked, it would still be a poor idea because this way the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; has hardcoded in it that it’s preceded by exactly one Fragment. Should you ever change that, this would break.&lt;/p&gt;

&lt;p&gt;Alternatively you could assign a tag to the first &lt;code class=&quot;highlighter-rouge&quot;&gt;addToBackStack&lt;/code&gt; invocation and add every transaction to the back stack:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todayFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userNameFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addToBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoginSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POP_BACK_STACK_INCLUSIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That actually works! But unfortunately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordFragment&lt;/code&gt; still needs to know what the first screen of the login flow is… This won’t just break easily, but it also makes it very complex to build dynamic login flows.&lt;/p&gt;

&lt;p&gt;So what would be the clean way of setting it up?&lt;/p&gt;

&lt;p&gt;Well actually… since all login screens together form a separate flow, why not just move them all to a single &lt;code class=&quot;highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;That has many advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Default way of reusing app parts on Android&lt;/li&gt;
  &lt;li&gt;Screens in the flow don’t know about each other&lt;/li&gt;
  &lt;li&gt;Ability to pass back a result&lt;/li&gt;
  &lt;li&gt;Better fits multi-module architectures&lt;/li&gt;
  &lt;li&gt;Super simple back handling: &lt;code class=&quot;highlighter-rouge&quot;&gt;activity.finish()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Fragment transactions are a surprisingly simple concept of adding/removing and reversing those operations. When navigations become complex, consider moving parts of the flow to a separate activity.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=thecuriouscaseofhauntingfragments2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below or check out &lt;a href=&quot;https://github.com/JeroenMols/FragmentBackNavigation&quot;&gt;the code&lt;/a&gt; on GitHub!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="fragment" /><category term="navigation" /><summary type="html">Do Fragment transactions and back navigation have no more secrets for you? Well then you should try to solve the mystery in this post, where a Fragment (literally) came to haunt us…</summary></entry><entry><title type="html">The 100% code coverage problem</title><link href="https://jeroenmols.com/blog/2017/11/28/coveragproblem/" rel="alternate" type="text/html" title="The 100% code coverage problem" /><published>2017-11-28T00:00:00+01:00</published><updated>2017-11-28T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/11/28/coveragproblem</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/11/28/coveragproblem/">&lt;p&gt;While you may be tempted to strive for 100% code coverage, that would be a horrible idea. Besides some code being hard to test, the concept of coverage is actually fundamentally limited.&lt;/p&gt;

&lt;p&gt;This post will deep dive in what code coverage actually means, detail why you should never set coverage goals and help you get the most value out of this concept.&lt;/p&gt;

&lt;h2 id=&quot;app-coverage&quot;&gt;App coverage&lt;/h2&gt;
&lt;p&gt;Take a step back and try to answer the following question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your app has 100% code coverage, are you then sure everything will work as expected? (i.e. there are no bugs) Why/why not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Well obviously no! Because even if all your classes have 100% coverage, that still doesn’t mean they will correctly interact with each other.&lt;/p&gt;

&lt;p&gt;For instance your JSON parser could get an unexpected response back from the web server. (Note that this is typically something you address with integration tests.)&lt;/p&gt;

&lt;h2 id=&quot;class-coverage&quot;&gt;Class coverage&lt;/h2&gt;
&lt;p&gt;Let’s narrow down the scope and look at one single very focussed class e.g. a Calculator class.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If one single focussed class has 100% code coverage, are you then sure everything will work as expected for that class? (i.e. there are no bugs) Why/why not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Mmmmm trickier…&lt;/p&gt;

&lt;p&gt;But the answer is still clearly no!&lt;/p&gt;

&lt;p&gt;This is because code coverage doesn’t tell you anything about the quality of your tests. It only counts what lines of code are executed during tests and what aren’t.&lt;/p&gt;

&lt;p&gt;A good Calculator test (with 100% line coverage) would be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfOneAndThreeShouldBeFour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But even the same test without assert would result in 100% line coverage:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumOfOneAndThreeShouldBeFourWithoutAssert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Calculator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That test is just plain useless! It doesn’t prevent you from changing the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt; at all.&lt;/p&gt;

&lt;h2 id=&quot;code-coverage--quality-of-tests&quot;&gt;Code coverage != quality of tests&lt;/h2&gt;
&lt;p&gt;So if we remove all asserts from our test suite, our code coverage would remain the same. Interesting… what else is broken with code coverage?&lt;/p&gt;

&lt;p&gt;Even if you have asserts, code coverage doesn’t guarantee that you’ve covered your functionality. For instance if we change our &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; class and hardcode the result of the sum:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All above tests would still pass, code coverage would be 100% but your code doesn’t functionally do what it should. We would need to add multiple tests (covering the same line of code) to guarantee that.&lt;/p&gt;

&lt;p&gt;So coverage doesn’t ensure your tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;do an actual assert&lt;/li&gt;
  &lt;li&gt;are complete (cover all functionality)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;use-for-coverage&quot;&gt;Use for coverage&lt;/h2&gt;
&lt;p&gt;Hopefully it is clear now that you should never use code coverage as a goal or KPI (key performance indicator). This is because the tool can too easily be fooled and 100% coverage is in that regard meaningless.&lt;/p&gt;

&lt;p&gt;Even if coverage wouldn’t be flawed, it still would be a mistake to try and get 100% coverage. While everything can be tested, not everything is easy to test!&lt;/p&gt;

&lt;p&gt;Think about UI animations, communication between Threads, operations on filesystem,…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/coverageproblem/effortvalue.png&quot; alt=&quot;Everything can be tested, but at some point the effort gets bigger than the value you could get out of those tests.&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trying to test complex things doesn’t just take way to much effort. The resulting tests usually also tend to be so complex that they will end up being a maintenance burden. Wasted effort with hardly any value in return.&lt;/p&gt;

&lt;p&gt;Well then, how should you use coverage?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The real value is in the evolution of code coverage over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assume the team is proficient in writing &lt;a href=&quot;https://jeroenmols.com/blog/2017/02/16/unittests/&quot;&gt;high quality tests&lt;/a&gt; and has the ambition to have everything well tested, then code coverage shouldn’t decrease right?&lt;/p&gt;

&lt;p&gt;Why not use it to identify parts of your app that should get some extra testing love?&lt;/p&gt;

&lt;p&gt;Or how about automatically adding a coverage report to every pull request? This is something I do for all my &lt;a href=&quot;https://github.com/JeroenMols/LandscapeVideoCamera/pull/49&quot;&gt;open source projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/coverageproblem/coveragereport.png&quot; alt=&quot;Code coverage on pull requests&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the next time your boss asks you to have 100% code coverage, you know what to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;generate all your tests using a &lt;a href=&quot;https://plugins.jetbrains.com/plugin/8326-generate-tests&quot;&gt;tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;claim your bonus&lt;/li&gt;
  &lt;li&gt;go back to doing proper engineering and empower yourself with coverage to build something your proud of.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Code coverage can be an incredibly powerful tool to improve the quality of your code as long as you don’t blindly optimize for maximum coverage.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=the100%codecoverageproblem2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="testing" /><category term="coverage" /><summary type="html">While you may be tempted to strive for 100% code coverage, that would be a horrible idea. Besides some code being hard to test, the concept of coverage is actually fundamentally limited.</summary></entry><entry><title type="html">Droidcon UK slides</title><link href="https://jeroenmols.com/blog/2017/10/27/droidconuk/" rel="alternate" type="text/html" title="Droidcon UK slides" /><published>2017-10-27T00:00:00+02:00</published><updated>2017-10-27T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/10/27/droidconuk</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/10/27/droidconuk/">&lt;p&gt;Had a blast visiting Droidcon UK this year and wanted to do a quick post to link to all of it’s wonderful content.&lt;/p&gt;

&lt;h2 id=&quot;conference-slides&quot;&gt;Conference slides&lt;/h2&gt;
&lt;p&gt;While you can find all recordings &lt;a href=&quot;https://skillsmatter.com/conferences/8265-droidcon-london-2017#skillscasts&quot;&gt;here&lt;/a&gt;, I often find it useful to be able to quickly scan through the slides. Hence I bundled everything I could already from socials.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jeroenmols/deep-into-the-iot-trenches-how-to-build-a-connected-product&quot;&gt;IoT from the trenches - How to build a connected product&lt;/a&gt; by Jeroen Mols&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/colabug/the-creative-technologist&quot;&gt;The Creative Technologist!&lt;/a&gt; by Corey Latislaw&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://photos.google.com/share/AF1QipPv2vuQuVln5ASkKskgxIGWvh5E_Gtx4rEQR9GW1USQAo0ir0-msywha4mcA8Vzgg?key=NllER3QwalRjTXN4alRzejJtdExYV054ajlhd3VB&quot;&gt;Vector Workflows&lt;/a&gt; by Nick Butcher&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/erikhellman/my-app-is-smarter-than-your-app&quot;&gt;My app is smarter than your app&lt;/a&gt; by Erik Hellman&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jakewharton/sinking-your-teeth-into-bytecode-droidcon-uk-2017&quot;&gt;Sinking your teeth into byte code&lt;/a&gt; by Jake Wharton&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/lisawray/tips-for-library-development-from-a-startup-developer&quot;&gt;Tips for Library Development from a Startup Developer&lt;/a&gt; by Lisa Wray&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/igorwojda/why-do-we-need-clean-architecture&quot;&gt;Why do we need Clean Architecture&lt;/a&gt; by Igor Wojda&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://photos.google.com/share/AF1QipNFHDcQ8dYK_qMxCjPU4vp1mWQZUEYWHvLklKRAmruZ_z5xmQptv8WPsUjEH5_zlw?key=azg3OUFTUFV3d0xwaF9QTUllYUUybzhlcFZEckRR&quot;&gt;Becoming a master window fitter&lt;/a&gt; by Chris Banes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/maltzj/multiplying-your-impact-through-mentoring-droidcon-london-2017&quot;&gt;Multiplying your impact through mentoring&lt;/a&gt; by Jonathan Maltz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/fabio_collini/testing-android-apps-based-on-dagger-and-rxjava-droidcon-uk/1&quot;&gt;Testing Android apps based on Dagger and RxJava&lt;/a&gt; by
Fabio Collini&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/e/2PACX-1vRHA5uSq_Zn9qCg-Lx0BYWjDoIw3Cm8ui19MdLTDtfs54YjiQTjpsBLF1fCgXlGCJOBaYuf1QNCR170/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g280bfd46a0_0_17&quot;&gt;Poor programming patterns and how to avoid them&lt;/a&gt; by Alice Yuan&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/raulh82vlc/building-a-minimum-viable-product-mvp-with-face-recognition-and-ar-in-android-at-droidcon-london-2017&quot;&gt;Building a “Minimum Viable Product” (MVP) with Face recognition and AR in Android&lt;/a&gt; by Raul Hernandez Lopez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/stkent/bluetooth-low-energy-on-android-top-tips-for-the-tricky-bits-v3-droidcon-london&quot;&gt;Bluetooth Low Energy on Android: Top Tips for the Tricky Bits&lt;/a&gt; by Stuart Kent&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/nightlynexus/making-dogfood-builds-testable-and-fun&quot;&gt;Making Dogfood Builds Testable and Fun&lt;/a&gt; by Eric Cochran&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mplacona/these-are-a-few-of-my-favourite-android-things&quot;&gt;These are a few of my favourite (Android) Things&lt;/a&gt; by Marcos Placona&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/pakoito/short-about-memory-management-in-fully-reactive-apps&quot;&gt;About Memory Management in Fully Reactive Apps&lt;/a&gt; by Paco Estevez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/vrallev/doo-z-z-z-z-z-e&quot;&gt;Doo z z z z z e&lt;/a&gt; by Ralf Wondratschek‏&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/bmonjoie/droidconuk-2017-opengl-a-noobs-guide-for-android-developers&quot;&gt;OpenGL - A noob’s guide for Android developers&lt;/a&gt; by Benjamin Monjoie&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1hnWTlKi95_VhX1T0s4MnT0PrVq5bRutY2WsSvFARjh8/present?slide=id.g267d5be2b1_0_0&quot;&gt;Through the looking-glass eyes of an Android&lt;/a&gt; by Adrián Catalán&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/marianeum/travelling-across-asia-our-journey-from-java-to-kotlin&quot;&gt;Travelling across Asia - Our journey from Java to Kotlin&lt;/a&gt; by Amal Kakaiya and Maria Neumayer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitpitch.com/xgouchet/Talks/DroidconUK_AutoMergeTool&quot;&gt;Merge like it’s 2099&lt;/a&gt; by Xavier Gouchet&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/e/2PACX-1vRHA5uSq_Zn9qCg-Lx0BYWjDoIw3Cm8ui19MdLTDtfs54YjiQTjpsBLF1fCgXlGCJOBaYuf1QNCR170/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000&amp;amp;slide=id.g280bfd46a0_0_17&quot;&gt;Poor programming patterns and how to avoid them&lt;/a&gt; by Alice Yuan&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/codingchick/android-internals-for-developers&quot;&gt;Android Internals for Developers&lt;/a&gt; by Effie Barak&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/tysmith/deep-android-integrations&quot;&gt;Deep Android Integrations&lt;/a&gt; by Ty Smith&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/gdglviv/britt-barak-when-your-apps-asleep&quot;&gt;When your app’s asleep&lt;/a&gt; by Britt Barak&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mauin/modularizing-android-applications&quot;&gt;Modularizing Android Applications&lt;/a&gt; by Marvin Ramin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jinqian/droidcon-london-heat-the-neurons-of-your-smartphone-with-deep-learning&quot;&gt;Heat the neurons of your smartphone with Deep Learning&lt;/a&gt; by Qian Jin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/AgentK/kotlin-coroutines-and-android-sitting-in-a-tree&quot;&gt;Kotlin Coroutines and Android sitting in a tree&lt;/a&gt; by Kai Koenig&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/brompwnie/DroidConLondon2017/blob/master/Hacking%20Android.pdf&quot;&gt;Hacking Android, a Hacker’s narrative&lt;/a&gt; by Chris Le Roy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/e/2PACX-1vQ92zS6_X-ExPBTNO4uFfFOVee5NW3NZ0iYClzrvO_TTRmvNBNVSIfA7jQohOwn_lvsYWnoT7qk-URj/pub?start=false&amp;amp;loop=false&amp;amp;delayms=30000&amp;amp;slide=id.p&quot;&gt;Commonly overlooked areas of security&lt;/a&gt; By Clive Lee&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mallikapotter/accessibility-at-scale-droidcon-uk-2017&quot;&gt;Accessibility @ Scale&lt;/a&gt; by Mallika Potter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to the Skills Matter team for organizing a top notch conference! To all sponsors for making this event possible. And to the entire Android community for being so awesome!&lt;/p&gt;

&lt;p&gt;Hope to see you all next year!&lt;/p&gt;

&lt;p&gt;Helpful? Got extra slides? Hit me up on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=droidconukslides2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="conference" /><category term="droidconuk" /><summary type="html">Had a blast visiting Droidcon UK this year and wanted to do a quick post to link to all of it’s wonderful content.</summary></entry><entry><title type="html">The career opportunity called Kotlin</title><link href="https://jeroenmols.com/blog/2017/09/13/kotlinopportunity/" rel="alternate" type="text/html" title="The career opportunity called Kotlin" /><published>2017-09-13T00:00:00+02:00</published><updated>2017-09-13T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/09/13/kotlinopportunity</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/09/13/kotlinopportunity/">&lt;p&gt;This isn’t another post about the benefits of using Kotlin. Hell, I’m not even going to cover any of its language features. Nor will I try to convince you to make the switch.&lt;/p&gt;

&lt;p&gt;In contrast, this post will talk career. How learning a new language makes you a better developer and ensures you stay relevant. And in that regards, Kotlin now presents a golden opportunity.&lt;/p&gt;

&lt;h2 id=&quot;why-you-should-learn-a-new-programming-language&quot;&gt;Why you should learn a new programming language&lt;/h2&gt;
&lt;p&gt;Predicting the future is nearly impossible. But 10 years ago (2007) there where no smartphone apps… And 10 years before that (1997) well… dot-com bubble anyone?&lt;/p&gt;

&lt;p&gt;So how will the future look like in 10 years from now? Or 20 years?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only sure thing is that you’ll still be working as retirement age continues to be raised.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two things are likely to happen though:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Software will become even more ubiquitous than today&lt;/li&gt;
  &lt;li&gt;The platform you’re now developing for is no longer relevant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Differently put: your software skills will still be needed, but you’ll have to switch programming languages several times along the way.&lt;/p&gt;

&lt;p&gt;Say what?&lt;/p&gt;

&lt;p&gt;Learning a new programming language isn’t easy! And I will have to do that multiple times? Even when I’m 40 or 50?&lt;/p&gt;

&lt;p&gt;Yes, absolutely!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But here’s the thing: while there are hundreds of programming languages, &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2012/12/19/Three-Paradigms.html&quot;&gt;programming concepts are finite&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And with every language you learn, you pick up a couple extra of those concepts.&lt;/p&gt;

&lt;p&gt;So while learning your first programming language is really time consuming. Your second will already go slightly smoother and after your third you’ll realize: “Hey Kotlin coroutines are like C# async/await, but then slightly different”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Learning a new language becomes easier with every language you learn. And every time you learn a new language, your horizon broadens and you pick up tons of new widely applicable software concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;challenges-in-learning-a-new-language&quot;&gt;Challenges in learning a new language&lt;/h2&gt;
&lt;p&gt;While the previous statement may be true, you hardly ever learn a programming language alone.&lt;/p&gt;

&lt;p&gt;For instance while learning Android you need to learn the core platform concepts (e.g. activity lifecycle), environment (e.g battery constraints), Android APIs, …&lt;/p&gt;

&lt;p&gt;And that’s just to get you started. If you really want to get productive you’ll also have to figure out what 3rd party libraries to use, how to get the most out of the IDE and especially how to write tests effectively.&lt;/p&gt;

&lt;p&gt;So imagine you want to learn how to build a web app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What technology do you use? Ruby on rails, Javascript,…?&lt;/li&gt;
  &lt;li&gt;What Javascript framework should you use?&lt;/li&gt;
  &lt;li&gt;How does a DOM work?&lt;/li&gt;
  &lt;li&gt;Do I use a text editor or are there any good IDE’s?&lt;/li&gt;
  &lt;li&gt;How/where do I deploy my web app?&lt;/li&gt;
  &lt;li&gt;How can I find the answers to my problems?&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s a lot to take in, right?&lt;/p&gt;

&lt;p&gt;Learning all of this at once can easily become a very frustrating experience. You’ll manage, I’m sure, but it will take you quite some time before you’ll become productive.&lt;/p&gt;

&lt;h2 id=&quot;why-your-next-language-should-be-kotlin&quot;&gt;Why your next language should be Kotlin&lt;/h2&gt;
&lt;p&gt;Here’s where Kotlin enters the game. Suddenly every Android developer has gotten the opportunity to learn a new, modern language inside of his/her already familiar cocoon.&lt;/p&gt;

&lt;p&gt;You’re already used to every Android problem you may encounter. You know the ins and outs of Android studio. And I’ll be damned if you’re not a StackOverflow wizard by now!&lt;/p&gt;

&lt;p&gt;So grab the opportunity to learn a new language without it being too frustrating. Learn those extra programming concepts that will remain relevant throughout your entire career. Have your horizon broadened by new concepts and ways of thinking.&lt;/p&gt;

&lt;p&gt;I’m not saying you must learn Kotlin. But learning a new programming language is inevitable if you’re aspiring a technical career. And Kotlin presents a damn fine opportunity to keep your sanity while you’re at it.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Learning a new programming language is essential in staying relevant as a software developer. Thanks to Kotlin, Android developers can now learn a new language without the frustration of all boilerplate around it.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=thecareeropportunitycalledkotlin2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="kotlin" /><category term="career" /><summary type="html">This isn’t another post about the benefits of using Kotlin. Hell, I’m not even going to cover any of its language features. Nor will I try to convince you to make the switch.</summary></entry><entry><title type="html">Embracing Java 8 language features</title><link href="https://jeroenmols.com/blog/2017/07/21/java8language/" rel="alternate" type="text/html" title="Embracing Java 8 language features" /><published>2017-07-21T00:00:00+02:00</published><updated>2017-07-21T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/07/21/java8language</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/07/21/java8language/">&lt;p&gt;For years Android developers have been limited to Java 6 features. While RetroLambda or the experimental Jack toolchain would help, proper support from Google was notably missing.&lt;/p&gt;

&lt;p&gt;Finally, Android Studio 3.0 brings (backported!) support for most Java 8 features. Continue reading to learn how those work and why you should upgrade.&lt;/p&gt;

&lt;h2 id=&quot;enabling-java-8-features&quot;&gt;Enabling java 8 features&lt;/h2&gt;
&lt;p&gt;While Android Studio already supported many features in the &lt;a href=&quot;https://developer.android.com/guide/platform/j8-jack.html&quot;&gt;Jack toolchain&lt;/a&gt;, starting from Android Studio 3.0 they are supported in the default toolchain.&lt;/p&gt;

&lt;p&gt;First of all, make sure you disable Jack by removing the following from your main &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Remove the jackOptions if they exist&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jackOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And add the following configuration instead:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_1_8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;targetCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_1_8&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also make sure you have the latest Gradle plugin in your root &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.tools.build:gradle:3.0.0-alpha7'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations, you can now use most Java 8 features on all API levels!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: In case you’re migrating from &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot;&gt;RetroLambda&lt;/a&gt;, the official documentation has a more extensive &lt;a href=&quot;https://developer.android.com/studio/write/java8-support.html#migrate&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lambdas&quot;&gt;Lambda’s&lt;/h2&gt;
&lt;p&gt;Passing a listener to another class in Java 6 is quite verbose. A typical case would be where you add an &lt;code class=&quot;highlighter-rouge&quot;&gt;OnClickListener&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lambda’s can dramatically simplify this to the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that almost all boilerplate is removed: no access modifier, no return type and no method name!&lt;/p&gt;

&lt;p&gt;Now how do lambda’s actually work?&lt;/p&gt;

&lt;p&gt;They are syntactic sugar that reduce the need for anonymous class creation whenever you have an interface with exactly one method. We call such interfaces functional interfaces and &lt;code class=&quot;highlighter-rouge&quot;&gt;OnClickListener&lt;/code&gt; is an example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// A functional interface has exactly one method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnClickListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically the lambda consists out of a three parts:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;declaration of all method arguments between brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;an arrow &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;code that needs to execute between brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that in many cases even the brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; can be removed. For more details have a look at the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;method-references&quot;&gt;Method references&lt;/h2&gt;
&lt;p&gt;Recall that lambda expressions remove a lot of boilerplate code for functional interfaces. Method references take that concept one step further when the lambda calls a method that already has a name.&lt;/p&gt;

&lt;p&gt;In the following example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All the lambda does is redirecting the work to an existing &lt;code class=&quot;highlighter-rouge&quot;&gt;doSomething()&lt;/code&gt; method. In such a case, a method reference simplifies things further to:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the referenced method must take exactly the same parameters as the functional interface:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// functional interface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnClickListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// referenced method: must take View as argument, because onClick() does&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how do method references work?&lt;/p&gt;

&lt;p&gt;They are again syntactic sugar to simplify a lambda expression that invokes an existing method. They can reference to:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;static methods&lt;/td&gt;
      &lt;td&gt;MyClass::doSomething&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;instance method of object&lt;/td&gt;
      &lt;td&gt;myObject::doSomething&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;MyClass:: new&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;instance method of any argument type&lt;/td&gt;
      &lt;td&gt;String::compare&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more examples about this have a look at the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;default-interface-methods&quot;&gt;Default interface Methods&lt;/h2&gt;
&lt;p&gt;Default methods make it possible to add new methods to an interface without breaking all classes that implement that interface.&lt;/p&gt;

&lt;p&gt;Imagine if you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;MyView&lt;/code&gt; interface that is implemented by a &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFragment&lt;/code&gt; (typical MVP scenario):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you now want to add an extra method to &lt;code class=&quot;highlighter-rouge&quot;&gt;MyView&lt;/code&gt; your code will no longer compile, until &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFragment&lt;/code&gt; also implements that new method. This is annoying, and can be even problematic when many classes are implementing said interface.&lt;/p&gt;

&lt;p&gt;Therefore Java 8 now allows you to define default methods that provide a standard implementation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hideProgressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something here&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how do default methods work?&lt;/p&gt;

&lt;p&gt;Just define a method with the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; keyword in the interface and provide an actual default method body.&lt;/p&gt;

&lt;p&gt;To learn more about this feature, have a look at the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-started&quot;&gt;How to get started&lt;/h2&gt;
&lt;p&gt;While this all might seem a bit overwhelming, Android Studio actually offers amazing quick fixes once you enable Java 8 features.&lt;/p&gt;

&lt;p&gt;Just use &lt;code class=&quot;highlighter-rouge&quot;&gt;alt/option&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;enter&lt;/code&gt; to convert a functional interface to a lamba or a lambda to a method reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/java8language/androidstudioconversion.gif&quot; alt=&quot;Java 8 language quick fixes&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a great way to get familiar with these new features and allows you to write code like you’re used to. After enough quick fixes by Android Studio you’ll learn in what cases a lambda or method reference would be possible and start writing them yourself.&lt;/p&gt;

&lt;h2 id=&quot;supported-features&quot;&gt;Supported features&lt;/h2&gt;
&lt;p&gt;While not all Java 8 features have been backported yet, Android Studio 3.0 offers plenty more features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&quot;&gt;static interface methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html&quot;&gt;type annotations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html&quot;&gt;repeating annotations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&quot;&gt;try with resources&lt;/a&gt; (all versions, no longer min SDK 19)&lt;/li&gt;
  &lt;li&gt;Java 8 APIs (e.g. stream) -&amp;gt; min SDK 24&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Thanks to Java 8 features, a lot of code can be simplified into lambda’s or method references. Android Studio auto convert is the easiest way to start learning these features.&lt;/p&gt;

&lt;p&gt;If you’ve made it this far you should probably follow me on &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=embracingjava8languagefeatures2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;&lt;/span&gt;
. Feel free leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="tools" /><category term="java" /><summary type="html">For years Android developers have been limited to Java 6 features. While RetroLambda or the experimental Jack toolchain would help, proper support from Google was notably missing.</summary></entry><entry><title type="html">Implementation vs API dependency</title><link href="https://jeroenmols.com/blog/2017/06/14/androidstudio3/" rel="alternate" type="text/html" title="Implementation vs API dependency" /><published>2017-06-14T00:00:00+02:00</published><updated>2017-06-14T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/06/14/androidstudio3</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/06/14/androidstudio3/">&lt;p&gt;Upgrading to Android studio 3.0 territory will make building multi-module projects a lot faster, but it also means a breaking Gradle plugin API change unfortunately.&lt;/p&gt;

&lt;p&gt;This blog post will detail all benefits of this change and guide you through the upgrade process.&lt;/p&gt;

&lt;h2 id=&quot;problem-situation&quot;&gt;Problem situation&lt;/h2&gt;
&lt;p&gt;To understand the limitations of the old Gradle plugin 2.0 build system, consider the following project with multiple layers of modules:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudio3/project.png&quot; alt=&quot;Base project with multiple modules&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the bottom most module, there are basically two different changes you could make:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Implementation change: internal change, doesn’t modify the external interface of the module&lt;/li&gt;
  &lt;li&gt;Application binary interface (ABI) change: modify the external interface of the module&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: In what follows, all recompiled modules will be highlighted in red.&lt;/p&gt;

&lt;h3 id=&quot;implementation-change&quot;&gt;Implementation change&lt;/h3&gt;
&lt;p&gt;Since the external interface of the module doesn’t change, Gradle will only recompile that module. All of its consuming modules will be left untouched.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudio3/project_implementation.png&quot; alt=&quot;Implementation change with Gradle 2.0&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no problem in this scenario.&lt;/p&gt;

&lt;h3 id=&quot;abi-change&quot;&gt;ABI change&lt;/h3&gt;
&lt;p&gt;When the external interface of a module changes however, also the modules consuming that module directly need to be recompiled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudio3/project_gradle_2.0_step1.png&quot; alt=&quot;Code change (ABI) with Gradle 2.0 compile dependencies&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But those modules could be exposing parts of the bottom module directly through their own interface! So to be completely safe, they would also need to be recompiled. Same for the ones using those… and those… and…&lt;/p&gt;

&lt;p&gt;Hence Gradle would effectively need to recompile all modules.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudio3/project_gradle_2.0_final.png&quot; alt=&quot;Code change (ABI) with Gradle 2.0 compile dependencies&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we do have a big problem: one code change causes all modules to be recompiled. The root cause for this is that Gradle doesn’t know if you leak the interface of a module through another one or not.&lt;/p&gt;

&lt;h2 id=&quot;android-gradle-plugin-30-to-the-rescue&quot;&gt;Android Gradle plugin 3.0 to the rescue&lt;/h2&gt;
&lt;p&gt;The latest Android Gradle plugin now requires you to explicitly define if you leak a module’s interface. Based on that it can make the right choice on what it should recompile.&lt;/p&gt;

&lt;p&gt;As such the &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; dependency has been deprecated and replaced by two new ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;: you leak the interface of this module through your own interface, meaning exactly the same as the old &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; dependency&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt;: you only use this module internally and does not leak it through your interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now you can explicitly tell Gradle to recompile a module if the interface of a used module changes or not.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// recompile this module and all modules using this one&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// when legofy interface is modified&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':legofy'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// only recompile this module when landscapevideocamera interface is modified&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':landscapevideocamera:1.0.0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;migration-guide&quot;&gt;Migration guide&lt;/h3&gt;
&lt;p&gt;In theory you can simply replace all &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; dependencies with &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt; dependencies, but that would still cause everything to be recompiled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudio3/project_gradle_2.0_final.png&quot; alt=&quot;Code change (ABI) with Gradle 3.0 api dependencies&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So better approach is to replace all &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; dependencies with &lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt; dependencies. And only where you leak a module’s interface, you should use &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;. That should cause a lot less recompilation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidstudio3/project_gradle_3.0.png&quot; alt=&quot;Code change (ABI) with Gradle 3.0 implementation dependencies&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hopefully, this clarifies the ambiguity between &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt;, as the official &lt;a href=&quot;https://developer.android.com/studio/preview/features/new-android-plugin-migration.html#new_configurations&quot;&gt;migration guide&lt;/a&gt; is quite cryptic.&lt;/p&gt;

&lt;h3 id=&quot;other-dependency-configurations&quot;&gt;Other dependency configurations&lt;/h3&gt;
&lt;p&gt;As there was already a breaking change, the team also made use of the opportunity to finally give the other configurations proper names:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;provided&lt;/code&gt; configuration is now &lt;code class=&quot;highlighter-rouge&quot;&gt;compileOnly&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apk&lt;/code&gt; configuration is now &lt;code class=&quot;highlighter-rouge&quot;&gt;runtimeOnly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like before you can also combine these with your build variants: &lt;code class=&quot;highlighter-rouge&quot;&gt;debugApi&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;testImplementation&lt;/code&gt;,…&lt;/p&gt;

&lt;h2 id=&quot;other-migration-items&quot;&gt;Other migration items&lt;/h2&gt;
&lt;p&gt;Android Studio 3.0 packs tons of other improvements that have finally been addressed. My favorites are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all Google dependencies are available via an online Maven repository&lt;/li&gt;
  &lt;li&gt;current build variant can now be passed through to your libraries, removing the need for &lt;code class=&quot;highlighter-rouge&quot;&gt;publishNonDefault true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information have a look at the complete &lt;a href=&quot;https://developer.android.com/studio/preview/features/new-android-plugin-migration.html&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;To build multi-module projects faster, the Android Gradle plugin needed a breaking API change. Always try to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt; dependency as this will cause fewer modules to be recompiled.&lt;/p&gt;

&lt;p&gt;As always you can reach me &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=implementationvsapidependency2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;@molsjeroen&lt;/a&gt;&lt;/span&gt;
 on Twitter, or leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="tools" /><category term="gradle" /><summary type="html">Upgrading to Android studio 3.0 territory will make building multi-module projects a lot faster, but it also means a breaking Gradle plugin API change unfortunately.</summary></entry><entry><title type="html">My Google #io17 takeaways</title><link href="https://jeroenmols.com/blog/2017/05/31/googleio17/" rel="alternate" type="text/html" title="My Google #io17 takeaways" /><published>2017-05-31T00:00:00+02:00</published><updated>2017-05-31T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/05/31/googleio17</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/05/31/googleio17/">&lt;p&gt;Being my 2nd year at Google IO, I decided to do things differently: Besides taking notes during sessions, I also created a personal todo list. This contains all new (and even old) technologies I got triggered to look into.&lt;/p&gt;

&lt;p&gt;This post won’t cover all big #io17 announcements, but instead tries to be an alternative, biased, inside scoop with my personal highlights.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;The most exciting announcement for me is that Google finally becomes opinionated about architecture. This will dramatical lower the bar for starting developers. If you’re already more seasoned however… well .. rules are meant to be broken.&lt;/p&gt;

&lt;p&gt;My todo list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read and get inspired by the new &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/guide.html&quot;&gt;architecture guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn how &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/lifecycle.html#lco&quot;&gt;LifecycleObservers&lt;/a&gt; can simplify our codebase&lt;/li&gt;
  &lt;li&gt;Investigate if &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/viewmodel.html&quot;&gt;ViewModels&lt;/a&gt; are a better fit for our current state persistence&lt;/li&gt;
  &lt;li&gt;Strip out all font code and replace it with &lt;a href=&quot;https://developer.android.com/preview/features/working-with-fonts.html#fonts-in-xml&quot;&gt;XML fonts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Experiment with &lt;a href=&quot;https://developer.android.com/preview/features/downloadable-fonts.html&quot;&gt;downloadable fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended videos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FrteWKKVyzI&quot;&gt;Architecture components - introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bEKNi1JOrNs&quot;&gt;Architecture Components - Solving the Lifecycle Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;world-class-apps&quot;&gt;World class apps&lt;/h2&gt;
&lt;p&gt;Creating a globally awesome app can be quite challenging. Fortunately we now have some really interesting tools to help us out.&lt;/p&gt;

&lt;p&gt;My todo list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Investigate automatic APK splits. Here the Play console will automatically split APKs to minimize their size. This requires you to opt-in to &lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/7384423&quot;&gt;Google play app signing&lt;/a&gt;, which is permanent! (for security reasons)&lt;/li&gt;
  &lt;li&gt;Get approval to migrate services to Firebase, which is really becoming the best set of developer tools
    &lt;ul&gt;
      &lt;li&gt;Migrate to Firebase analytics, that now supports &lt;a href=&quot;https://support.google.com/firebase/answer/7397304&quot;&gt;custom parameters for events&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Replace crash reporting with Crashlytics (finally). That will become the default Firebase crash reporting since &lt;a href=&quot;https://fabric.io/blog/fabric-joins-google&quot;&gt;Google acquired Fabric&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Integrate &lt;a href=&quot;https://firebase.google.com/docs/perf-mon/&quot;&gt;Firebase performance monitoring&lt;/a&gt; to automatically measures app performance. This gives you detailed statistics about startup, requests times,… and allows you to filter those by country, devices, versions,… all with zero effort!
&lt;img src=&quot;https://jeroenmols.com/img/blog/googleio17/firebase_performance.png&quot; alt=&quot;Firebase performance monitoring&quot; class=&quot;align-center&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Look into &lt;a href=&quot;https://developer.android.com/topic/performance/vitals/index.html&quot;&gt;Android vitals&lt;/a&gt;, a developer console feature to monitory overall app stability and performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended videos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HwFIxbCR4Hs&quot;&gt;Great app performance with Firebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9HtTL_RO2wI&quot;&gt;Android performance: UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://android-developers.googleblog.com/2017/05/whats-new-in-google-play-at-io-2017.html&quot;&gt;I/O 2017: Everything new in the Google Play Console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.googleblog.com/2017/05/whats-new-from-firebase-at-google-io.html&quot;&gt;What’s new from Firebase at Google I/O 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.googleblog.com/2017/05/introducing-firebase-performance.html?m=1&quot;&gt;Introducing Firebase Performance Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-improvements&quot;&gt;Build improvements&lt;/h2&gt;
&lt;p&gt;I’m definitely big on tooling and making builds cleaner and more efficient. Fortunately (and unsurprisingly) the tools team didn’t disappoint this year.&lt;/p&gt;

&lt;p&gt;My todo list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Migrate to the &lt;a href=&quot;https://developer.android.com/studio/preview/features/new-android-plugin-migration.html&quot;&gt;Android Gradle 3.0 plugin&lt;/a&gt;, that includes some breaking changes to make building multi module projects faster.&lt;/li&gt;
  &lt;li&gt;Use support libraries directly from the new Google Maven repository
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//maven.google.com' }&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Apply all &lt;a href=&quot;https://developer.android.com/studio/build/optimize-your-build.html&quot;&gt;Gradle build speed up tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reduce APK size by explicitly defining supported languages (&lt;code class=&quot;highlighter-rouge&quot;&gt;resConfigs&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended videos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7ll-rkLCtyk&quot;&gt;Speeding Up Your Android Gradle Builds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Hx_rwS1NTiI&quot;&gt;What’s New in Android Development Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;p&gt;Besides the above themes, there are many more exciting areas to explore.&lt;/p&gt;

&lt;p&gt;My todo list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start a study group to &lt;a href=&quot;https://kotlinlang.org/docs/tutorials/koans.html&quot;&gt;learn Kotlin&lt;/a&gt;. It’s important to get the entire team up to speed with the basics, then defining a plan forward and start migrating.&lt;/li&gt;
  &lt;li&gt;Add support for the super tall Galaxy S8 screen
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.max_aspect&quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Learn about &lt;a href=&quot;https://developer.android.com/topic/instant-apps/overview.html&quot;&gt;Android instant apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Watch &lt;a href=&quot;https://www.youtube.com/watch?v=pK7W5npkhho&quot;&gt;TDD on Android&lt;/a&gt; talk&lt;/li&gt;
  &lt;li&gt;Get up to speed with Android O &lt;a href=&quot;https://developer.android.com/preview/features/notification-channels.html&quot;&gt;notification channels&lt;/a&gt;, as you must use these when targeting Android O or your &lt;a href=&quot;https://twitter.com/xgouchet/status/865223151243886592&quot;&gt;notifications will be dropped&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Investigate what’s needed to optimize apps for &lt;a href=&quot;https://developer.android.com/preview/features/autofill.html&quot;&gt;autofill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommended videos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=X1RVYt2QKQE&quot;&gt;Introduction to Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;It’s always super inspiring to visit a conference, especially google IO. This year we got an impressive set of new developer tools/apis and I had the pleasure of meeting many interesting people. We’re lucky to have such a vibrant community!&lt;/p&gt;

&lt;p&gt;Do you like this format? Let me know in the comments below or &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=mygoogle#io17takeaways2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;@molsjeroen&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="conference" /><category term="googleio" /><summary type="html">Being my 2nd year at Google IO, I decided to do things differently: Besides taking notes during sessions, I also created a personal todo list. This contains all new (and even old) technologies I got triggered to look into.</summary></entry><entry><title type="html">Android Makers FR recap</title><link href="https://jeroenmols.com/blog/2017/04/11/androidmakers17/" rel="alternate" type="text/html" title="Android Makers FR recap" /><published>2017-04-11T00:00:00+02:00</published><updated>2017-04-11T00:00:00+02:00</updated><id>https://jeroenmols.com/blog/2017/04/11/androidmakers17</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/04/11/androidmakers17/">&lt;p&gt;After organizing Droidcon Paris for several year, the organizers decided to move on and experiment with a new format. This didn’t just result in a well organized conference, but also in a fresh new vibe whilst still feeling familiar.&lt;/p&gt;

&lt;p&gt;In this post I’d like to share some general themes, my personal highlights and all of the slides I could gather from socials.&lt;/p&gt;

&lt;h2 id=&quot;details-matter&quot;&gt;Details matter&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidmakers17/launchscreen.png&quot; alt=&quot;Make sure your app doesn't launch with a blank screen&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Building a world class app doesn’t just require good engineering practices, but you literally have to handle details on every front.&lt;/p&gt;

&lt;p&gt;My key takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learn and optimize your app launch time:&lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell am start -W &amp;lt;packagename&amp;gt;/. &amp;lt;activityname&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Never share a file directly via an intent, always copy it first&lt;/li&gt;
  &lt;li&gt;Prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; as the scheme for direct links&lt;/li&gt;
  &lt;li&gt;Hard-coded encryption keys can be easily found in byte code: grep for &lt;code class=&quot;highlighter-rouge&quot;&gt;Ljavax/crypto&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;API design is basically designing future regrets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;productivity&quot;&gt;Productivity&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidmakers17/testingpyramid.png&quot; alt=&quot;The Android testing pyramid&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As projects get more complex, it becomes crucial (for your own sanity) to have the right engineering practices in place. Try and leverage your continuous integration to automatically build, test and statically analyze your pull requests before merging.&lt;/p&gt;

&lt;p&gt;My key takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testability must be taken into account from project start&lt;/li&gt;
  &lt;li&gt;Many git conflicts can be resolved automatically with proper tooling&lt;/li&gt;
  &lt;li&gt;Use pre launch reports before going to production&lt;/li&gt;
  &lt;li&gt;Naming things is hard, yet super important&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;programming-languages&quot;&gt;Programming languages&lt;/h2&gt;
&lt;p&gt;Challenging the traditional way of app development has gotten a new spark thanks to Kotlin and the rise of other cross platform tools. There is definitely no silver bullet yet, but it’s good to see the community stay open minded.&lt;/p&gt;

&lt;p&gt;My key takeaways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every Android developer hates WebViews&lt;/li&gt;
  &lt;li&gt;With incremental builds, Kotlin compiles as fast as Java&lt;/li&gt;
  &lt;li&gt;React native is JavaScript rendered to a native UI(not ready for primetime yet, wait for 1.0 version)&lt;/li&gt;
  &lt;li&gt;Any Android dev can develop for Android Things (runs Activities!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;organizer-recap&quot;&gt;Organizer recap&lt;/h2&gt;
&lt;p&gt;Relive the conference through the organizers eyes, they did a great job at summarizing each day. Clicking each moment will expand more details.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;twitter-moment&quot; href=&quot;https://twitter.com/i/moments/851372466341629952?limit=3&quot;&gt;Android Makers 2017 - Day 1&lt;/a&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;twitter-moment&quot; href=&quot;https://twitter.com/i/moments/851650664644194304?limit=3&quot;&gt;Android Makers - Day 2&lt;/a&gt; &lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;conference-slides&quot;&gt;Conference slides&lt;/h2&gt;
&lt;p&gt;While the conference organizers will publish all slides very soon, I can image that quite a few people are already looking for a sneak preview. Hence I bundled everything I could already gather from socials.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jeroenmols/the-art-of-organizing-resources&quot;&gt;The ART of organizing resources&lt;/a&gt; by Jeroen Mols&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/malmstein/remote-and-lonely&quot;&gt;Remote, lonely and productive&lt;/a&gt; by David González&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/cyrilmottier/launch-screens-from-a-tap-to-your-app&quot;&gt;Launch Screens: From a Tap to Your App&lt;/a&gt; by Cyril Mottier&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jeremiemartinez/the-evolution-of-android-notification&quot;&gt;The evolution of Android notification&lt;/a&gt; by Jeremie Martinez&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/tysmith/deep-android-integrations&quot;&gt;Deep Android Integrations&lt;/a&gt; by Ty Smith&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/camaelon/android-design-tools-new-features-and-tools-for-rapid-ui-development&quot;&gt;Android Design Tools : New features and tools for rapid UI development&lt;/a&gt; by Nicolas Roard&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/baresse/develop-a-weather-app-with-kotlin-androidmakers-17&quot;&gt;Develop a weather app with Kotlin&lt;/a&gt; by Laurent Baresse&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/xgouchet/merge-like-its-2099-androidmakers-2017&quot;&gt;Merge like it’s 2099&lt;/a&gt; by Xavier Gouchet&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/dwursteisen/rxjava-est-mort-vive-rxjava-2&quot;&gt;RxJava est mort, vive RxJava 2&lt;/a&gt; by David Wursteisen&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/florianmski/taking-care-of-your-ui-tests&quot;&gt;Taking care of your UI tests&lt;/a&gt; by Florian Mierzejewski&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/VasiliyZukanov/dependency-injection-in-android-74836565?trk=v-feed&quot;&gt;Dependency Injection in Android - Best Practices&lt;/a&gt; by Vasiliy Zukanov&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/stephanenicolas/toothpick-a-fresh-approach-to-dependency-injection-di-on-android&quot;&gt;Toothpick: a fresh approach to Dependency Injection on Android&lt;/a&gt; by Stéphane Nicolas and Daniel Molinero Reguera&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mathieu_calba/streamlining-payments-on-mobile&quot;&gt;Streamlining Payments on Mobile&lt;/a&gt; by Mathieu Calba&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/jinqian/heat-the-neurons-of-your-smartphone-with-deep-learning&quot;&gt;Heat the Neurons of Your Smartphone with Deep Learning&lt;/a&gt; by Qian Jin and Yoann Benoit&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/ecgreb/testable-android-architecture-android-makers-france&quot;&gt;Testable Android Architecture&lt;/a&gt; by Chuck Greb&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/arnaudgiuliani&quot;&gt;Develop your next app with kotlin&lt;/a&gt; by Arnaud Giuliani&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/smarkovik/make-or-break&quot;&gt;Make or brake… using Gradle&lt;/a&gt; by Stanojko Markovik&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/renaudboulard/getting-the-most-of-android-obfuscation-tools&quot;&gt;Getting the most of Android obfuscation tools&lt;/a&gt; by Renaud Boulard&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/elainedb/intro-to-google-assistant-and-actions-on-google&quot;&gt;Intro to Google Assistant and Actions on Google&lt;/a&gt; by Elaine Dias Batista and Wajdi Ben Rabah&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/elainedb/actions-on-google-workshop&quot;&gt;Actions on Google workshop&lt;/a&gt; by Elaine Dias Batista and Wajdi Ben Rabah&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1Ehc6B78kWnX23W1SZvUtpP42LMsSJwdEvD0WIkgACmk/edit#slide=id.p&quot;&gt;Modern Android: How to ditch Activities &amp;amp; Fragments&lt;/a&gt; by Fabien Devos&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/rpradal/kotlin-in-the-real-world&quot;&gt;Kotlin in the real world&lt;/a&gt; by Rémi Pradal&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/OCTOTechnology/one-year-of-clean-architecture-the-good-the-bad-and-the-bob&quot;&gt;One Year of Clean Architecture - The Good, The Bad and The Bob&lt;/a&gt; by Gabriel Adgeg and Dorian Lamande&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/ophilippot/iotception-energy-measurement-of-android-things-on-raspberry-pi-3-with-arduino-uno&quot;&gt;IotCeption - Energy Measurement of Android Things on Raspberry PI 3 with Arduino Uno&lt;/a&gt; by Olivier Philippot&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/perfectslayer/le-root-un-inconnu-chez-soi&quot;&gt;Le root : un inconnu chez soi?&lt;/a&gt; by Bruce Bujon&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/oleur/exoplayer-player-multimedia-pour-les-applications-et-la-realite-virtuelle&quot;&gt;ExoPlayer, player multimédia pour vos applications et la réalité virtuelle&lt;/a&gt; by Julien Salvi&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/aerilys/le-design-mobile-cest-pas-facile-74910698&quot;&gt;Le design mobile c’est pas facile&lt;/a&gt; by Quentin Sallat&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://jeroenmols.com/img/blog/androidmakers17/team.jpg&quot; alt=&quot;The awesome Android makers organizing team&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the entire Android Makers team for organizing a great conference and to all sponsors for supporting. Hope to see you all next year!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="conference" /><category term="androidmakers" /><summary type="html">After organizing Droidcon Paris for several year, the organizers decided to move on and experiment with a new format. This didn’t just result in a well organized conference, but also in a fresh new vibe whilst still feeling familiar.</summary></entry><entry><title type="html">Why your app should crash</title><link href="https://jeroenmols.com/blog/2017/03/08/appcrash/" rel="alternate" type="text/html" title="Why your app should crash" /><published>2017-03-08T00:00:00+01:00</published><updated>2017-03-08T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/03/08/appcrash</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/03/08/appcrash/">&lt;p&gt;Too many times I’ve seen developers trying to avoid crashes at all cost. But are unhandled exceptions really that bad? And are null checks really the answer?&lt;/p&gt;

&lt;p&gt;Actually, sometimes you want your app to crash. This post will explain why and give some practical tips.&lt;/p&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;
&lt;p&gt;In this post I focus on null checks for simplicity, but this can easily be generalized to any other edge case.&lt;/p&gt;

&lt;h2 id=&quot;the-null-check-architecture&quot;&gt;The null check architecture&lt;/h2&gt;
&lt;p&gt;Let’s say we have a simple application that shows a list of sports player:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// some awesome code here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a happy scenario, this will work, but what happens if the list is null?&lt;/p&gt;

&lt;p&gt;Obviously can add an infamous null check:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// some awesome code here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All settled!&lt;/p&gt;

&lt;p&gt;Oh wait… the list can also be empty:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// some awesome code here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And what about the five layers of architecture &lt;code class=&quot;highlighter-rouge&quot;&gt;soccerPlayers&lt;/code&gt; gets passed through below the UI? Should we also duplicate our checks in each of those layers in those?&lt;/p&gt;

&lt;p&gt;Before you know it you’ll have null checks everywhere!&lt;/p&gt;

&lt;h2 id=&quot;the-null-check-problem&quot;&gt;The null check problem&lt;/h2&gt;
&lt;p&gt;Obviously, null checks clutter your code significantly.&lt;/p&gt;

&lt;p&gt;But that’s not the only problem! Because once you’re used to using them, you’ll use them everywhere!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;soccerPlayers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myRecyclerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myRecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// some awesome code here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even when you don’t need them, you’ll still add them!&lt;/p&gt;

&lt;p&gt;Let that sink in for a second…&lt;/p&gt;

&lt;p&gt;What is the exact problem here?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An “innocent” null check can easily mask a bigger, more fundamental issue&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Should &lt;code class=&quot;highlighter-rouge&quot;&gt;soccerPlayers&lt;/code&gt; actually ever be null there in the first place? Or is it the responsibility of the lower levels of your app to return an empty list instead?&lt;/p&gt;

&lt;p&gt;And what should happen when the &lt;code class=&quot;highlighter-rouge&quot;&gt;soccerPlayers&lt;/code&gt; is actually null? Surely showing the user a completely blank screen by doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;The latter actually means that your app will stop working “silently” in production without you having any way of detecting that!&lt;/p&gt;

&lt;h2 id=&quot;crashes-to-the-rescue&quot;&gt;Crashes to the rescue&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If an app gets into a state it wasn’t designed for, it should crash. There is no general way of handling that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Methods shouldn’t check their inputs for every possible scenario that can theoretically occur. Instead, you should carefully consider what the input can actually be and only prepare for that.&lt;/p&gt;

&lt;p&gt;If your app gets in a state you didn’t design it for, wouldn’t that be something you would like to know ASAP?&lt;/p&gt;

&lt;p&gt;Well in come our beloved exceptions!&lt;/p&gt;

&lt;p&gt;Unhandled exceptions are great because they:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;notify you immediately by crashing the app&lt;/li&gt;
  &lt;li&gt;highlight the problem instead of dying silently&lt;/li&gt;
  &lt;li&gt;have a trace to pinpoint the problem&lt;/li&gt;
  &lt;li&gt;are automatically backed up to your crashreporting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This obviously doens’t mean that your app should crash for your users! All I’m saying is that if there is a problem in my app, I’d rather know about it by getting a crash report instead of not knowing.&lt;/p&gt;

&lt;p&gt;Crash or not, for the end user it’s the same: their app is broken.&lt;/p&gt;

&lt;p&gt;And be reassured, you won’t start bothering users with more crashes! Before rolling out to production you still have several safety nets: developer testing, QA department, beta testing, staged rollout,…&lt;/p&gt;

&lt;p&gt;So even with this strategy, you can still get to 99,9% crash free users.&lt;/p&gt;

&lt;center&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;nl&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/molsjeroen&quot;&gt;@molsjeroen&lt;/a&gt; &lt;a href=&quot;https://twitter.com/Jan_Joris&quot;&gt;@Jan_Joris&lt;/a&gt; we have maybe 100s of throw new IllegalStateException in our code base and our crash-free rate is 99.9%&lt;/p&gt;&amp;mdash; Said Tahsin Dane (@tasomaniac) &lt;a href=&quot;https://twitter.com/tasomaniac/status/839943184729923586&quot;&gt;9 maart 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/center&gt;

&lt;h2 id=&quot;practical-tips&quot;&gt;Practical tips&lt;/h2&gt;
&lt;p&gt;To clarify this approach and to help you kickstart implementing it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Always design your app to be robust against any input outside of your control: responses from webservices, data entered in UI, incoming intents,…&lt;/li&gt;
  &lt;li&gt;Ensure data integrity at the point of entry in your app. This way invalid data (null, empty,…) cannot occur anywhere else in your app and you don’t have to check for it.&lt;/li&gt;
  &lt;li&gt;If you’re unsure a certain error situation can occur somewhere, assume it won’t! During testing you’ll find out (&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeException&lt;/code&gt;) if you’re right.&lt;/li&gt;
  &lt;li&gt;If a certain method cannot be called in production, can only be called once,… throw an IllegalStateException.&lt;/li&gt;
  &lt;li&gt;Always test thoroughly before shipping to all your users. You’ll catch the feared “crashes” before your users do.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Instead of being afraid of crashes, you should embrace them to find errors in your apps fasters. Crashes not only make errors immediately visible, they also offer a convenient way of debugging them via the stacktrace.&lt;/p&gt;

&lt;p&gt;As always you can reach me &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=whyyourappshouldcrash2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;@molsjeroen&lt;/a&gt;&lt;/span&gt;
 on twitter, or leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="crashes" /><category term="architecture" /><category term="cleancode" /><summary type="html">Too many times I’ve seen developers trying to avoid crashes at all cost. But are unhandled exceptions really that bad? And are null checks really the answer?</summary></entry><entry><title type="html">Write awesome unit tests</title><link href="https://jeroenmols.com/blog/2017/02/16/unittests/" rel="alternate" type="text/html" title="Write awesome unit tests" /><published>2017-02-16T00:00:00+01:00</published><updated>2017-02-16T00:00:00+01:00</updated><id>https://jeroenmols.com/blog/2017/02/16/unittests</id><content type="html" xml:base="https://jeroenmols.com/blog/2017/02/16/unittests/">&lt;p&gt;If you can code, you can also write unit tests. Writing awesome tests on the other hand is a different story. Don’t fool yourself: Unit testing code is production code that you will need to maintain, refactor and build upon for years to come.&lt;/p&gt;

&lt;p&gt;This blogpost aims at providing three very simple rules that will significantly ramp up your testing game. Every rule is followed by pragmatic tips so you can easily start implementing.&lt;/p&gt;

&lt;h2 id=&quot;1-run-ludicrously-fast&quot;&gt;1. Run ludicrously fast&lt;/h2&gt;
&lt;p&gt;The only reason you write unit tests is to run them. This has two benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;confirm that something is working properly&lt;/li&gt;
  &lt;li&gt;detect when something stopped working&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In summary, tests are your safety net, the main weapon against regression. They make sure bugs remain fixed and allow you to refactor your code.&lt;/p&gt;

&lt;p&gt;There is one caveat however: for tests to do their job, you need to run them!&lt;/p&gt;

&lt;p&gt;Every time they run, they give you feedback about the code. And the shorter you can get your feedback loop, the sooner you’ll notice bugs and the easier (=cheaper) it will be to fix. That means you don’t just want to run them before every release, nor on a daily basis, but literally after every change you make.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The more you run your test, the more value you’ll get from them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the less time you have to wait for your tests to run, the more often you’re going to run them. Consequently for you to run your tests often, they need to run fast… ludicrously fast.&lt;/p&gt;

&lt;p&gt;Not in one minute, not even in 10 seconds, but your entire test suite should pass in less than a second!&lt;/p&gt;

&lt;p&gt;This means you’ll have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;run your tests on a JVM instead of on a device&lt;/li&gt;
  &lt;li&gt;only test isolated pieces of business logic&lt;/li&gt;
  &lt;li&gt;don’t include UI, database or network tests in your main test suite&lt;/li&gt;
  &lt;li&gt;don’t use wait/sleep statements in tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-small-and-focussed-tests&quot;&gt;2. Small and focussed tests&lt;/h2&gt;
&lt;p&gt;Always write your tests with failures in mind. This means explicitly designing your tests to catch bugs in your apps.&lt;/p&gt;

&lt;p&gt;Given a bug, would you prefer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;one bug -&amp;gt; multiple tests fail&lt;/li&gt;
  &lt;li&gt;one bug -&amp;gt; exactly one test fails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bingo, the second one, because that simplifies debugging. In case of a failing test you just look at the test name to see what went wrong.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logInShouldFailWithWrongPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Test code&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;For every bug, exactly one test must fail. The root cause of failure should be described by the test name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This forces you to only check for one thing per test and will lead to smaller tests that are easier to understand, easier to explain and easier to maintain.&lt;/p&gt;

&lt;p&gt;That’s why a good test should be small (=few lines of code) and focussed (=only test for one thing), just like any other method in our codebase.&lt;/p&gt;

&lt;p&gt;This means you’ll have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;write tests with only one single assert/verify statement&lt;/li&gt;
  &lt;li&gt;have more small tests instead of fewer big ones&lt;/li&gt;
  &lt;li&gt;clearly describe the cause of failure in test names&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-100-reliable&quot;&gt;3. 100% reliable&lt;/h2&gt;
&lt;p&gt;Tests are your safety net, so whenever that tells you something is wrong… you’ll have to take it seriously. That means dropping everything to go and fix that failing test.&lt;/p&gt;

&lt;p&gt;Obviously that’s quite frustrating as you’re eager to build a feature and suddenly you have to start fire fighting somewhere else.&lt;/p&gt;

&lt;p&gt;Now imagine analyzing the problem for a couple of hours, not finding anything wrong, rerunning the tests (out of desperation) and every test suddenly passes…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most frustrating thing for a developer is waisting time on random errors that are fixed by a clean or IDE restart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if more tests behave the same way… you’ll loose trust in your entire test suite. You stop taking failures seriously and stop having the benefits from your test suit altogether.&lt;/p&gt;

&lt;p&gt;That’s why all your test need to be 100% reliable and only fail when there is actually a problem.&lt;/p&gt;

&lt;p&gt;This means you’ll have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;run your tests on a JVM (connection to device can break)&lt;/li&gt;
  &lt;li&gt;mock network communication during tests&lt;/li&gt;
  &lt;li&gt;move UI/integration tests out of your unit test suite&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;The more you run your unit tests, the more value you’ll get from them. Awesome unit tests facilitate exactly that by being fast, focussed and super reliable.&lt;/p&gt;

&lt;p&gt;As always you can reach me &lt;span&gt;&lt;a href=&quot;https://twitter.com/molsjeroen?source=writeawesomeunittests2017&quot; class=&quot;ga-link&quot; target=&quot;_blank&quot;&gt;@molsjeroen&lt;/a&gt;&lt;/span&gt;
 on twitter, or leave a comment below!&lt;/p&gt;</content><author><name>Jeroen Mols</name></author><category term="android" /><category term="testing" /><category term="cleancode" /><summary type="html">If you can code, you can also write unit tests. Writing awesome tests on the other hand is a different story. Don’t fool yourself: Unit testing code is production code that you will need to maintain, refactor and build upon for years to come.</summary></entry></feed>